(() => {
	function ra(s, e, t) { return (1 - t) * s + t * e } var sa = s => { let e = s.fov * (Math.PI / 180), t = 2 * Math.tan(e / 2) * s.position.z, n = t * s.aspect; return { height: t, width: n } }; function Bc(s) { document.readyState != "loading" ? s() : document.addEventListener("DOMContentLoaded", e => s()) } function Ls(s) { let e = new Map, t = { set(i, r, o) { let a = i[r]; i[r] = o; for (let l of e.get(r) || []) l(o, a); return !0 } }, n = { onChange: (i, r) => (e.has(i) || e.set(i, []), e.get(i).push(r), () => { let o = e.get(i), a = o.indexOf(r); o.splice(a, 1), o.length === 0 && e.delete(i) }), ...s }; return new Proxy(n, t) } var Nc = "132"; var np = 0, zc = 1, ip = 2; var Oc = 1, rp = 2, Nr = 3, zr = 0, Ke = 1, Bi = 2, Uc = 1; var On = 0, Or = 1, kc = 2, Hc = 3, Gc = 4, sp = 5, Ni = 100, op = 101, ap = 102, Vc = 103, Wc = 104, lp = 200, cp = 201, up = 202, hp = 203, qc = 204, Xc = 205, fp = 206, dp = 207, pp = 208, mp = 209, gp = 210, _p = 0, xp = 1, yp = 2, oa = 3, vp = 4, wp = 5, bp = 6, Mp = 7, Cs = 0, Sp = 1, Tp = 2, gi = 0, Ep = 1, Ap = 2, Lp = 3, Cp = 4, Pp = 5, Yc = 300, Ps = 301, Rs = 302, aa = 303, la = 304, Is = 306, ca = 307, ua = 1e3, Rt = 1001, ha = 1002, rt = 1003, Zc = 1004; var Jc = 1005; var Ut = 1006, Rp = 1007; var Ds = 1008; var zi = 1009, Ip = 1010, Dp = 1011, Fs = 1012, Fp = 1013, Bs = 1014, _i = 1015, Oi = 1016, Bp = 1017, Np = 1018, zp = 1019, Ur = 1020, Op = 1021, Un = 1022, It = 1023, Up = 1024, kp = 1025, Hp = It, Ui = 1026, kr = 1027, Gp = 1028, Vp = 1029, Wp = 1030, qp = 1031, Xp = 1032, Yp = 1033, jc = 33776, $c = 33777, Qc = 33778, Kc = 33779, eu = 35840, tu = 35841, nu = 35842, iu = 35843, Zp = 36196, ru = 37492, su = 37496, Jp = 37808, jp = 37809, $p = 37810, Qp = 37811, Kp = 37812, em = 37813, tm = 37814, nm = 37815, im = 37816, rm = 37817, sm = 37818, om = 37819, am = 37820, lm = 37821, cm = 36492, um = 37840, hm = 37841, fm = 37842, dm = 37843, pm = 37844, mm = 37845, gm = 37846, _m = 37847, xm = 37848, ym = 37849, vm = 37850, wm = 37851, bm = 37852, Mm = 37853, Sm = 2200, Tm = 2201, Em = 2202, Ns = 2300, zs = 2301, fa = 2302, ki = 2400, Hi = 2401, Os = 2402, da = 2500, ou = 2501, Am = 0; var St = 3e3, Gi = 3001, pa = 3007, ma = 3002, Lm = 3003, au = 3004, lu = 3005, cu = 3006, Cm = 3200, Pm = 3201, Vi = 0, Rm = 1; var ga = 7680; var Im = 519, Hr = 35044, Us = 35048; var uu = "300 es", kn = class { addEventListener(e, t) { this._listeners === void 0 && (this._listeners = {}); let n = this._listeners; n[e] === void 0 && (n[e] = []), n[e].indexOf(t) === -1 && n[e].push(t) } hasEventListener(e, t) { if (this._listeners === void 0) return !1; let n = this._listeners; return n[e] !== void 0 && n[e].indexOf(t) !== -1 } removeEventListener(e, t) { if (this._listeners === void 0) return; let i = this._listeners[e]; if (i !== void 0) { let r = i.indexOf(t); r !== -1 && i.splice(r, 1) } } dispatchEvent(e) { if (this._listeners === void 0) return; let n = this._listeners[e.type]; if (n !== void 0) { e.target = this; let i = n.slice(0); for (let r = 0, o = i.length; r < o; r++)i[r].call(this, e); e.target = null } } }, ut = []; for (let s = 0; s < 256; s++)ut[s] = (s < 16 ? "0" : "") + s.toString(16); var _a = Math.PI / 180, xa = 180 / Math.PI; function jt() { let s = Math.random() * 4294967295 | 0, e = Math.random() * 4294967295 | 0, t = Math.random() * 4294967295 | 0, n = Math.random() * 4294967295 | 0; return (ut[s & 255] + ut[s >> 8 & 255] + ut[s >> 16 & 255] + ut[s >> 24 & 255] + "-" + ut[e & 255] + ut[e >> 8 & 255] + "-" + ut[e >> 16 & 15 | 64] + ut[e >> 24 & 255] + "-" + ut[t & 63 | 128] + ut[t >> 8 & 255] + "-" + ut[t >> 16 & 255] + ut[t >> 24 & 255] + ut[n & 255] + ut[n >> 8 & 255] + ut[n >> 16 & 255] + ut[n >> 24 & 255]).toUpperCase() } function Tt(s, e, t) { return Math.max(e, Math.min(t, s)) } function Dm(s, e) { return (s % e + e) % e } function ya(s, e, t) { return (1 - t) * s + t * e } function hu(s) { return (s & s - 1) == 0 && s !== 0 } function Fm(s) { return Math.pow(2, Math.floor(Math.log(s) / Math.LN2)) } var Y = class { constructor(e = 0, t = 0) { this.x = e, this.y = t } get width() { return this.x } set width(e) { this.x = e } get height() { return this.y } set height(e) { this.y = e } set(e, t) { return this.x = e, this.y = t, this } setScalar(e) { return this.x = e, this.y = e, this } setX(e) { return this.x = e, this } setY(e) { return this.y = e, this } setComponent(e, t) { switch (e) { case 0: this.x = t; break; case 1: this.y = t; break; default: throw new Error("index is out of range: " + e) }return this } getComponent(e) { switch (e) { case 0: return this.x; case 1: return this.y; default: throw new Error("index is out of range: " + e) } } clone() { return new this.constructor(this.x, this.y) } copy(e) { return this.x = e.x, this.y = e.y, this } add(e, t) { return t !== void 0 ? (console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(e, t)) : (this.x += e.x, this.y += e.y, this) } addScalar(e) { return this.x += e, this.y += e, this } addVectors(e, t) { return this.x = e.x + t.x, this.y = e.y + t.y, this } addScaledVector(e, t) { return this.x += e.x * t, this.y += e.y * t, this } sub(e, t) { return t !== void 0 ? (console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(e, t)) : (this.x -= e.x, this.y -= e.y, this) } subScalar(e) { return this.x -= e, this.y -= e, this } subVectors(e, t) { return this.x = e.x - t.x, this.y = e.y - t.y, this } multiply(e) { return this.x *= e.x, this.y *= e.y, this } multiplyScalar(e) { return this.x *= e, this.y *= e, this } divide(e) { return this.x /= e.x, this.y /= e.y, this } divideScalar(e) { return this.multiplyScalar(1 / e) } applyMatrix3(e) { let t = this.x, n = this.y, i = e.elements; return this.x = i[0] * t + i[3] * n + i[6], this.y = i[1] * t + i[4] * n + i[7], this } min(e) { return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this } max(e) { return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this } clamp(e, t) { return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this } clampScalar(e, t) { return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this } clampLength(e, t) { let n = this.length(); return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n))) } floor() { return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this } ceil() { return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this } round() { return this.x = Math.round(this.x), this.y = Math.round(this.y), this } roundToZero() { return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this } negate() { return this.x = -this.x, this.y = -this.y, this } dot(e) { return this.x * e.x + this.y * e.y } cross(e) { return this.x * e.y - this.y * e.x } lengthSq() { return this.x * this.x + this.y * this.y } length() { return Math.sqrt(this.x * this.x + this.y * this.y) } manhattanLength() { return Math.abs(this.x) + Math.abs(this.y) } normalize() { return this.divideScalar(this.length() || 1) } angle() { return Math.atan2(-this.y, -this.x) + Math.PI } distanceTo(e) { return Math.sqrt(this.distanceToSquared(e)) } distanceToSquared(e) { let t = this.x - e.x, n = this.y - e.y; return t * t + n * n } manhattanDistanceTo(e) { return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) } setLength(e) { return this.normalize().multiplyScalar(e) } lerp(e, t) { return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this } lerpVectors(e, t, n) { return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this } equals(e) { return e.x === this.x && e.y === this.y } fromArray(e, t = 0) { return this.x = e[t], this.y = e[t + 1], this } toArray(e = [], t = 0) { return e[t] = this.x, e[t + 1] = this.y, e } fromBufferAttribute(e, t, n) { return n !== void 0 && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."), this.x = e.getX(t), this.y = e.getY(t), this } rotateAround(e, t) { let n = Math.cos(t), i = Math.sin(t), r = this.x - e.x, o = this.y - e.y; return this.x = r * n - o * i + e.x, this.y = r * i + o * n + e.y, this } random() { return this.x = Math.random(), this.y = Math.random(), this } }; Y.prototype.isVector2 = !0; var st = class { constructor() { this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1], arguments.length > 0 && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.") } set(e, t, n, i, r, o, a, l, c) { let u = this.elements; return u[0] = e, u[1] = i, u[2] = a, u[3] = t, u[4] = r, u[5] = l, u[6] = n, u[7] = o, u[8] = c, this } identity() { return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this } copy(e) { let t = this.elements, n = e.elements; return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], this } extractBasis(e, t, n) { return e.setFromMatrix3Column(this, 0), t.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this } setFromMatrix4(e) { let t = e.elements; return this.set(t[0], t[4], t[8], t[1], t[5], t[9], t[2], t[6], t[10]), this } multiply(e) { return this.multiplyMatrices(this, e) } premultiply(e) { return this.multiplyMatrices(e, this) } multiplyMatrices(e, t) { let n = e.elements, i = t.elements, r = this.elements, o = n[0], a = n[3], l = n[6], c = n[1], u = n[4], h = n[7], f = n[2], d = n[5], g = n[8], m = i[0], x = i[3], p = i[6], _ = i[1], w = i[4], v = i[7], b = i[2], T = i[5], y = i[8]; return r[0] = o * m + a * _ + l * b, r[3] = o * x + a * w + l * T, r[6] = o * p + a * v + l * y, r[1] = c * m + u * _ + h * b, r[4] = c * x + u * w + h * T, r[7] = c * p + u * v + h * y, r[2] = f * m + d * _ + g * b, r[5] = f * x + d * w + g * T, r[8] = f * p + d * v + g * y, this } multiplyScalar(e) { let t = this.elements; return t[0] *= e, t[3] *= e, t[6] *= e, t[1] *= e, t[4] *= e, t[7] *= e, t[2] *= e, t[5] *= e, t[8] *= e, this } determinant() { let e = this.elements, t = e[0], n = e[1], i = e[2], r = e[3], o = e[4], a = e[5], l = e[6], c = e[7], u = e[8]; return t * o * u - t * a * c - n * r * u + n * a * l + i * r * c - i * o * l } invert() { let e = this.elements, t = e[0], n = e[1], i = e[2], r = e[3], o = e[4], a = e[5], l = e[6], c = e[7], u = e[8], h = u * o - a * c, f = a * l - u * r, d = c * r - o * l, g = t * h + n * f + i * d; if (g === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0); let m = 1 / g; return e[0] = h * m, e[1] = (i * c - u * n) * m, e[2] = (a * n - i * o) * m, e[3] = f * m, e[4] = (u * t - i * l) * m, e[5] = (i * r - a * t) * m, e[6] = d * m, e[7] = (n * l - c * t) * m, e[8] = (o * t - n * r) * m, this } transpose() { let e, t = this.elements; return e = t[1], t[1] = t[3], t[3] = e, e = t[2], t[2] = t[6], t[6] = e, e = t[5], t[5] = t[7], t[7] = e, this } getNormalMatrix(e) { return this.setFromMatrix4(e).invert().transpose() } transposeIntoArray(e) { let t = this.elements; return e[0] = t[0], e[1] = t[3], e[2] = t[6], e[3] = t[1], e[4] = t[4], e[5] = t[7], e[6] = t[2], e[7] = t[5], e[8] = t[8], this } setUvTransform(e, t, n, i, r, o, a) { let l = Math.cos(r), c = Math.sin(r); return this.set(n * l, n * c, -n * (l * o + c * a) + o + e, -i * c, i * l, -i * (-c * o + l * a) + a + t, 0, 0, 1), this } scale(e, t) { let n = this.elements; return n[0] *= e, n[3] *= e, n[6] *= e, n[1] *= t, n[4] *= t, n[7] *= t, this } rotate(e) { let t = Math.cos(e), n = Math.sin(e), i = this.elements, r = i[0], o = i[3], a = i[6], l = i[1], c = i[4], u = i[7]; return i[0] = t * r + n * l, i[3] = t * o + n * c, i[6] = t * a + n * u, i[1] = -n * r + t * l, i[4] = -n * o + t * c, i[7] = -n * a + t * u, this } translate(e, t) { let n = this.elements; return n[0] += e * n[2], n[3] += e * n[5], n[6] += e * n[8], n[1] += t * n[2], n[4] += t * n[5], n[7] += t * n[8], this } equals(e) { let t = this.elements, n = e.elements; for (let i = 0; i < 9; i++)if (t[i] !== n[i]) return !1; return !0 } fromArray(e, t = 0) { for (let n = 0; n < 9; n++)this.elements[n] = e[n + t]; return this } toArray(e = [], t = 0) { let n = this.elements; return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e } clone() { return new this.constructor().fromArray(this.elements) } }; st.prototype.isMatrix3 = !0; var Wi, xi = class { static getDataURL(e) { if (/^data:/i.test(e.src) || typeof HTMLCanvasElement == "undefined") return e.src; let t; if (e instanceof HTMLCanvasElement) t = e; else { Wi === void 0 && (Wi = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas")), Wi.width = e.width, Wi.height = e.height; let n = Wi.getContext("2d"); e instanceof ImageData ? n.putImageData(e, 0, 0) : n.drawImage(e, 0, 0, e.width, e.height), t = Wi } return t.width > 2048 || t.height > 2048 ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", e), t.toDataURL("image/jpeg", .6)) : t.toDataURL("image/png") } }, Bm = 0, ot = class extends kn { constructor(e = ot.DEFAULT_IMAGE, t = ot.DEFAULT_MAPPING, n = Rt, i = Rt, r = Ut, o = Ds, a = It, l = zi, c = 1, u = St) { super(); Object.defineProperty(this, "id", { value: Bm++ }), this.uuid = jt(), this.name = "", this.image = e, this.mipmaps = [], this.mapping = t, this.wrapS = n, this.wrapT = i, this.magFilter = r, this.minFilter = o, this.anisotropy = c, this.format = a, this.internalFormat = null, this.type = l, this.offset = new Y(0, 0), this.repeat = new Y(1, 1), this.center = new Y(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new st, this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, this.encoding = u, this.version = 0, this.onUpdate = null, this.isRenderTargetTexture = !1 } updateMatrix() { this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y) } clone() { return new this.constructor().copy(this) } copy(e) { return this.name = e.name, this.image = e.image, this.mipmaps = e.mipmaps.slice(0), this.mapping = e.mapping, this.wrapS = e.wrapS, this.wrapT = e.wrapT, this.magFilter = e.magFilter, this.minFilter = e.minFilter, this.anisotropy = e.anisotropy, this.format = e.format, this.internalFormat = e.internalFormat, this.type = e.type, this.offset.copy(e.offset), this.repeat.copy(e.repeat), this.center.copy(e.center), this.rotation = e.rotation, this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrix.copy(e.matrix), this.generateMipmaps = e.generateMipmaps, this.premultiplyAlpha = e.premultiplyAlpha, this.flipY = e.flipY, this.unpackAlignment = e.unpackAlignment, this.encoding = e.encoding, this } toJSON(e) { let t = e === void 0 || typeof e == "string"; if (!t && e.textures[this.uuid] !== void 0) return e.textures[this.uuid]; let n = { metadata: { version: 4.5, type: "Texture", generator: "Texture.toJSON" }, uuid: this.uuid, name: this.name, mapping: this.mapping, repeat: [this.repeat.x, this.repeat.y], offset: [this.offset.x, this.offset.y], center: [this.center.x, this.center.y], rotation: this.rotation, wrap: [this.wrapS, this.wrapT], format: this.format, type: this.type, encoding: this.encoding, minFilter: this.minFilter, magFilter: this.magFilter, anisotropy: this.anisotropy, flipY: this.flipY, premultiplyAlpha: this.premultiplyAlpha, unpackAlignment: this.unpackAlignment }; if (this.image !== void 0) { let i = this.image; if (i.uuid === void 0 && (i.uuid = jt()), !t && e.images[i.uuid] === void 0) { let r; if (Array.isArray(i)) { r = []; for (let o = 0, a = i.length; o < a; o++)i[o].isDataTexture ? r.push(va(i[o].image)) : r.push(va(i[o])) } else r = va(i); e.images[i.uuid] = { uuid: i.uuid, url: r } } n.image = i.uuid } return t || (e.textures[this.uuid] = n), n } dispose() { this.dispatchEvent({ type: "dispose" }) } transformUv(e) { if (this.mapping !== Yc) return e; if (e.applyMatrix3(this.matrix), e.x < 0 || e.x > 1) switch (this.wrapS) { case ua: e.x = e.x - Math.floor(e.x); break; case Rt: e.x = e.x < 0 ? 0 : 1; break; case ha: Math.abs(Math.floor(e.x) % 2) === 1 ? e.x = Math.ceil(e.x) - e.x : e.x = e.x - Math.floor(e.x); break }if (e.y < 0 || e.y > 1) switch (this.wrapT) { case ua: e.y = e.y - Math.floor(e.y); break; case Rt: e.y = e.y < 0 ? 0 : 1; break; case ha: Math.abs(Math.floor(e.y) % 2) === 1 ? e.y = Math.ceil(e.y) - e.y : e.y = e.y - Math.floor(e.y); break }return this.flipY && (e.y = 1 - e.y), e } set needsUpdate(e) { e === !0 && this.version++ } }; ot.DEFAULT_IMAGE = void 0; ot.DEFAULT_MAPPING = Yc; ot.prototype.isTexture = !0; function va(s) { return typeof HTMLImageElement != "undefined" && s instanceof HTMLImageElement || typeof HTMLCanvasElement != "undefined" && s instanceof HTMLCanvasElement || typeof ImageBitmap != "undefined" && s instanceof ImageBitmap ? xi.getDataURL(s) : s.data ? { data: Array.prototype.slice.call(s.data), width: s.width, height: s.height, type: s.data.constructor.name } : (console.warn("THREE.Texture: Unable to serialize Texture."), {}) } var Oe = class { constructor(e = 0, t = 0, n = 0, i = 1) { this.x = e, this.y = t, this.z = n, this.w = i } get width() { return this.z } set width(e) { this.z = e } get height() { return this.w } set height(e) { this.w = e } set(e, t, n, i) { return this.x = e, this.y = t, this.z = n, this.w = i, this } setScalar(e) { return this.x = e, this.y = e, this.z = e, this.w = e, this } setX(e) { return this.x = e, this } setY(e) { return this.y = e, this } setZ(e) { return this.z = e, this } setW(e) { return this.w = e, this } setComponent(e, t) { switch (e) { case 0: this.x = t; break; case 1: this.y = t; break; case 2: this.z = t; break; case 3: this.w = t; break; default: throw new Error("index is out of range: " + e) }return this } getComponent(e) { switch (e) { case 0: return this.x; case 1: return this.y; case 2: return this.z; case 3: return this.w; default: throw new Error("index is out of range: " + e) } } clone() { return new this.constructor(this.x, this.y, this.z, this.w) } copy(e) { return this.x = e.x, this.y = e.y, this.z = e.z, this.w = e.w !== void 0 ? e.w : 1, this } add(e, t) { return t !== void 0 ? (console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(e, t)) : (this.x += e.x, this.y += e.y, this.z += e.z, this.w += e.w, this) } addScalar(e) { return this.x += e, this.y += e, this.z += e, this.w += e, this } addVectors(e, t) { return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this.w = e.w + t.w, this } addScaledVector(e, t) { return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this.w += e.w * t, this } sub(e, t) { return t !== void 0 ? (console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(e, t)) : (this.x -= e.x, this.y -= e.y, this.z -= e.z, this.w -= e.w, this) } subScalar(e) { return this.x -= e, this.y -= e, this.z -= e, this.w -= e, this } subVectors(e, t) { return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this.w = e.w - t.w, this } multiply(e) { return this.x *= e.x, this.y *= e.y, this.z *= e.z, this.w *= e.w, this } multiplyScalar(e) { return this.x *= e, this.y *= e, this.z *= e, this.w *= e, this } applyMatrix4(e) { let t = this.x, n = this.y, i = this.z, r = this.w, o = e.elements; return this.x = o[0] * t + o[4] * n + o[8] * i + o[12] * r, this.y = o[1] * t + o[5] * n + o[9] * i + o[13] * r, this.z = o[2] * t + o[6] * n + o[10] * i + o[14] * r, this.w = o[3] * t + o[7] * n + o[11] * i + o[15] * r, this } divideScalar(e) { return this.multiplyScalar(1 / e) } setAxisAngleFromQuaternion(e) { this.w = 2 * Math.acos(e.w); let t = Math.sqrt(1 - e.w * e.w); return t < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = e.x / t, this.y = e.y / t, this.z = e.z / t), this } setAxisAngleFromRotationMatrix(e) { let t, n, i, r, o = .01, a = .1, l = e.elements, c = l[0], u = l[4], h = l[8], f = l[1], d = l[5], g = l[9], m = l[2], x = l[6], p = l[10]; if (Math.abs(u - f) < o && Math.abs(h - m) < o && Math.abs(g - x) < o) { if (Math.abs(u + f) < a && Math.abs(h + m) < a && Math.abs(g + x) < a && Math.abs(c + d + p - 3) < a) return this.set(1, 0, 0, 0), this; t = Math.PI; let w = (c + 1) / 2, v = (d + 1) / 2, b = (p + 1) / 2, T = (u + f) / 4, y = (h + m) / 4, C = (g + x) / 4; return w > v && w > b ? w < o ? (n = 0, i = .707106781, r = .707106781) : (n = Math.sqrt(w), i = T / n, r = y / n) : v > b ? v < o ? (n = .707106781, i = 0, r = .707106781) : (i = Math.sqrt(v), n = T / i, r = C / i) : b < o ? (n = .707106781, i = .707106781, r = 0) : (r = Math.sqrt(b), n = y / r, i = C / r), this.set(n, i, r, t), this } let _ = Math.sqrt((x - g) * (x - g) + (h - m) * (h - m) + (f - u) * (f - u)); return Math.abs(_) < .001 && (_ = 1), this.x = (x - g) / _, this.y = (h - m) / _, this.z = (f - u) / _, this.w = Math.acos((c + d + p - 1) / 2), this } min(e) { return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this.w = Math.min(this.w, e.w), this } max(e) { return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this.w = Math.max(this.w, e.w), this } clamp(e, t) { return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this.w = Math.max(e.w, Math.min(t.w, this.w)), this } clampScalar(e, t) { return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this.w = Math.max(e, Math.min(t, this.w)), this } clampLength(e, t) { let n = this.length(); return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n))) } floor() { return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this } ceil() { return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this } round() { return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this } roundToZero() { return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w), this } negate() { return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this } dot(e) { return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w } lengthSq() { return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w } length() { return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w) } manhattanLength() { return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w) } normalize() { return this.divideScalar(this.length() || 1) } setLength(e) { return this.normalize().multiplyScalar(e) } lerp(e, t) { return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this.w += (e.w - this.w) * t, this } lerpVectors(e, t, n) { return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this.w = e.w + (t.w - e.w) * n, this } equals(e) { return e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w } fromArray(e, t = 0) { return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this.w = e[t + 3], this } toArray(e = [], t = 0) { return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e[t + 3] = this.w, e } fromBufferAttribute(e, t, n) { return n !== void 0 && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."), this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this.w = e.getW(t), this } random() { return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this } }; Oe.prototype.isVector4 = !0; var $t = class extends kn { constructor(e, t, n = {}) { super(); this.width = e, this.height = t, this.depth = 1, this.scissor = new Oe(0, 0, e, t), this.scissorTest = !1, this.viewport = new Oe(0, 0, e, t), this.texture = new ot(void 0, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.encoding), this.texture.isRenderTargetTexture = !0, this.texture.image = { width: e, height: t, depth: 1 }, this.texture.generateMipmaps = n.generateMipmaps !== void 0 ? n.generateMipmaps : !1, this.texture.internalFormat = n.internalFormat !== void 0 ? n.internalFormat : null, this.texture.minFilter = n.minFilter !== void 0 ? n.minFilter : Ut, this.depthBuffer = n.depthBuffer !== void 0 ? n.depthBuffer : !0, this.stencilBuffer = n.stencilBuffer !== void 0 ? n.stencilBuffer : !1, this.depthTexture = n.depthTexture !== void 0 ? n.depthTexture : null } setTexture(e) { e.image = { width: this.width, height: this.height, depth: this.depth }, this.texture = e } setSize(e, t, n = 1) { (this.width !== e || this.height !== t || this.depth !== n) && (this.width = e, this.height = t, this.depth = n, this.texture.image.width = e, this.texture.image.height = t, this.texture.image.depth = n, this.dispose()), this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t) } clone() { return new this.constructor().copy(this) } copy(e) { return this.width = e.width, this.height = e.height, this.depth = e.depth, this.viewport.copy(e.viewport), this.texture = e.texture.clone(), this.texture.image = { ...this.texture.image }, this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, this.depthTexture = e.depthTexture, this } dispose() { this.dispatchEvent({ type: "dispose" }) } }; $t.prototype.isWebGLRenderTarget = !0; var fu = class extends $t { constructor(e, t, n) { super(e, t); let i = this.texture; this.texture = []; for (let r = 0; r < n; r++)this.texture[r] = i.clone() } setSize(e, t, n = 1) { if (this.width !== e || this.height !== t || this.depth !== n) { this.width = e, this.height = t, this.depth = n; for (let i = 0, r = this.texture.length; i < r; i++)this.texture[i].image.width = e, this.texture[i].image.height = t, this.texture[i].image.depth = n; this.dispose() } return this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t), this } copy(e) { this.dispose(), this.width = e.width, this.height = e.height, this.depth = e.depth, this.viewport.set(0, 0, this.width, this.height), this.scissor.set(0, 0, this.width, this.height), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, this.depthTexture = e.depthTexture, this.texture.length = 0; for (let t = 0, n = e.texture.length; t < n; t++)this.texture[t] = e.texture[t].clone(); return this } }; fu.prototype.isWebGLMultipleRenderTargets = !0; var wa = class extends $t { constructor(e, t, n) { super(e, t, n); this.samples = 4 } copy(e) { return super.copy.call(this, e), this.samples = e.samples, this } }; wa.prototype.isWebGLMultisampleRenderTarget = !0; var vt = class { constructor(e = 0, t = 0, n = 0, i = 1) { this._x = e, this._y = t, this._z = n, this._w = i } static slerp(e, t, n, i) { return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."), n.slerpQuaternions(e, t, i) } static slerpFlat(e, t, n, i, r, o, a) { let l = n[i + 0], c = n[i + 1], u = n[i + 2], h = n[i + 3], f = r[o + 0], d = r[o + 1], g = r[o + 2], m = r[o + 3]; if (a === 0) { e[t + 0] = l, e[t + 1] = c, e[t + 2] = u, e[t + 3] = h; return } if (a === 1) { e[t + 0] = f, e[t + 1] = d, e[t + 2] = g, e[t + 3] = m; return } if (h !== m || l !== f || c !== d || u !== g) { let x = 1 - a, p = l * f + c * d + u * g + h * m, _ = p >= 0 ? 1 : -1, w = 1 - p * p; if (w > Number.EPSILON) { let b = Math.sqrt(w), T = Math.atan2(b, p * _); x = Math.sin(x * T) / b, a = Math.sin(a * T) / b } let v = a * _; if (l = l * x + f * v, c = c * x + d * v, u = u * x + g * v, h = h * x + m * v, x === 1 - a) { let b = 1 / Math.sqrt(l * l + c * c + u * u + h * h); l *= b, c *= b, u *= b, h *= b } } e[t] = l, e[t + 1] = c, e[t + 2] = u, e[t + 3] = h } static multiplyQuaternionsFlat(e, t, n, i, r, o) { let a = n[i], l = n[i + 1], c = n[i + 2], u = n[i + 3], h = r[o], f = r[o + 1], d = r[o + 2], g = r[o + 3]; return e[t] = a * g + u * h + l * d - c * f, e[t + 1] = l * g + u * f + c * h - a * d, e[t + 2] = c * g + u * d + a * f - l * h, e[t + 3] = u * g - a * h - l * f - c * d, e } get x() { return this._x } set x(e) { this._x = e, this._onChangeCallback() } get y() { return this._y } set y(e) { this._y = e, this._onChangeCallback() } get z() { return this._z } set z(e) { this._z = e, this._onChangeCallback() } get w() { return this._w } set w(e) { this._w = e, this._onChangeCallback() } set(e, t, n, i) { return this._x = e, this._y = t, this._z = n, this._w = i, this._onChangeCallback(), this } clone() { return new this.constructor(this._x, this._y, this._z, this._w) } copy(e) { return this._x = e.x, this._y = e.y, this._z = e.z, this._w = e.w, this._onChangeCallback(), this } setFromEuler(e, t) { if (!(e && e.isEuler)) throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order."); let n = e._x, i = e._y, r = e._z, o = e._order, a = Math.cos, l = Math.sin, c = a(n / 2), u = a(i / 2), h = a(r / 2), f = l(n / 2), d = l(i / 2), g = l(r / 2); switch (o) { case "XYZ": this._x = f * u * h + c * d * g, this._y = c * d * h - f * u * g, this._z = c * u * g + f * d * h, this._w = c * u * h - f * d * g; break; case "YXZ": this._x = f * u * h + c * d * g, this._y = c * d * h - f * u * g, this._z = c * u * g - f * d * h, this._w = c * u * h + f * d * g; break; case "ZXY": this._x = f * u * h - c * d * g, this._y = c * d * h + f * u * g, this._z = c * u * g + f * d * h, this._w = c * u * h - f * d * g; break; case "ZYX": this._x = f * u * h - c * d * g, this._y = c * d * h + f * u * g, this._z = c * u * g - f * d * h, this._w = c * u * h + f * d * g; break; case "YZX": this._x = f * u * h + c * d * g, this._y = c * d * h + f * u * g, this._z = c * u * g - f * d * h, this._w = c * u * h - f * d * g; break; case "XZY": this._x = f * u * h - c * d * g, this._y = c * d * h - f * u * g, this._z = c * u * g + f * d * h, this._w = c * u * h + f * d * g; break; default: console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + o) }return t !== !1 && this._onChangeCallback(), this } setFromAxisAngle(e, t) { let n = t / 2, i = Math.sin(n); return this._x = e.x * i, this._y = e.y * i, this._z = e.z * i, this._w = Math.cos(n), this._onChangeCallback(), this } setFromRotationMatrix(e) { let t = e.elements, n = t[0], i = t[4], r = t[8], o = t[1], a = t[5], l = t[9], c = t[2], u = t[6], h = t[10], f = n + a + h; if (f > 0) { let d = .5 / Math.sqrt(f + 1); this._w = .25 / d, this._x = (u - l) * d, this._y = (r - c) * d, this._z = (o - i) * d } else if (n > a && n > h) { let d = 2 * Math.sqrt(1 + n - a - h); this._w = (u - l) / d, this._x = .25 * d, this._y = (i + o) / d, this._z = (r + c) / d } else if (a > h) { let d = 2 * Math.sqrt(1 + a - n - h); this._w = (r - c) / d, this._x = (i + o) / d, this._y = .25 * d, this._z = (l + u) / d } else { let d = 2 * Math.sqrt(1 + h - n - a); this._w = (o - i) / d, this._x = (r + c) / d, this._y = (l + u) / d, this._z = .25 * d } return this._onChangeCallback(), this } setFromUnitVectors(e, t) { let n = e.dot(t) + 1; return n < Number.EPSILON ? (n = 0, Math.abs(e.x) > Math.abs(e.z) ? (this._x = -e.y, this._y = e.x, this._z = 0, this._w = n) : (this._x = 0, this._y = -e.z, this._z = e.y, this._w = n)) : (this._x = e.y * t.z - e.z * t.y, this._y = e.z * t.x - e.x * t.z, this._z = e.x * t.y - e.y * t.x, this._w = n), this.normalize() } angleTo(e) { return 2 * Math.acos(Math.abs(Tt(this.dot(e), -1, 1))) } rotateTowards(e, t) { let n = this.angleTo(e); if (n === 0) return this; let i = Math.min(1, t / n); return this.slerp(e, i), this } identity() { return this.set(0, 0, 0, 1) } invert() { return this.conjugate() } conjugate() { return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this } dot(e) { return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w } lengthSq() { return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w } length() { return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w) } normalize() { let e = this.length(); return e === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (e = 1 / e, this._x = this._x * e, this._y = this._y * e, this._z = this._z * e, this._w = this._w * e), this._onChangeCallback(), this } multiply(e, t) { return t !== void 0 ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."), this.multiplyQuaternions(e, t)) : this.multiplyQuaternions(this, e) } premultiply(e) { return this.multiplyQuaternions(e, this) } multiplyQuaternions(e, t) { let n = e._x, i = e._y, r = e._z, o = e._w, a = t._x, l = t._y, c = t._z, u = t._w; return this._x = n * u + o * a + i * c - r * l, this._y = i * u + o * l + r * a - n * c, this._z = r * u + o * c + n * l - i * a, this._w = o * u - n * a - i * l - r * c, this._onChangeCallback(), this } slerp(e, t) { if (t === 0) return this; if (t === 1) return this.copy(e); let n = this._x, i = this._y, r = this._z, o = this._w, a = o * e._w + n * e._x + i * e._y + r * e._z; if (a < 0 ? (this._w = -e._w, this._x = -e._x, this._y = -e._y, this._z = -e._z, a = -a) : this.copy(e), a >= 1) return this._w = o, this._x = n, this._y = i, this._z = r, this; let l = 1 - a * a; if (l <= Number.EPSILON) { let d = 1 - t; return this._w = d * o + t * this._w, this._x = d * n + t * this._x, this._y = d * i + t * this._y, this._z = d * r + t * this._z, this.normalize(), this._onChangeCallback(), this } let c = Math.sqrt(l), u = Math.atan2(c, a), h = Math.sin((1 - t) * u) / c, f = Math.sin(t * u) / c; return this._w = o * h + this._w * f, this._x = n * h + this._x * f, this._y = i * h + this._y * f, this._z = r * h + this._z * f, this._onChangeCallback(), this } slerpQuaternions(e, t, n) { this.copy(e).slerp(t, n) } equals(e) { return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w } fromArray(e, t = 0) { return this._x = e[t], this._y = e[t + 1], this._z = e[t + 2], this._w = e[t + 3], this._onChangeCallback(), this } toArray(e = [], t = 0) { return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._w, e } fromBufferAttribute(e, t) { return this._x = e.getX(t), this._y = e.getY(t), this._z = e.getZ(t), this._w = e.getW(t), this } _onChange(e) { return this._onChangeCallback = e, this } _onChangeCallback() { } }; vt.prototype.isQuaternion = !0; var A = class { constructor(e = 0, t = 0, n = 0) { this.x = e, this.y = t, this.z = n } set(e, t, n) { return n === void 0 && (n = this.z), this.x = e, this.y = t, this.z = n, this } setScalar(e) { return this.x = e, this.y = e, this.z = e, this } setX(e) { return this.x = e, this } setY(e) { return this.y = e, this } setZ(e) { return this.z = e, this } setComponent(e, t) { switch (e) { case 0: this.x = t; break; case 1: this.y = t; break; case 2: this.z = t; break; default: throw new Error("index is out of range: " + e) }return this } getComponent(e) { switch (e) { case 0: return this.x; case 1: return this.y; case 2: return this.z; default: throw new Error("index is out of range: " + e) } } clone() { return new this.constructor(this.x, this.y, this.z) } copy(e) { return this.x = e.x, this.y = e.y, this.z = e.z, this } add(e, t) { return t !== void 0 ? (console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."), this.addVectors(e, t)) : (this.x += e.x, this.y += e.y, this.z += e.z, this) } addScalar(e) { return this.x += e, this.y += e, this.z += e, this } addVectors(e, t) { return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this } addScaledVector(e, t) { return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this } sub(e, t) { return t !== void 0 ? (console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."), this.subVectors(e, t)) : (this.x -= e.x, this.y -= e.y, this.z -= e.z, this) } subScalar(e) { return this.x -= e, this.y -= e, this.z -= e, this } subVectors(e, t) { return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this } multiply(e, t) { return t !== void 0 ? (console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."), this.multiplyVectors(e, t)) : (this.x *= e.x, this.y *= e.y, this.z *= e.z, this) } multiplyScalar(e) { return this.x *= e, this.y *= e, this.z *= e, this } multiplyVectors(e, t) { return this.x = e.x * t.x, this.y = e.y * t.y, this.z = e.z * t.z, this } applyEuler(e) { return e && e.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."), this.applyQuaternion(du.setFromEuler(e)) } applyAxisAngle(e, t) { return this.applyQuaternion(du.setFromAxisAngle(e, t)) } applyMatrix3(e) { let t = this.x, n = this.y, i = this.z, r = e.elements; return this.x = r[0] * t + r[3] * n + r[6] * i, this.y = r[1] * t + r[4] * n + r[7] * i, this.z = r[2] * t + r[5] * n + r[8] * i, this } applyNormalMatrix(e) { return this.applyMatrix3(e).normalize() } applyMatrix4(e) { let t = this.x, n = this.y, i = this.z, r = e.elements, o = 1 / (r[3] * t + r[7] * n + r[11] * i + r[15]); return this.x = (r[0] * t + r[4] * n + r[8] * i + r[12]) * o, this.y = (r[1] * t + r[5] * n + r[9] * i + r[13]) * o, this.z = (r[2] * t + r[6] * n + r[10] * i + r[14]) * o, this } applyQuaternion(e) { let t = this.x, n = this.y, i = this.z, r = e.x, o = e.y, a = e.z, l = e.w, c = l * t + o * i - a * n, u = l * n + a * t - r * i, h = l * i + r * n - o * t, f = -r * t - o * n - a * i; return this.x = c * l + f * -r + u * -a - h * -o, this.y = u * l + f * -o + h * -r - c * -a, this.z = h * l + f * -a + c * -o - u * -r, this } project(e) { return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix) } unproject(e) { return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld) } transformDirection(e) { let t = this.x, n = this.y, i = this.z, r = e.elements; return this.x = r[0] * t + r[4] * n + r[8] * i, this.y = r[1] * t + r[5] * n + r[9] * i, this.z = r[2] * t + r[6] * n + r[10] * i, this.normalize() } divide(e) { return this.x /= e.x, this.y /= e.y, this.z /= e.z, this } divideScalar(e) { return this.multiplyScalar(1 / e) } min(e) { return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this } max(e) { return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this } clamp(e, t) { return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this } clampScalar(e, t) { return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this } clampLength(e, t) { let n = this.length(); return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n))) } floor() { return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this } ceil() { return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this } round() { return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this } roundToZero() { return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this } negate() { return this.x = -this.x, this.y = -this.y, this.z = -this.z, this } dot(e) { return this.x * e.x + this.y * e.y + this.z * e.z } lengthSq() { return this.x * this.x + this.y * this.y + this.z * this.z } length() { return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z) } manhattanLength() { return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) } normalize() { return this.divideScalar(this.length() || 1) } setLength(e) { return this.normalize().multiplyScalar(e) } lerp(e, t) { return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this } lerpVectors(e, t, n) { return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this } cross(e, t) { return t !== void 0 ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."), this.crossVectors(e, t)) : this.crossVectors(this, e) } crossVectors(e, t) { let n = e.x, i = e.y, r = e.z, o = t.x, a = t.y, l = t.z; return this.x = i * l - r * a, this.y = r * o - n * l, this.z = n * a - i * o, this } projectOnVector(e) { let t = e.lengthSq(); if (t === 0) return this.set(0, 0, 0); let n = e.dot(this) / t; return this.copy(e).multiplyScalar(n) } projectOnPlane(e) { return ba.copy(this).projectOnVector(e), this.sub(ba) } reflect(e) { return this.sub(ba.copy(e).multiplyScalar(2 * this.dot(e))) } angleTo(e) { let t = Math.sqrt(this.lengthSq() * e.lengthSq()); if (t === 0) return Math.PI / 2; let n = this.dot(e) / t; return Math.acos(Tt(n, -1, 1)) } distanceTo(e) { return Math.sqrt(this.distanceToSquared(e)) } distanceToSquared(e) { let t = this.x - e.x, n = this.y - e.y, i = this.z - e.z; return t * t + n * n + i * i } manhattanDistanceTo(e) { return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z) } setFromSpherical(e) { return this.setFromSphericalCoords(e.radius, e.phi, e.theta) } setFromSphericalCoords(e, t, n) { let i = Math.sin(t) * e; return this.x = i * Math.sin(n), this.y = Math.cos(t) * e, this.z = i * Math.cos(n), this } setFromCylindrical(e) { return this.setFromCylindricalCoords(e.radius, e.theta, e.y) } setFromCylindricalCoords(e, t, n) { return this.x = e * Math.sin(t), this.y = n, this.z = e * Math.cos(t), this } setFromMatrixPosition(e) { let t = e.elements; return this.x = t[12], this.y = t[13], this.z = t[14], this } setFromMatrixScale(e) { let t = this.setFromMatrixColumn(e, 0).length(), n = this.setFromMatrixColumn(e, 1).length(), i = this.setFromMatrixColumn(e, 2).length(); return this.x = t, this.y = n, this.z = i, this } setFromMatrixColumn(e, t) { return this.fromArray(e.elements, t * 4) } setFromMatrix3Column(e, t) { return this.fromArray(e.elements, t * 3) } equals(e) { return e.x === this.x && e.y === this.y && e.z === this.z } fromArray(e, t = 0) { return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this } toArray(e = [], t = 0) { return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e } fromBufferAttribute(e, t, n) { return n !== void 0 && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."), this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this } random() { return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this } }; A.prototype.isVector3 = !0; var ba = new A, du = new vt, kt = class { constructor(e = new A(1 / 0, 1 / 0, 1 / 0), t = new A(-1 / 0, -1 / 0, -1 / 0)) { this.min = e, this.max = t } set(e, t) { return this.min.copy(e), this.max.copy(t), this } setFromArray(e) { let t = 1 / 0, n = 1 / 0, i = 1 / 0, r = -1 / 0, o = -1 / 0, a = -1 / 0; for (let l = 0, c = e.length; l < c; l += 3) { let u = e[l], h = e[l + 1], f = e[l + 2]; u < t && (t = u), h < n && (n = h), f < i && (i = f), u > r && (r = u), h > o && (o = h), f > a && (a = f) } return this.min.set(t, n, i), this.max.set(r, o, a), this } setFromBufferAttribute(e) { let t = 1 / 0, n = 1 / 0, i = 1 / 0, r = -1 / 0, o = -1 / 0, a = -1 / 0; for (let l = 0, c = e.count; l < c; l++) { let u = e.getX(l), h = e.getY(l), f = e.getZ(l); u < t && (t = u), h < n && (n = h), f < i && (i = f), u > r && (r = u), h > o && (o = h), f > a && (a = f) } return this.min.set(t, n, i), this.max.set(r, o, a), this } setFromPoints(e) { this.makeEmpty(); for (let t = 0, n = e.length; t < n; t++)this.expandByPoint(e[t]); return this } setFromCenterAndSize(e, t) { let n = Gr.copy(t).multiplyScalar(.5); return this.min.copy(e).sub(n), this.max.copy(e).add(n), this } setFromObject(e) { return this.makeEmpty(), this.expandByObject(e) } clone() { return new this.constructor().copy(this) } copy(e) { return this.min.copy(e.min), this.max.copy(e.max), this } makeEmpty() { return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this } isEmpty() { return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z } getCenter(e) { return this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(.5) } getSize(e) { return this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min) } expandByPoint(e) { return this.min.min(e), this.max.max(e), this } expandByVector(e) { return this.min.sub(e), this.max.add(e), this } expandByScalar(e) { return this.min.addScalar(-e), this.max.addScalar(e), this } expandByObject(e) { e.updateWorldMatrix(!1, !1); let t = e.geometry; t !== void 0 && (t.boundingBox === null && t.computeBoundingBox(), Ma.copy(t.boundingBox), Ma.applyMatrix4(e.matrixWorld), this.union(Ma)); let n = e.children; for (let i = 0, r = n.length; i < r; i++)this.expandByObject(n[i]); return this } containsPoint(e) { return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y || e.z < this.min.z || e.z > this.max.z) } containsBox(e) { return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z } getParameter(e, t) { return t.set((e.x - this.min.x) / (this.max.x - this.min.x), (e.y - this.min.y) / (this.max.y - this.min.y), (e.z - this.min.z) / (this.max.z - this.min.z)) } intersectsBox(e) { return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y || e.max.z < this.min.z || e.min.z > this.max.z) } intersectsSphere(e) { return this.clampPoint(e.center, Gr), Gr.distanceToSquared(e.center) <= e.radius * e.radius } intersectsPlane(e) { let t, n; return e.normal.x > 0 ? (t = e.normal.x * this.min.x, n = e.normal.x * this.max.x) : (t = e.normal.x * this.max.x, n = e.normal.x * this.min.x), e.normal.y > 0 ? (t += e.normal.y * this.min.y, n += e.normal.y * this.max.y) : (t += e.normal.y * this.max.y, n += e.normal.y * this.min.y), e.normal.z > 0 ? (t += e.normal.z * this.min.z, n += e.normal.z * this.max.z) : (t += e.normal.z * this.max.z, n += e.normal.z * this.min.z), t <= -e.constant && n >= -e.constant } intersectsTriangle(e) { if (this.isEmpty()) return !1; this.getCenter(Vr), ks.subVectors(this.max, Vr), qi.subVectors(e.a, Vr), Xi.subVectors(e.b, Vr), Yi.subVectors(e.c, Vr), Hn.subVectors(Xi, qi), Gn.subVectors(Yi, Xi), yi.subVectors(qi, Yi); let t = [0, -Hn.z, Hn.y, 0, -Gn.z, Gn.y, 0, -yi.z, yi.y, Hn.z, 0, -Hn.x, Gn.z, 0, -Gn.x, yi.z, 0, -yi.x, -Hn.y, Hn.x, 0, -Gn.y, Gn.x, 0, -yi.y, yi.x, 0]; return !Sa(t, qi, Xi, Yi, ks) || (t = [1, 0, 0, 0, 1, 0, 0, 0, 1], !Sa(t, qi, Xi, Yi, ks)) ? !1 : (Hs.crossVectors(Hn, Gn), t = [Hs.x, Hs.y, Hs.z], Sa(t, qi, Xi, Yi, ks)) } clampPoint(e, t) { return t.copy(e).clamp(this.min, this.max) } distanceToPoint(e) { return Gr.copy(e).clamp(this.min, this.max).sub(e).length() } getBoundingSphere(e) { return this.getCenter(e.center), e.radius = this.getSize(Gr).length() * .5, e } intersect(e) { return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this } union(e) { return this.min.min(e.min), this.max.max(e.max), this } applyMatrix4(e) { return this.isEmpty() ? this : (yn[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e), yn[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e), yn[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e), yn[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e), yn[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e), yn[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e), yn[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e), yn[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e), this.setFromPoints(yn), this) } translate(e) { return this.min.add(e), this.max.add(e), this } equals(e) { return e.min.equals(this.min) && e.max.equals(this.max) } }; kt.prototype.isBox3 = !0; var yn = [new A, new A, new A, new A, new A, new A, new A, new A], Gr = new A, Ma = new kt, qi = new A, Xi = new A, Yi = new A, Hn = new A, Gn = new A, yi = new A, Vr = new A, ks = new A, Hs = new A, vi = new A; function Sa(s, e, t, n, i) { for (let r = 0, o = s.length - 3; r <= o; r += 3) { vi.fromArray(s, r); let a = i.x * Math.abs(vi.x) + i.y * Math.abs(vi.y) + i.z * Math.abs(vi.z), l = e.dot(vi), c = t.dot(vi), u = n.dot(vi); if (Math.max(-Math.max(l, c, u), Math.min(l, c, u)) > a) return !1 } return !0 } var Nm = new kt, pu = new A, Ta = new A, Ea = new A, wi = class { constructor(e = new A, t = -1) { this.center = e, this.radius = t } set(e, t) { return this.center.copy(e), this.radius = t, this } setFromPoints(e, t) { let n = this.center; t !== void 0 ? n.copy(t) : Nm.setFromPoints(e).getCenter(n); let i = 0; for (let r = 0, o = e.length; r < o; r++)i = Math.max(i, n.distanceToSquared(e[r])); return this.radius = Math.sqrt(i), this } copy(e) { return this.center.copy(e.center), this.radius = e.radius, this } isEmpty() { return this.radius < 0 } makeEmpty() { return this.center.set(0, 0, 0), this.radius = -1, this } containsPoint(e) { return e.distanceToSquared(this.center) <= this.radius * this.radius } distanceToPoint(e) { return e.distanceTo(this.center) - this.radius } intersectsSphere(e) { let t = this.radius + e.radius; return e.center.distanceToSquared(this.center) <= t * t } intersectsBox(e) { return e.intersectsSphere(this) } intersectsPlane(e) { return Math.abs(e.distanceToPoint(this.center)) <= this.radius } clampPoint(e, t) { let n = this.center.distanceToSquared(e); return t.copy(e), n > this.radius * this.radius && (t.sub(this.center).normalize(), t.multiplyScalar(this.radius).add(this.center)), t } getBoundingBox(e) { return this.isEmpty() ? (e.makeEmpty(), e) : (e.set(this.center, this.center), e.expandByScalar(this.radius), e) } applyMatrix4(e) { return this.center.applyMatrix4(e), this.radius = this.radius * e.getMaxScaleOnAxis(), this } translate(e) { return this.center.add(e), this } expandByPoint(e) { Ea.subVectors(e, this.center); let t = Ea.lengthSq(); if (t > this.radius * this.radius) { let n = Math.sqrt(t), i = (n - this.radius) * .5; this.center.add(Ea.multiplyScalar(i / n)), this.radius += i } return this } union(e) { return Ta.subVectors(e.center, this.center).normalize().multiplyScalar(e.radius), this.expandByPoint(pu.copy(e.center).add(Ta)), this.expandByPoint(pu.copy(e.center).sub(Ta)), this } equals(e) { return e.center.equals(this.center) && e.radius === this.radius } clone() { return new this.constructor().copy(this) } }, vn = new A, Aa = new A, Gs = new A, Vn = new A, La = new A, Vs = new A, Ca = new A, Wn = class { constructor(e = new A, t = new A(0, 0, -1)) { this.origin = e, this.direction = t } set(e, t) { return this.origin.copy(e), this.direction.copy(t), this } copy(e) { return this.origin.copy(e.origin), this.direction.copy(e.direction), this } at(e, t) { return t.copy(this.direction).multiplyScalar(e).add(this.origin) } lookAt(e) { return this.direction.copy(e).sub(this.origin).normalize(), this } recast(e) { return this.origin.copy(this.at(e, vn)), this } closestPointToPoint(e, t) { t.subVectors(e, this.origin); let n = t.dot(this.direction); return n < 0 ? t.copy(this.origin) : t.copy(this.direction).multiplyScalar(n).add(this.origin) } distanceToPoint(e) { return Math.sqrt(this.distanceSqToPoint(e)) } distanceSqToPoint(e) { let t = vn.subVectors(e, this.origin).dot(this.direction); return t < 0 ? this.origin.distanceToSquared(e) : (vn.copy(this.direction).multiplyScalar(t).add(this.origin), vn.distanceToSquared(e)) } distanceSqToSegment(e, t, n, i) { Aa.copy(e).add(t).multiplyScalar(.5), Gs.copy(t).sub(e).normalize(), Vn.copy(this.origin).sub(Aa); let r = e.distanceTo(t) * .5, o = -this.direction.dot(Gs), a = Vn.dot(this.direction), l = -Vn.dot(Gs), c = Vn.lengthSq(), u = Math.abs(1 - o * o), h, f, d, g; if (u > 0) if (h = o * l - a, f = o * a - l, g = r * u, h >= 0) if (f >= -g) if (f <= g) { let m = 1 / u; h *= m, f *= m, d = h * (h + o * f + 2 * a) + f * (o * h + f + 2 * l) + c } else f = r, h = Math.max(0, -(o * f + a)), d = -h * h + f * (f + 2 * l) + c; else f = -r, h = Math.max(0, -(o * f + a)), d = -h * h + f * (f + 2 * l) + c; else f <= -g ? (h = Math.max(0, -(-o * r + a)), f = h > 0 ? -r : Math.min(Math.max(-r, -l), r), d = -h * h + f * (f + 2 * l) + c) : f <= g ? (h = 0, f = Math.min(Math.max(-r, -l), r), d = f * (f + 2 * l) + c) : (h = Math.max(0, -(o * r + a)), f = h > 0 ? r : Math.min(Math.max(-r, -l), r), d = -h * h + f * (f + 2 * l) + c); else f = o > 0 ? -r : r, h = Math.max(0, -(o * f + a)), d = -h * h + f * (f + 2 * l) + c; return n && n.copy(this.direction).multiplyScalar(h).add(this.origin), i && i.copy(Gs).multiplyScalar(f).add(Aa), d } intersectSphere(e, t) { vn.subVectors(e.center, this.origin); let n = vn.dot(this.direction), i = vn.dot(vn) - n * n, r = e.radius * e.radius; if (i > r) return null; let o = Math.sqrt(r - i), a = n - o, l = n + o; return a < 0 && l < 0 ? null : a < 0 ? this.at(l, t) : this.at(a, t) } intersectsSphere(e) { return this.distanceSqToPoint(e.center) <= e.radius * e.radius } distanceToPlane(e) { let t = e.normal.dot(this.direction); if (t === 0) return e.distanceToPoint(this.origin) === 0 ? 0 : null; let n = -(this.origin.dot(e.normal) + e.constant) / t; return n >= 0 ? n : null } intersectPlane(e, t) { let n = this.distanceToPlane(e); return n === null ? null : this.at(n, t) } intersectsPlane(e) { let t = e.distanceToPoint(this.origin); return t === 0 || e.normal.dot(this.direction) * t < 0 } intersectBox(e, t) { let n, i, r, o, a, l, c = 1 / this.direction.x, u = 1 / this.direction.y, h = 1 / this.direction.z, f = this.origin; return c >= 0 ? (n = (e.min.x - f.x) * c, i = (e.max.x - f.x) * c) : (n = (e.max.x - f.x) * c, i = (e.min.x - f.x) * c), u >= 0 ? (r = (e.min.y - f.y) * u, o = (e.max.y - f.y) * u) : (r = (e.max.y - f.y) * u, o = (e.min.y - f.y) * u), n > o || r > i || ((r > n || n !== n) && (n = r), (o < i || i !== i) && (i = o), h >= 0 ? (a = (e.min.z - f.z) * h, l = (e.max.z - f.z) * h) : (a = (e.max.z - f.z) * h, l = (e.min.z - f.z) * h), n > l || a > i) || ((a > n || n !== n) && (n = a), (l < i || i !== i) && (i = l), i < 0) ? null : this.at(n >= 0 ? n : i, t) } intersectsBox(e) { return this.intersectBox(e, vn) !== null } intersectTriangle(e, t, n, i, r) { La.subVectors(t, e), Vs.subVectors(n, e), Ca.crossVectors(La, Vs); let o = this.direction.dot(Ca), a; if (o > 0) { if (i) return null; a = 1 } else if (o < 0) a = -1, o = -o; else return null; Vn.subVectors(this.origin, e); let l = a * this.direction.dot(Vs.crossVectors(Vn, Vs)); if (l < 0) return null; let c = a * this.direction.dot(La.cross(Vn)); if (c < 0 || l + c > o) return null; let u = -a * Vn.dot(Ca); return u < 0 ? null : this.at(u / o, r) } applyMatrix4(e) { return this.origin.applyMatrix4(e), this.direction.transformDirection(e), this } equals(e) { return e.origin.equals(this.origin) && e.direction.equals(this.direction) } clone() { return new this.constructor().copy(this) } }, xe = class { constructor() { this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], arguments.length > 0 && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.") } set(e, t, n, i, r, o, a, l, c, u, h, f, d, g, m, x) { let p = this.elements; return p[0] = e, p[4] = t, p[8] = n, p[12] = i, p[1] = r, p[5] = o, p[9] = a, p[13] = l, p[2] = c, p[6] = u, p[10] = h, p[14] = f, p[3] = d, p[7] = g, p[11] = m, p[15] = x, this } identity() { return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this } clone() { return new xe().fromArray(this.elements) } copy(e) { let t = this.elements, n = e.elements; return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], t[9] = n[9], t[10] = n[10], t[11] = n[11], t[12] = n[12], t[13] = n[13], t[14] = n[14], t[15] = n[15], this } copyPosition(e) { let t = this.elements, n = e.elements; return t[12] = n[12], t[13] = n[13], t[14] = n[14], this } setFromMatrix3(e) { let t = e.elements; return this.set(t[0], t[3], t[6], 0, t[1], t[4], t[7], 0, t[2], t[5], t[8], 0, 0, 0, 0, 1), this } extractBasis(e, t, n) { return e.setFromMatrixColumn(this, 0), t.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this } makeBasis(e, t, n) { return this.set(e.x, t.x, n.x, 0, e.y, t.y, n.y, 0, e.z, t.z, n.z, 0, 0, 0, 0, 1), this } extractRotation(e) { let t = this.elements, n = e.elements, i = 1 / Zi.setFromMatrixColumn(e, 0).length(), r = 1 / Zi.setFromMatrixColumn(e, 1).length(), o = 1 / Zi.setFromMatrixColumn(e, 2).length(); return t[0] = n[0] * i, t[1] = n[1] * i, t[2] = n[2] * i, t[3] = 0, t[4] = n[4] * r, t[5] = n[5] * r, t[6] = n[6] * r, t[7] = 0, t[8] = n[8] * o, t[9] = n[9] * o, t[10] = n[10] * o, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this } makeRotationFromEuler(e) { e && e.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order."); let t = this.elements, n = e.x, i = e.y, r = e.z, o = Math.cos(n), a = Math.sin(n), l = Math.cos(i), c = Math.sin(i), u = Math.cos(r), h = Math.sin(r); if (e.order === "XYZ") { let f = o * u, d = o * h, g = a * u, m = a * h; t[0] = l * u, t[4] = -l * h, t[8] = c, t[1] = d + g * c, t[5] = f - m * c, t[9] = -a * l, t[2] = m - f * c, t[6] = g + d * c, t[10] = o * l } else if (e.order === "YXZ") { let f = l * u, d = l * h, g = c * u, m = c * h; t[0] = f + m * a, t[4] = g * a - d, t[8] = o * c, t[1] = o * h, t[5] = o * u, t[9] = -a, t[2] = d * a - g, t[6] = m + f * a, t[10] = o * l } else if (e.order === "ZXY") { let f = l * u, d = l * h, g = c * u, m = c * h; t[0] = f - m * a, t[4] = -o * h, t[8] = g + d * a, t[1] = d + g * a, t[5] = o * u, t[9] = m - f * a, t[2] = -o * c, t[6] = a, t[10] = o * l } else if (e.order === "ZYX") { let f = o * u, d = o * h, g = a * u, m = a * h; t[0] = l * u, t[4] = g * c - d, t[8] = f * c + m, t[1] = l * h, t[5] = m * c + f, t[9] = d * c - g, t[2] = -c, t[6] = a * l, t[10] = o * l } else if (e.order === "YZX") { let f = o * l, d = o * c, g = a * l, m = a * c; t[0] = l * u, t[4] = m - f * h, t[8] = g * h + d, t[1] = h, t[5] = o * u, t[9] = -a * u, t[2] = -c * u, t[6] = d * h + g, t[10] = f - m * h } else if (e.order === "XZY") { let f = o * l, d = o * c, g = a * l, m = a * c; t[0] = l * u, t[4] = -h, t[8] = c * u, t[1] = f * h + m, t[5] = o * u, t[9] = d * h - g, t[2] = g * h - d, t[6] = a * u, t[10] = m * h + f } return t[3] = 0, t[7] = 0, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this } makeRotationFromQuaternion(e) { return this.compose(zm, e, Om) } lookAt(e, t, n) { let i = this.elements; return Dt.subVectors(e, t), Dt.lengthSq() === 0 && (Dt.z = 1), Dt.normalize(), qn.crossVectors(n, Dt), qn.lengthSq() === 0 && (Math.abs(n.z) === 1 ? Dt.x += 1e-4 : Dt.z += 1e-4, Dt.normalize(), qn.crossVectors(n, Dt)), qn.normalize(), Ws.crossVectors(Dt, qn), i[0] = qn.x, i[4] = Ws.x, i[8] = Dt.x, i[1] = qn.y, i[5] = Ws.y, i[9] = Dt.y, i[2] = qn.z, i[6] = Ws.z, i[10] = Dt.z, this } multiply(e, t) { return t !== void 0 ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."), this.multiplyMatrices(e, t)) : this.multiplyMatrices(this, e) } premultiply(e) { return this.multiplyMatrices(e, this) } multiplyMatrices(e, t) { let n = e.elements, i = t.elements, r = this.elements, o = n[0], a = n[4], l = n[8], c = n[12], u = n[1], h = n[5], f = n[9], d = n[13], g = n[2], m = n[6], x = n[10], p = n[14], _ = n[3], w = n[7], v = n[11], b = n[15], T = i[0], y = i[4], C = i[8], R = i[12], D = i[1], L = i[5], $ = i[9], z = i[13], F = i[2], U = i[6], N = i[10], k = i[14], Q = i[3], oe = i[7], ue = i[11], ee = i[15]; return r[0] = o * T + a * D + l * F + c * Q, r[4] = o * y + a * L + l * U + c * oe, r[8] = o * C + a * $ + l * N + c * ue, r[12] = o * R + a * z + l * k + c * ee, r[1] = u * T + h * D + f * F + d * Q, r[5] = u * y + h * L + f * U + d * oe, r[9] = u * C + h * $ + f * N + d * ue, r[13] = u * R + h * z + f * k + d * ee, r[2] = g * T + m * D + x * F + p * Q, r[6] = g * y + m * L + x * U + p * oe, r[10] = g * C + m * $ + x * N + p * ue, r[14] = g * R + m * z + x * k + p * ee, r[3] = _ * T + w * D + v * F + b * Q, r[7] = _ * y + w * L + v * U + b * oe, r[11] = _ * C + w * $ + v * N + b * ue, r[15] = _ * R + w * z + v * k + b * ee, this } multiplyScalar(e) { let t = this.elements; return t[0] *= e, t[4] *= e, t[8] *= e, t[12] *= e, t[1] *= e, t[5] *= e, t[9] *= e, t[13] *= e, t[2] *= e, t[6] *= e, t[10] *= e, t[14] *= e, t[3] *= e, t[7] *= e, t[11] *= e, t[15] *= e, this } determinant() { let e = this.elements, t = e[0], n = e[4], i = e[8], r = e[12], o = e[1], a = e[5], l = e[9], c = e[13], u = e[2], h = e[6], f = e[10], d = e[14], g = e[3], m = e[7], x = e[11], p = e[15]; return g * (+r * l * h - i * c * h - r * a * f + n * c * f + i * a * d - n * l * d) + m * (+t * l * d - t * c * f + r * o * f - i * o * d + i * c * u - r * l * u) + x * (+t * c * h - t * a * d - r * o * h + n * o * d + r * a * u - n * c * u) + p * (-i * a * u - t * l * h + t * a * f + i * o * h - n * o * f + n * l * u) } transpose() { let e = this.elements, t; return t = e[1], e[1] = e[4], e[4] = t, t = e[2], e[2] = e[8], e[8] = t, t = e[6], e[6] = e[9], e[9] = t, t = e[3], e[3] = e[12], e[12] = t, t = e[7], e[7] = e[13], e[13] = t, t = e[11], e[11] = e[14], e[14] = t, this } setPosition(e, t, n) { let i = this.elements; return e.isVector3 ? (i[12] = e.x, i[13] = e.y, i[14] = e.z) : (i[12] = e, i[13] = t, i[14] = n), this } invert() { let e = this.elements, t = e[0], n = e[1], i = e[2], r = e[3], o = e[4], a = e[5], l = e[6], c = e[7], u = e[8], h = e[9], f = e[10], d = e[11], g = e[12], m = e[13], x = e[14], p = e[15], _ = h * x * c - m * f * c + m * l * d - a * x * d - h * l * p + a * f * p, w = g * f * c - u * x * c - g * l * d + o * x * d + u * l * p - o * f * p, v = u * m * c - g * h * c + g * a * d - o * m * d - u * a * p + o * h * p, b = g * h * l - u * m * l - g * a * f + o * m * f + u * a * x - o * h * x, T = t * _ + n * w + i * v + r * b; if (T === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); let y = 1 / T; return e[0] = _ * y, e[1] = (m * f * r - h * x * r - m * i * d + n * x * d + h * i * p - n * f * p) * y, e[2] = (a * x * r - m * l * r + m * i * c - n * x * c - a * i * p + n * l * p) * y, e[3] = (h * l * r - a * f * r - h * i * c + n * f * c + a * i * d - n * l * d) * y, e[4] = w * y, e[5] = (u * x * r - g * f * r + g * i * d - t * x * d - u * i * p + t * f * p) * y, e[6] = (g * l * r - o * x * r - g * i * c + t * x * c + o * i * p - t * l * p) * y, e[7] = (o * f * r - u * l * r + u * i * c - t * f * c - o * i * d + t * l * d) * y, e[8] = v * y, e[9] = (g * h * r - u * m * r - g * n * d + t * m * d + u * n * p - t * h * p) * y, e[10] = (o * m * r - g * a * r + g * n * c - t * m * c - o * n * p + t * a * p) * y, e[11] = (u * a * r - o * h * r - u * n * c + t * h * c + o * n * d - t * a * d) * y, e[12] = b * y, e[13] = (u * m * i - g * h * i + g * n * f - t * m * f - u * n * x + t * h * x) * y, e[14] = (g * a * i - o * m * i - g * n * l + t * m * l + o * n * x - t * a * x) * y, e[15] = (o * h * i - u * a * i + u * n * l - t * h * l - o * n * f + t * a * f) * y, this } scale(e) { let t = this.elements, n = e.x, i = e.y, r = e.z; return t[0] *= n, t[4] *= i, t[8] *= r, t[1] *= n, t[5] *= i, t[9] *= r, t[2] *= n, t[6] *= i, t[10] *= r, t[3] *= n, t[7] *= i, t[11] *= r, this } getMaxScaleOnAxis() { let e = this.elements, t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2], n = e[4] * e[4] + e[5] * e[5] + e[6] * e[6], i = e[8] * e[8] + e[9] * e[9] + e[10] * e[10]; return Math.sqrt(Math.max(t, n, i)) } makeTranslation(e, t, n) { return this.set(1, 0, 0, e, 0, 1, 0, t, 0, 0, 1, n, 0, 0, 0, 1), this } makeRotationX(e) { let t = Math.cos(e), n = Math.sin(e); return this.set(1, 0, 0, 0, 0, t, -n, 0, 0, n, t, 0, 0, 0, 0, 1), this } makeRotationY(e) { let t = Math.cos(e), n = Math.sin(e); return this.set(t, 0, n, 0, 0, 1, 0, 0, -n, 0, t, 0, 0, 0, 0, 1), this } makeRotationZ(e) { let t = Math.cos(e), n = Math.sin(e); return this.set(t, -n, 0, 0, n, t, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this } makeRotationAxis(e, t) { let n = Math.cos(t), i = Math.sin(t), r = 1 - n, o = e.x, a = e.y, l = e.z, c = r * o, u = r * a; return this.set(c * o + n, c * a - i * l, c * l + i * a, 0, c * a + i * l, u * a + n, u * l - i * o, 0, c * l - i * a, u * l + i * o, r * l * l + n, 0, 0, 0, 0, 1), this } makeScale(e, t, n) { return this.set(e, 0, 0, 0, 0, t, 0, 0, 0, 0, n, 0, 0, 0, 0, 1), this } makeShear(e, t, n, i, r, o) { return this.set(1, n, r, 0, e, 1, o, 0, t, i, 1, 0, 0, 0, 0, 1), this } compose(e, t, n) { let i = this.elements, r = t._x, o = t._y, a = t._z, l = t._w, c = r + r, u = o + o, h = a + a, f = r * c, d = r * u, g = r * h, m = o * u, x = o * h, p = a * h, _ = l * c, w = l * u, v = l * h, b = n.x, T = n.y, y = n.z; return i[0] = (1 - (m + p)) * b, i[1] = (d + v) * b, i[2] = (g - w) * b, i[3] = 0, i[4] = (d - v) * T, i[5] = (1 - (f + p)) * T, i[6] = (x + _) * T, i[7] = 0, i[8] = (g + w) * y, i[9] = (x - _) * y, i[10] = (1 - (f + m)) * y, i[11] = 0, i[12] = e.x, i[13] = e.y, i[14] = e.z, i[15] = 1, this } decompose(e, t, n) { let i = this.elements, r = Zi.set(i[0], i[1], i[2]).length(), o = Zi.set(i[4], i[5], i[6]).length(), a = Zi.set(i[8], i[9], i[10]).length(); this.determinant() < 0 && (r = -r), e.x = i[12], e.y = i[13], e.z = i[14], Qt.copy(this); let c = 1 / r, u = 1 / o, h = 1 / a; return Qt.elements[0] *= c, Qt.elements[1] *= c, Qt.elements[2] *= c, Qt.elements[4] *= u, Qt.elements[5] *= u, Qt.elements[6] *= u, Qt.elements[8] *= h, Qt.elements[9] *= h, Qt.elements[10] *= h, t.setFromRotationMatrix(Qt), n.x = r, n.y = o, n.z = a, this } makePerspective(e, t, n, i, r, o) { o === void 0 && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs."); let a = this.elements, l = 2 * r / (t - e), c = 2 * r / (n - i), u = (t + e) / (t - e), h = (n + i) / (n - i), f = -(o + r) / (o - r), d = -2 * o * r / (o - r); return a[0] = l, a[4] = 0, a[8] = u, a[12] = 0, a[1] = 0, a[5] = c, a[9] = h, a[13] = 0, a[2] = 0, a[6] = 0, a[10] = f, a[14] = d, a[3] = 0, a[7] = 0, a[11] = -1, a[15] = 0, this } makeOrthographic(e, t, n, i, r, o) { let a = this.elements, l = 1 / (t - e), c = 1 / (n - i), u = 1 / (o - r), h = (t + e) * l, f = (n + i) * c, d = (o + r) * u; return a[0] = 2 * l, a[4] = 0, a[8] = 0, a[12] = -h, a[1] = 0, a[5] = 2 * c, a[9] = 0, a[13] = -f, a[2] = 0, a[6] = 0, a[10] = -2 * u, a[14] = -d, a[3] = 0, a[7] = 0, a[11] = 0, a[15] = 1, this } equals(e) { let t = this.elements, n = e.elements; for (let i = 0; i < 16; i++)if (t[i] !== n[i]) return !1; return !0 } fromArray(e, t = 0) { for (let n = 0; n < 16; n++)this.elements[n] = e[n + t]; return this } toArray(e = [], t = 0) { let n = this.elements; return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e[t + 9] = n[9], e[t + 10] = n[10], e[t + 11] = n[11], e[t + 12] = n[12], e[t + 13] = n[13], e[t + 14] = n[14], e[t + 15] = n[15], e } }; xe.prototype.isMatrix4 = !0; var Zi = new A, Qt = new xe, zm = new A(0, 0, 0), Om = new A(1, 1, 1), qn = new A, Ws = new A, Dt = new A, mu = new xe, gu = new vt, wn = class { constructor(e = 0, t = 0, n = 0, i = wn.DefaultOrder) { this._x = e, this._y = t, this._z = n, this._order = i } get x() { return this._x } set x(e) { this._x = e, this._onChangeCallback() } get y() { return this._y } set y(e) { this._y = e, this._onChangeCallback() } get z() { return this._z } set z(e) { this._z = e, this._onChangeCallback() } get order() { return this._order } set order(e) { this._order = e, this._onChangeCallback() } set(e, t, n, i = this._order) { return this._x = e, this._y = t, this._z = n, this._order = i, this._onChangeCallback(), this } clone() { return new this.constructor(this._x, this._y, this._z, this._order) } copy(e) { return this._x = e._x, this._y = e._y, this._z = e._z, this._order = e._order, this._onChangeCallback(), this } setFromRotationMatrix(e, t = this._order, n = !0) { let i = e.elements, r = i[0], o = i[4], a = i[8], l = i[1], c = i[5], u = i[9], h = i[2], f = i[6], d = i[10]; switch (t) { case "XYZ": this._y = Math.asin(Tt(a, -1, 1)), Math.abs(a) < .9999999 ? (this._x = Math.atan2(-u, d), this._z = Math.atan2(-o, r)) : (this._x = Math.atan2(f, c), this._z = 0); break; case "YXZ": this._x = Math.asin(-Tt(u, -1, 1)), Math.abs(u) < .9999999 ? (this._y = Math.atan2(a, d), this._z = Math.atan2(l, c)) : (this._y = Math.atan2(-h, r), this._z = 0); break; case "ZXY": this._x = Math.asin(Tt(f, -1, 1)), Math.abs(f) < .9999999 ? (this._y = Math.atan2(-h, d), this._z = Math.atan2(-o, c)) : (this._y = 0, this._z = Math.atan2(l, r)); break; case "ZYX": this._y = Math.asin(-Tt(h, -1, 1)), Math.abs(h) < .9999999 ? (this._x = Math.atan2(f, d), this._z = Math.atan2(l, r)) : (this._x = 0, this._z = Math.atan2(-o, c)); break; case "YZX": this._z = Math.asin(Tt(l, -1, 1)), Math.abs(l) < .9999999 ? (this._x = Math.atan2(-u, c), this._y = Math.atan2(-h, r)) : (this._x = 0, this._y = Math.atan2(a, d)); break; case "XZY": this._z = Math.asin(-Tt(o, -1, 1)), Math.abs(o) < .9999999 ? (this._x = Math.atan2(f, c), this._y = Math.atan2(a, r)) : (this._x = Math.atan2(-u, d), this._y = 0); break; default: console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + t) }return this._order = t, n === !0 && this._onChangeCallback(), this } setFromQuaternion(e, t, n) { return mu.makeRotationFromQuaternion(e), this.setFromRotationMatrix(mu, t, n) } setFromVector3(e, t = this._order) { return this.set(e.x, e.y, e.z, t) } reorder(e) { return gu.setFromEuler(this), this.setFromQuaternion(gu, e) } equals(e) { return e._x === this._x && e._y === this._y && e._z === this._z && e._order === this._order } fromArray(e) { return this._x = e[0], this._y = e[1], this._z = e[2], e[3] !== void 0 && (this._order = e[3]), this._onChangeCallback(), this } toArray(e = [], t = 0) { return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._order, e } toVector3(e) { return e ? e.set(this._x, this._y, this._z) : new A(this._x, this._y, this._z) } _onChange(e) { return this._onChangeCallback = e, this } _onChangeCallback() { } }; wn.prototype.isEuler = !0; wn.DefaultOrder = "XYZ"; wn.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"]; var Pa = class { constructor() { this.mask = 1 | 0 } set(e) { this.mask = 1 << e | 0 } enable(e) { this.mask |= 1 << e | 0 } enableAll() { this.mask = 4294967295 | 0 } toggle(e) { this.mask ^= 1 << e | 0 } disable(e) { this.mask &= ~(1 << e | 0) } disableAll() { this.mask = 0 } test(e) { return (this.mask & e.mask) != 0 } }, Um = 0, _u = new A, Ji = new vt, bn = new xe, qs = new A, Wr = new A, km = new A, Hm = new vt, xu = new A(1, 0, 0), yu = new A(0, 1, 0), vu = new A(0, 0, 1), Gm = { type: "added" }, wu = { type: "removed" }, Ne = class extends kn { constructor() { super(); Object.defineProperty(this, "id", { value: Um++ }), this.uuid = jt(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = Ne.DefaultUp.clone(); let e = new A, t = new wn, n = new vt, i = new A(1, 1, 1); function r() { n.setFromEuler(t, !1) } function o() { t.setFromQuaternion(n, void 0, !1) } t._onChange(r), n._onChange(o), Object.defineProperties(this, { position: { configurable: !0, enumerable: !0, value: e }, rotation: { configurable: !0, enumerable: !0, value: t }, quaternion: { configurable: !0, enumerable: !0, value: n }, scale: { configurable: !0, enumerable: !0, value: i }, modelViewMatrix: { value: new xe }, normalMatrix: { value: new st } }), this.matrix = new xe, this.matrixWorld = new xe, this.matrixAutoUpdate = Ne.DefaultMatrixAutoUpdate, this.matrixWorldNeedsUpdate = !1, this.layers = new Pa, this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.animations = [], this.userData = {} } onBeforeRender() { } onAfterRender() { } applyMatrix4(e) { this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(e), this.matrix.decompose(this.position, this.quaternion, this.scale) } applyQuaternion(e) { return this.quaternion.premultiply(e), this } setRotationFromAxisAngle(e, t) { this.quaternion.setFromAxisAngle(e, t) } setRotationFromEuler(e) { this.quaternion.setFromEuler(e, !0) } setRotationFromMatrix(e) { this.quaternion.setFromRotationMatrix(e) } setRotationFromQuaternion(e) { this.quaternion.copy(e) } rotateOnAxis(e, t) { return Ji.setFromAxisAngle(e, t), this.quaternion.multiply(Ji), this } rotateOnWorldAxis(e, t) { return Ji.setFromAxisAngle(e, t), this.quaternion.premultiply(Ji), this } rotateX(e) { return this.rotateOnAxis(xu, e) } rotateY(e) { return this.rotateOnAxis(yu, e) } rotateZ(e) { return this.rotateOnAxis(vu, e) } translateOnAxis(e, t) { return _u.copy(e).applyQuaternion(this.quaternion), this.position.add(_u.multiplyScalar(t)), this } translateX(e) { return this.translateOnAxis(xu, e) } translateY(e) { return this.translateOnAxis(yu, e) } translateZ(e) { return this.translateOnAxis(vu, e) } localToWorld(e) { return e.applyMatrix4(this.matrixWorld) } worldToLocal(e) { return e.applyMatrix4(bn.copy(this.matrixWorld).invert()) } lookAt(e, t, n) { e.isVector3 ? qs.copy(e) : qs.set(e, t, n); let i = this.parent; this.updateWorldMatrix(!0, !1), Wr.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? bn.lookAt(Wr, qs, this.up) : bn.lookAt(qs, Wr, this.up), this.quaternion.setFromRotationMatrix(bn), i && (bn.extractRotation(i.matrixWorld), Ji.setFromRotationMatrix(bn), this.quaternion.premultiply(Ji.invert())) } add(e) { if (arguments.length > 1) { for (let t = 0; t < arguments.length; t++)this.add(arguments[t]); return this } return e === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e), this) : (e && e.isObject3D ? (e.parent !== null && e.parent.remove(e), e.parent = this, this.children.push(e), e.dispatchEvent(Gm)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e), this) } remove(e) { if (arguments.length > 1) { for (let n = 0; n < arguments.length; n++)this.remove(arguments[n]); return this } let t = this.children.indexOf(e); return t !== -1 && (e.parent = null, this.children.splice(t, 1), e.dispatchEvent(wu)), this } removeFromParent() { let e = this.parent; return e !== null && e.remove(this), this } clear() { for (let e = 0; e < this.children.length; e++) { let t = this.children[e]; t.parent = null, t.dispatchEvent(wu) } return this.children.length = 0, this } attach(e) { return this.updateWorldMatrix(!0, !1), bn.copy(this.matrixWorld).invert(), e.parent !== null && (e.parent.updateWorldMatrix(!0, !1), bn.multiply(e.parent.matrixWorld)), e.applyMatrix4(bn), this.add(e), e.updateWorldMatrix(!1, !0), this } getObjectById(e) { return this.getObjectByProperty("id", e) } getObjectByName(e) { return this.getObjectByProperty("name", e) } getObjectByProperty(e, t) { if (this[e] === t) return this; for (let n = 0, i = this.children.length; n < i; n++) { let o = this.children[n].getObjectByProperty(e, t); if (o !== void 0) return o } } getWorldPosition(e) { return this.updateWorldMatrix(!0, !1), e.setFromMatrixPosition(this.matrixWorld) } getWorldQuaternion(e) { return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(Wr, e, km), e } getWorldScale(e) { return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(Wr, Hm, e), e } getWorldDirection(e) { this.updateWorldMatrix(!0, !1); let t = this.matrixWorld.elements; return e.set(t[8], t[9], t[10]).normalize() } raycast() { } traverse(e) { e(this); let t = this.children; for (let n = 0, i = t.length; n < i; n++)t[n].traverse(e) } traverseVisible(e) { if (this.visible === !1) return; e(this); let t = this.children; for (let n = 0, i = t.length; n < i; n++)t[n].traverseVisible(e) } traverseAncestors(e) { let t = this.parent; t !== null && (e(t), t.traverseAncestors(e)) } updateMatrix() { this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0 } updateMatrixWorld(e) { this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || e) && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, e = !0); let t = this.children; for (let n = 0, i = t.length; n < i; n++)t[n].updateMatrixWorld(e) } updateWorldMatrix(e, t) { let n = this.parent; if (e === !0 && n !== null && n.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), t === !0) { let i = this.children; for (let r = 0, o = i.length; r < o; r++)i[r].updateWorldMatrix(!1, !0) } } toJSON(e) { let t = e === void 0 || typeof e == "string", n = {}; t && (e = { geometries: {}, materials: {}, textures: {}, images: {}, shapes: {}, skeletons: {}, animations: {} }, n.metadata = { version: 4.5, type: "Object", generator: "Object3D.toJSON" }); let i = {}; i.uuid = this.uuid, i.type = this.type, this.name !== "" && (i.name = this.name), this.castShadow === !0 && (i.castShadow = !0), this.receiveShadow === !0 && (i.receiveShadow = !0), this.visible === !1 && (i.visible = !1), this.frustumCulled === !1 && (i.frustumCulled = !1), this.renderOrder !== 0 && (i.renderOrder = this.renderOrder), JSON.stringify(this.userData) !== "{}" && (i.userData = this.userData), i.layers = this.layers.mask, i.matrix = this.matrix.toArray(), this.matrixAutoUpdate === !1 && (i.matrixAutoUpdate = !1), this.isInstancedMesh && (i.type = "InstancedMesh", i.count = this.count, i.instanceMatrix = this.instanceMatrix.toJSON(), this.instanceColor !== null && (i.instanceColor = this.instanceColor.toJSON())); function r(a, l) { return a[l.uuid] === void 0 && (a[l.uuid] = l.toJSON(e)), l.uuid } if (this.isScene) this.background && (this.background.isColor ? i.background = this.background.toJSON() : this.background.isTexture && (i.background = this.background.toJSON(e).uuid)), this.environment && this.environment.isTexture && (i.environment = this.environment.toJSON(e).uuid); else if (this.isMesh || this.isLine || this.isPoints) { i.geometry = r(e.geometries, this.geometry); let a = this.geometry.parameters; if (a !== void 0 && a.shapes !== void 0) { let l = a.shapes; if (Array.isArray(l)) for (let c = 0, u = l.length; c < u; c++) { let h = l[c]; r(e.shapes, h) } else r(e.shapes, l) } } if (this.isSkinnedMesh && (i.bindMode = this.bindMode, i.bindMatrix = this.bindMatrix.toArray(), this.skeleton !== void 0 && (r(e.skeletons, this.skeleton), i.skeleton = this.skeleton.uuid)), this.material !== void 0) if (Array.isArray(this.material)) { let a = []; for (let l = 0, c = this.material.length; l < c; l++)a.push(r(e.materials, this.material[l])); i.material = a } else i.material = r(e.materials, this.material); if (this.children.length > 0) { i.children = []; for (let a = 0; a < this.children.length; a++)i.children.push(this.children[a].toJSON(e).object) } if (this.animations.length > 0) { i.animations = []; for (let a = 0; a < this.animations.length; a++) { let l = this.animations[a]; i.animations.push(r(e.animations, l)) } } if (t) { let a = o(e.geometries), l = o(e.materials), c = o(e.textures), u = o(e.images), h = o(e.shapes), f = o(e.skeletons), d = o(e.animations); a.length > 0 && (n.geometries = a), l.length > 0 && (n.materials = l), c.length > 0 && (n.textures = c), u.length > 0 && (n.images = u), h.length > 0 && (n.shapes = h), f.length > 0 && (n.skeletons = f), d.length > 0 && (n.animations = d) } return n.object = i, n; function o(a) { let l = []; for (let c in a) { let u = a[c]; delete u.metadata, l.push(u) } return l } } clone(e) { return new this.constructor().copy(this, e) } copy(e, t = !0) { if (this.name = e.name, this.up.copy(e.up), this.position.copy(e.position), this.rotation.order = e.rotation.order, this.quaternion.copy(e.quaternion), this.scale.copy(e.scale), this.matrix.copy(e.matrix), this.matrixWorld.copy(e.matrixWorld), this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate, this.layers.mask = e.layers.mask, this.visible = e.visible, this.castShadow = e.castShadow, this.receiveShadow = e.receiveShadow, this.frustumCulled = e.frustumCulled, this.renderOrder = e.renderOrder, this.userData = JSON.parse(JSON.stringify(e.userData)), t === !0) for (let n = 0; n < e.children.length; n++) { let i = e.children[n]; this.add(i.clone()) } return this } }; Ne.DefaultUp = new A(0, 1, 0); Ne.DefaultMatrixAutoUpdate = !0; Ne.prototype.isObject3D = !0; var Kt = new A, Mn = new A, Ra = new A, Sn = new A, ji = new A, $i = new A, bu = new A, Ia = new A, Da = new A, Fa = new A, Je = class { constructor(e = new A, t = new A, n = new A) { this.a = e, this.b = t, this.c = n } static getNormal(e, t, n, i) { i.subVectors(n, t), Kt.subVectors(e, t), i.cross(Kt); let r = i.lengthSq(); return r > 0 ? i.multiplyScalar(1 / Math.sqrt(r)) : i.set(0, 0, 0) } static getBarycoord(e, t, n, i, r) { Kt.subVectors(i, t), Mn.subVectors(n, t), Ra.subVectors(e, t); let o = Kt.dot(Kt), a = Kt.dot(Mn), l = Kt.dot(Ra), c = Mn.dot(Mn), u = Mn.dot(Ra), h = o * c - a * a; if (h === 0) return r.set(-2, -1, -1); let f = 1 / h, d = (c * l - a * u) * f, g = (o * u - a * l) * f; return r.set(1 - d - g, g, d) } static containsPoint(e, t, n, i) { return this.getBarycoord(e, t, n, i, Sn), Sn.x >= 0 && Sn.y >= 0 && Sn.x + Sn.y <= 1 } static getUV(e, t, n, i, r, o, a, l) { return this.getBarycoord(e, t, n, i, Sn), l.set(0, 0), l.addScaledVector(r, Sn.x), l.addScaledVector(o, Sn.y), l.addScaledVector(a, Sn.z), l } static isFrontFacing(e, t, n, i) { return Kt.subVectors(n, t), Mn.subVectors(e, t), Kt.cross(Mn).dot(i) < 0 } set(e, t, n) { return this.a.copy(e), this.b.copy(t), this.c.copy(n), this } setFromPointsAndIndices(e, t, n, i) { return this.a.copy(e[t]), this.b.copy(e[n]), this.c.copy(e[i]), this } clone() { return new this.constructor().copy(this) } copy(e) { return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this } getArea() { return Kt.subVectors(this.c, this.b), Mn.subVectors(this.a, this.b), Kt.cross(Mn).length() * .5 } getMidpoint(e) { return e.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3) } getNormal(e) { return Je.getNormal(this.a, this.b, this.c, e) } getPlane(e) { return e.setFromCoplanarPoints(this.a, this.b, this.c) } getBarycoord(e, t) { return Je.getBarycoord(e, this.a, this.b, this.c, t) } getUV(e, t, n, i, r) { return Je.getUV(e, this.a, this.b, this.c, t, n, i, r) } containsPoint(e) { return Je.containsPoint(e, this.a, this.b, this.c) } isFrontFacing(e) { return Je.isFrontFacing(this.a, this.b, this.c, e) } intersectsBox(e) { return e.intersectsTriangle(this) } closestPointToPoint(e, t) { let n = this.a, i = this.b, r = this.c, o, a; ji.subVectors(i, n), $i.subVectors(r, n), Ia.subVectors(e, n); let l = ji.dot(Ia), c = $i.dot(Ia); if (l <= 0 && c <= 0) return t.copy(n); Da.subVectors(e, i); let u = ji.dot(Da), h = $i.dot(Da); if (u >= 0 && h <= u) return t.copy(i); let f = l * h - u * c; if (f <= 0 && l >= 0 && u <= 0) return o = l / (l - u), t.copy(n).addScaledVector(ji, o); Fa.subVectors(e, r); let d = ji.dot(Fa), g = $i.dot(Fa); if (g >= 0 && d <= g) return t.copy(r); let m = d * c - l * g; if (m <= 0 && c >= 0 && g <= 0) return a = c / (c - g), t.copy(n).addScaledVector($i, a); let x = u * g - d * h; if (x <= 0 && h - u >= 0 && d - g >= 0) return bu.subVectors(r, i), a = (h - u) / (h - u + (d - g)), t.copy(i).addScaledVector(bu, a); let p = 1 / (x + m + f); return o = m * p, a = f * p, t.copy(n).addScaledVector(ji, o).addScaledVector($i, a) } equals(e) { return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c) } }, Vm = 0, ht = class extends kn { constructor() { super(); Object.defineProperty(this, "id", { value: Vm++ }), this.uuid = jt(), this.name = "", this.type = "Material", this.fog = !0, this.blending = Or, this.side = zr, this.vertexColors = !1, this.opacity = 1, this.format = It, this.transparent = !1, this.blendSrc = qc, this.blendDst = Xc, this.blendEquation = Ni, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.depthFunc = oa, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 255, this.stencilFunc = Im, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = ga, this.stencilZFail = ga, this.stencilZPass = ga, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaToCoverage = !1, this.premultipliedAlpha = !1, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0, this._alphaTest = 0 } get alphaTest() { return this._alphaTest } set alphaTest(e) { this._alphaTest > 0 != e > 0 && this.version++, this._alphaTest = e } onBuild() { } onBeforeCompile() { } customProgramCacheKey() { return this.onBeforeCompile.toString() } setValues(e) { if (e !== void 0) for (let t in e) { let n = e[t]; if (n === void 0) { console.warn("THREE.Material: '" + t + "' parameter is undefined."); continue } if (t === "shading") { console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = n === Uc; continue } let i = this[t]; if (i === void 0) { console.warn("THREE." + this.type + ": '" + t + "' is not a property of this material."); continue } i && i.isColor ? i.set(n) : i && i.isVector3 && n && n.isVector3 ? i.copy(n) : this[t] = n } } toJSON(e) { let t = e === void 0 || typeof e == "string"; t && (e = { textures: {}, images: {} }); let n = { metadata: { version: 4.5, type: "Material", generator: "Material.toJSON" } }; n.uuid = this.uuid, n.type = this.type, this.name !== "" && (n.name = this.name), this.color && this.color.isColor && (n.color = this.color.getHex()), this.roughness !== void 0 && (n.roughness = this.roughness), this.metalness !== void 0 && (n.metalness = this.metalness), this.sheenTint && this.sheenTint.isColor && (n.sheenTint = this.sheenTint.getHex()), this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()), this.emissiveIntensity && this.emissiveIntensity !== 1 && (n.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n.specular = this.specular.getHex()), this.specularIntensity !== void 0 && (n.specularIntensity = this.specularIntensity), this.specularTint && this.specularTint.isColor && (n.specularTint = this.specularTint.getHex()), this.shininess !== void 0 && (n.shininess = this.shininess), this.clearcoat !== void 0 && (n.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (n.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(e).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(e).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid, n.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.map && this.map.isTexture && (n.map = this.map.toJSON(e).uuid), this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(e).uuid), this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(e).uuid), this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(e).uuid, n.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (n.aoMap = this.aoMap.toJSON(e).uuid, n.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(e).uuid, n.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(e).uuid, n.normalMapType = this.normalMapType, n.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(e).uuid, n.displacementScale = this.displacementScale, n.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(e).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(e).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(e).uuid), this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(e).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (n.specularIntensityMap = this.specularIntensityMap.toJSON(e).uuid), this.specularTintMap && this.specularTintMap.isTexture && (n.specularTintMap = this.specularTintMap.toJSON(e).uuid), this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(e).uuid, this.combine !== void 0 && (n.combine = this.combine)), this.envMapIntensity !== void 0 && (n.envMapIntensity = this.envMapIntensity), this.reflectivity !== void 0 && (n.reflectivity = this.reflectivity), this.refractionRatio !== void 0 && (n.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(e).uuid), this.transmission !== void 0 && (n.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (n.transmissionMap = this.transmissionMap.toJSON(e).uuid), this.thickness !== void 0 && (n.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (n.thicknessMap = this.thicknessMap.toJSON(e).uuid), this.attenuationDistance !== void 0 && (n.attenuationDistance = this.attenuationDistance), this.attenuationTint !== void 0 && (n.attenuationTint = this.attenuationTint.getHex()), this.size !== void 0 && (n.size = this.size), this.shadowSide !== null && (n.shadowSide = this.shadowSide), this.sizeAttenuation !== void 0 && (n.sizeAttenuation = this.sizeAttenuation), this.blending !== Or && (n.blending = this.blending), this.side !== zr && (n.side = this.side), this.vertexColors && (n.vertexColors = !0), this.opacity < 1 && (n.opacity = this.opacity), this.format !== It && (n.format = this.format), this.transparent === !0 && (n.transparent = this.transparent), n.depthFunc = this.depthFunc, n.depthTest = this.depthTest, n.depthWrite = this.depthWrite, n.colorWrite = this.colorWrite, n.stencilWrite = this.stencilWrite, n.stencilWriteMask = this.stencilWriteMask, n.stencilFunc = this.stencilFunc, n.stencilRef = this.stencilRef, n.stencilFuncMask = this.stencilFuncMask, n.stencilFail = this.stencilFail, n.stencilZFail = this.stencilZFail, n.stencilZPass = this.stencilZPass, this.rotation && this.rotation !== 0 && (n.rotation = this.rotation), this.polygonOffset === !0 && (n.polygonOffset = !0), this.polygonOffsetFactor !== 0 && (n.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (n.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth && this.linewidth !== 1 && (n.linewidth = this.linewidth), this.dashSize !== void 0 && (n.dashSize = this.dashSize), this.gapSize !== void 0 && (n.gapSize = this.gapSize), this.scale !== void 0 && (n.scale = this.scale), this.dithering === !0 && (n.dithering = !0), this.alphaTest > 0 && (n.alphaTest = this.alphaTest), this.alphaToCoverage === !0 && (n.alphaToCoverage = this.alphaToCoverage), this.premultipliedAlpha === !0 && (n.premultipliedAlpha = this.premultipliedAlpha), this.wireframe === !0 && (n.wireframe = this.wireframe), this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (n.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (n.wireframeLinejoin = this.wireframeLinejoin), this.flatShading === !0 && (n.flatShading = this.flatShading), this.visible === !1 && (n.visible = !1), this.toneMapped === !1 && (n.toneMapped = !1), JSON.stringify(this.userData) !== "{}" && (n.userData = this.userData); function i(r) { let o = []; for (let a in r) { let l = r[a]; delete l.metadata, o.push(l) } return o } if (t) { let r = i(e.textures), o = i(e.images); r.length > 0 && (n.textures = r), o.length > 0 && (n.images = o) } return n } clone() { return new this.constructor().copy(this) } copy(e) { this.name = e.name, this.fog = e.fog, this.blending = e.blending, this.side = e.side, this.vertexColors = e.vertexColors, this.opacity = e.opacity, this.format = e.format, this.transparent = e.transparent, this.blendSrc = e.blendSrc, this.blendDst = e.blendDst, this.blendEquation = e.blendEquation, this.blendSrcAlpha = e.blendSrcAlpha, this.blendDstAlpha = e.blendDstAlpha, this.blendEquationAlpha = e.blendEquationAlpha, this.depthFunc = e.depthFunc, this.depthTest = e.depthTest, this.depthWrite = e.depthWrite, this.stencilWriteMask = e.stencilWriteMask, this.stencilFunc = e.stencilFunc, this.stencilRef = e.stencilRef, this.stencilFuncMask = e.stencilFuncMask, this.stencilFail = e.stencilFail, this.stencilZFail = e.stencilZFail, this.stencilZPass = e.stencilZPass, this.stencilWrite = e.stencilWrite; let t = e.clippingPlanes, n = null; if (t !== null) { let i = t.length; n = new Array(i); for (let r = 0; r !== i; ++r)n[r] = t[r].clone() } return this.clippingPlanes = n, this.clipIntersection = e.clipIntersection, this.clipShadows = e.clipShadows, this.shadowSide = e.shadowSide, this.colorWrite = e.colorWrite, this.precision = e.precision, this.polygonOffset = e.polygonOffset, this.polygonOffsetFactor = e.polygonOffsetFactor, this.polygonOffsetUnits = e.polygonOffsetUnits, this.dithering = e.dithering, this.alphaTest = e.alphaTest, this.alphaToCoverage = e.alphaToCoverage, this.premultipliedAlpha = e.premultipliedAlpha, this.visible = e.visible, this.toneMapped = e.toneMapped, this.userData = JSON.parse(JSON.stringify(e.userData)), this } dispose() { this.dispatchEvent({ type: "dispose" }) } set needsUpdate(e) { e === !0 && this.version++ } }; ht.prototype.isMaterial = !0; var Mu = { aliceblue: 15792383, antiquewhite: 16444375, aqua: 65535, aquamarine: 8388564, azure: 15794175, beige: 16119260, bisque: 16770244, black: 0, blanchedalmond: 16772045, blue: 255, blueviolet: 9055202, brown: 10824234, burlywood: 14596231, cadetblue: 6266528, chartreuse: 8388352, chocolate: 13789470, coral: 16744272, cornflowerblue: 6591981, cornsilk: 16775388, crimson: 14423100, cyan: 65535, darkblue: 139, darkcyan: 35723, darkgoldenrod: 12092939, darkgray: 11119017, darkgreen: 25600, darkgrey: 11119017, darkkhaki: 12433259, darkmagenta: 9109643, darkolivegreen: 5597999, darkorange: 16747520, darkorchid: 10040012, darkred: 9109504, darksalmon: 15308410, darkseagreen: 9419919, darkslateblue: 4734347, darkslategray: 3100495, darkslategrey: 3100495, darkturquoise: 52945, darkviolet: 9699539, deeppink: 16716947, deepskyblue: 49151, dimgray: 6908265, dimgrey: 6908265, dodgerblue: 2003199, firebrick: 11674146, floralwhite: 16775920, forestgreen: 2263842, fuchsia: 16711935, gainsboro: 14474460, ghostwhite: 16316671, gold: 16766720, goldenrod: 14329120, gray: 8421504, green: 32768, greenyellow: 11403055, grey: 8421504, honeydew: 15794160, hotpink: 16738740, indianred: 13458524, indigo: 4915330, ivory: 16777200, khaki: 15787660, lavender: 15132410, lavenderblush: 16773365, lawngreen: 8190976, lemonchiffon: 16775885, lightblue: 11393254, lightcoral: 15761536, lightcyan: 14745599, lightgoldenrodyellow: 16448210, lightgray: 13882323, lightgreen: 9498256, lightgrey: 13882323, lightpink: 16758465, lightsalmon: 16752762, lightseagreen: 2142890, lightskyblue: 8900346, lightslategray: 7833753, lightslategrey: 7833753, lightsteelblue: 11584734, lightyellow: 16777184, lime: 65280, limegreen: 3329330, linen: 16445670, magenta: 16711935, maroon: 8388608, mediumaquamarine: 6737322, mediumblue: 205, mediumorchid: 12211667, mediumpurple: 9662683, mediumseagreen: 3978097, mediumslateblue: 8087790, mediumspringgreen: 64154, mediumturquoise: 4772300, mediumvioletred: 13047173, midnightblue: 1644912, mintcream: 16121850, mistyrose: 16770273, moccasin: 16770229, navajowhite: 16768685, navy: 128, oldlace: 16643558, olive: 8421376, olivedrab: 7048739, orange: 16753920, orangered: 16729344, orchid: 14315734, palegoldenrod: 15657130, palegreen: 10025880, paleturquoise: 11529966, palevioletred: 14381203, papayawhip: 16773077, peachpuff: 16767673, peru: 13468991, pink: 16761035, plum: 14524637, powderblue: 11591910, purple: 8388736, rebeccapurple: 6697881, red: 16711680, rosybrown: 12357519, royalblue: 4286945, saddlebrown: 9127187, salmon: 16416882, sandybrown: 16032864, seagreen: 3050327, seashell: 16774638, sienna: 10506797, silver: 12632256, skyblue: 8900331, slateblue: 6970061, slategray: 7372944, slategrey: 7372944, snow: 16775930, springgreen: 65407, steelblue: 4620980, tan: 13808780, teal: 32896, thistle: 14204888, tomato: 16737095, turquoise: 4251856, violet: 15631086, wheat: 16113331, white: 16777215, whitesmoke: 16119285, yellow: 16776960, yellowgreen: 10145074 }, en = { h: 0, s: 0, l: 0 }, Xs = { h: 0, s: 0, l: 0 }; function Ba(s, e, t) { return t < 0 && (t += 1), t > 1 && (t -= 1), t < 1 / 6 ? s + (e - s) * 6 * t : t < 1 / 2 ? e : t < 2 / 3 ? s + (e - s) * 6 * (2 / 3 - t) : s } function Na(s) { return s < .04045 ? s * .0773993808 : Math.pow(s * .9478672986 + .0521327014, 2.4) } function za(s) { return s < .0031308 ? s * 12.92 : 1.055 * Math.pow(s, .41666) - .055 } var se = class { constructor(e, t, n) { return t === void 0 && n === void 0 ? this.set(e) : this.setRGB(e, t, n) } set(e) { return e && e.isColor ? this.copy(e) : typeof e == "number" ? this.setHex(e) : typeof e == "string" && this.setStyle(e), this } setScalar(e) { return this.r = e, this.g = e, this.b = e, this } setHex(e) { return e = Math.floor(e), this.r = (e >> 16 & 255) / 255, this.g = (e >> 8 & 255) / 255, this.b = (e & 255) / 255, this } setRGB(e, t, n) { return this.r = e, this.g = t, this.b = n, this } setHSL(e, t, n) { if (e = Dm(e, 1), t = Tt(t, 0, 1), n = Tt(n, 0, 1), t === 0) this.r = this.g = this.b = n; else { let i = n <= .5 ? n * (1 + t) : n + t - n * t, r = 2 * n - i; this.r = Ba(r, i, e + 1 / 3), this.g = Ba(r, i, e), this.b = Ba(r, i, e - 1 / 3) } return this } setStyle(e) { function t(i) { i !== void 0 && parseFloat(i) < 1 && console.warn("THREE.Color: Alpha component of " + e + " will be ignored.") } let n; if (n = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(e)) { let i, r = n[1], o = n[2]; switch (r) { case "rgb": case "rgba": if (i = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) return this.r = Math.min(255, parseInt(i[1], 10)) / 255, this.g = Math.min(255, parseInt(i[2], 10)) / 255, this.b = Math.min(255, parseInt(i[3], 10)) / 255, t(i[4]), this; if (i = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) return this.r = Math.min(100, parseInt(i[1], 10)) / 100, this.g = Math.min(100, parseInt(i[2], 10)) / 100, this.b = Math.min(100, parseInt(i[3], 10)) / 100, t(i[4]), this; break; case "hsl": case "hsla": if (i = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) { let a = parseFloat(i[1]) / 360, l = parseInt(i[2], 10) / 100, c = parseInt(i[3], 10) / 100; return t(i[4]), this.setHSL(a, l, c) } break } } else if (n = /^\#([A-Fa-f\d]+)$/.exec(e)) { let i = n[1], r = i.length; if (r === 3) return this.r = parseInt(i.charAt(0) + i.charAt(0), 16) / 255, this.g = parseInt(i.charAt(1) + i.charAt(1), 16) / 255, this.b = parseInt(i.charAt(2) + i.charAt(2), 16) / 255, this; if (r === 6) return this.r = parseInt(i.charAt(0) + i.charAt(1), 16) / 255, this.g = parseInt(i.charAt(2) + i.charAt(3), 16) / 255, this.b = parseInt(i.charAt(4) + i.charAt(5), 16) / 255, this } return e && e.length > 0 ? this.setColorName(e) : this } setColorName(e) { let t = Mu[e.toLowerCase()]; return t !== void 0 ? this.setHex(t) : console.warn("THREE.Color: Unknown color " + e), this } clone() { return new this.constructor(this.r, this.g, this.b) } copy(e) { return this.r = e.r, this.g = e.g, this.b = e.b, this } copyGammaToLinear(e, t = 2) { return this.r = Math.pow(e.r, t), this.g = Math.pow(e.g, t), this.b = Math.pow(e.b, t), this } copyLinearToGamma(e, t = 2) { let n = t > 0 ? 1 / t : 1; return this.r = Math.pow(e.r, n), this.g = Math.pow(e.g, n), this.b = Math.pow(e.b, n), this } convertGammaToLinear(e) { return this.copyGammaToLinear(this, e), this } convertLinearToGamma(e) { return this.copyLinearToGamma(this, e), this } copySRGBToLinear(e) { return this.r = Na(e.r), this.g = Na(e.g), this.b = Na(e.b), this } copyLinearToSRGB(e) { return this.r = za(e.r), this.g = za(e.g), this.b = za(e.b), this } convertSRGBToLinear() { return this.copySRGBToLinear(this), this } convertLinearToSRGB() { return this.copyLinearToSRGB(this), this } getHex() { return this.r * 255 << 16 ^ this.g * 255 << 8 ^ this.b * 255 << 0 } getHexString() { return ("000000" + this.getHex().toString(16)).slice(-6) } getHSL(e) { let t = this.r, n = this.g, i = this.b, r = Math.max(t, n, i), o = Math.min(t, n, i), a, l, c = (o + r) / 2; if (o === r) a = 0, l = 0; else { let u = r - o; switch (l = c <= .5 ? u / (r + o) : u / (2 - r - o), r) { case t: a = (n - i) / u + (n < i ? 6 : 0); break; case n: a = (i - t) / u + 2; break; case i: a = (t - n) / u + 4; break }a /= 6 } return e.h = a, e.s = l, e.l = c, e } getStyle() { return "rgb(" + (this.r * 255 | 0) + "," + (this.g * 255 | 0) + "," + (this.b * 255 | 0) + ")" } offsetHSL(e, t, n) { return this.getHSL(en), en.h += e, en.s += t, en.l += n, this.setHSL(en.h, en.s, en.l), this } add(e) { return this.r += e.r, this.g += e.g, this.b += e.b, this } addColors(e, t) { return this.r = e.r + t.r, this.g = e.g + t.g, this.b = e.b + t.b, this } addScalar(e) { return this.r += e, this.g += e, this.b += e, this } sub(e) { return this.r = Math.max(0, this.r - e.r), this.g = Math.max(0, this.g - e.g), this.b = Math.max(0, this.b - e.b), this } multiply(e) { return this.r *= e.r, this.g *= e.g, this.b *= e.b, this } multiplyScalar(e) { return this.r *= e, this.g *= e, this.b *= e, this } lerp(e, t) { return this.r += (e.r - this.r) * t, this.g += (e.g - this.g) * t, this.b += (e.b - this.b) * t, this } lerpColors(e, t, n) { return this.r = e.r + (t.r - e.r) * n, this.g = e.g + (t.g - e.g) * n, this.b = e.b + (t.b - e.b) * n, this } lerpHSL(e, t) { this.getHSL(en), e.getHSL(Xs); let n = ya(en.h, Xs.h, t), i = ya(en.s, Xs.s, t), r = ya(en.l, Xs.l, t); return this.setHSL(n, i, r), this } equals(e) { return e.r === this.r && e.g === this.g && e.b === this.b } fromArray(e, t = 0) { return this.r = e[t], this.g = e[t + 1], this.b = e[t + 2], this } toArray(e = [], t = 0) { return e[t] = this.r, e[t + 1] = this.g, e[t + 2] = this.b, e } fromBufferAttribute(e, t) { return this.r = e.getX(t), this.g = e.getY(t), this.b = e.getZ(t), e.normalized === !0 && (this.r /= 255, this.g /= 255, this.b /= 255), this } toJSON() { return this.getHex() } }; se.NAMES = Mu; se.prototype.isColor = !0; se.prototype.r = 1; se.prototype.g = 1; se.prototype.b = 1; var Ys = class extends ht { constructor(e) { super(); this.type = "MeshBasicMaterial", this.color = new se(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = Cs, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.setValues(e) } copy(e) { return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this } }; Ys.prototype.isMeshBasicMaterial = !0; var Ve = new A, Zs = new Y, Qe = class { constructor(e, t, n) { if (Array.isArray(e)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array."); this.name = "", this.array = e, this.itemSize = t, this.count = e !== void 0 ? e.length / t : 0, this.normalized = n === !0, this.usage = Hr, this.updateRange = { offset: 0, count: -1 }, this.version = 0 } onUploadCallback() { } set needsUpdate(e) { e === !0 && this.version++ } setUsage(e) { return this.usage = e, this } copy(e) { return this.name = e.name, this.array = new e.array.constructor(e.array), this.itemSize = e.itemSize, this.count = e.count, this.normalized = e.normalized, this.usage = e.usage, this } copyAt(e, t, n) { e *= this.itemSize, n *= t.itemSize; for (let i = 0, r = this.itemSize; i < r; i++)this.array[e + i] = t.array[n + i]; return this } copyArray(e) { return this.array.set(e), this } copyColorsArray(e) { let t = this.array, n = 0; for (let i = 0, r = e.length; i < r; i++) { let o = e[i]; o === void 0 && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", i), o = new se), t[n++] = o.r, t[n++] = o.g, t[n++] = o.b } return this } copyVector2sArray(e) { let t = this.array, n = 0; for (let i = 0, r = e.length; i < r; i++) { let o = e[i]; o === void 0 && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", i), o = new Y), t[n++] = o.x, t[n++] = o.y } return this } copyVector3sArray(e) { let t = this.array, n = 0; for (let i = 0, r = e.length; i < r; i++) { let o = e[i]; o === void 0 && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", i), o = new A), t[n++] = o.x, t[n++] = o.y, t[n++] = o.z } return this } copyVector4sArray(e) { let t = this.array, n = 0; for (let i = 0, r = e.length; i < r; i++) { let o = e[i]; o === void 0 && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", i), o = new Oe), t[n++] = o.x, t[n++] = o.y, t[n++] = o.z, t[n++] = o.w } return this } applyMatrix3(e) { if (this.itemSize === 2) for (let t = 0, n = this.count; t < n; t++)Zs.fromBufferAttribute(this, t), Zs.applyMatrix3(e), this.setXY(t, Zs.x, Zs.y); else if (this.itemSize === 3) for (let t = 0, n = this.count; t < n; t++)Ve.fromBufferAttribute(this, t), Ve.applyMatrix3(e), this.setXYZ(t, Ve.x, Ve.y, Ve.z); return this } applyMatrix4(e) { for (let t = 0, n = this.count; t < n; t++)Ve.x = this.getX(t), Ve.y = this.getY(t), Ve.z = this.getZ(t), Ve.applyMatrix4(e), this.setXYZ(t, Ve.x, Ve.y, Ve.z); return this } applyNormalMatrix(e) { for (let t = 0, n = this.count; t < n; t++)Ve.x = this.getX(t), Ve.y = this.getY(t), Ve.z = this.getZ(t), Ve.applyNormalMatrix(e), this.setXYZ(t, Ve.x, Ve.y, Ve.z); return this } transformDirection(e) { for (let t = 0, n = this.count; t < n; t++)Ve.x = this.getX(t), Ve.y = this.getY(t), Ve.z = this.getZ(t), Ve.transformDirection(e), this.setXYZ(t, Ve.x, Ve.y, Ve.z); return this } set(e, t = 0) { return this.array.set(e, t), this } getX(e) { return this.array[e * this.itemSize] } setX(e, t) { return this.array[e * this.itemSize] = t, this } getY(e) { return this.array[e * this.itemSize + 1] } setY(e, t) { return this.array[e * this.itemSize + 1] = t, this } getZ(e) { return this.array[e * this.itemSize + 2] } setZ(e, t) { return this.array[e * this.itemSize + 2] = t, this } getW(e) { return this.array[e * this.itemSize + 3] } setW(e, t) { return this.array[e * this.itemSize + 3] = t, this } setXY(e, t, n) { return e *= this.itemSize, this.array[e + 0] = t, this.array[e + 1] = n, this } setXYZ(e, t, n, i) { return e *= this.itemSize, this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = i, this } setXYZW(e, t, n, i, r) { return e *= this.itemSize, this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = i, this.array[e + 3] = r, this } onUpload(e) { return this.onUploadCallback = e, this } clone() { return new this.constructor(this.array, this.itemSize).copy(this) } toJSON() { let e = { itemSize: this.itemSize, type: this.array.constructor.name, array: Array.prototype.slice.call(this.array), normalized: this.normalized }; return this.name !== "" && (e.name = this.name), this.usage !== Hr && (e.usage = this.usage), (this.updateRange.offset !== 0 || this.updateRange.count !== -1) && (e.updateRange = this.updateRange), e } }; Qe.prototype.isBufferAttribute = !0; var Oa = class extends Qe { constructor(e, t, n) { super(new Uint16Array(e), t, n) } }; var Ua = class extends Qe { constructor(e, t, n) { super(new Uint32Array(e), t, n) } }, Su = class extends Qe { constructor(e, t, n) { super(new Uint16Array(e), t, n) } }; Su.prototype.isFloat16BufferAttribute = !0; var et = class extends Qe { constructor(e, t, n) { super(new Float32Array(e), t, n) } }; function Tu(s) { if (s.length === 0) return -1 / 0; let e = s[0]; for (let t = 1, n = s.length; t < n; ++t)s[t] > e && (e = s[t]); return e } var Wm = 0, Ht = new xe, ka = new Ne, Qi = new A, Ft = new kt, qr = new kt, at = new A, We = class extends kn { constructor() { super(); Object.defineProperty(this, "id", { value: Wm++ }), this.uuid = jt(), this.name = "", this.type = "BufferGeometry", this.index = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = { start: 0, count: 1 / 0 }, this.userData = {} } getIndex() { return this.index } setIndex(e) { return Array.isArray(e) ? this.index = new (Tu(e) > 65535 ? Ua : Oa)(e, 1) : this.index = e, this } getAttribute(e) { return this.attributes[e] } setAttribute(e, t) { return this.attributes[e] = t, this } deleteAttribute(e) { return delete this.attributes[e], this } hasAttribute(e) { return this.attributes[e] !== void 0 } addGroup(e, t, n = 0) { this.groups.push({ start: e, count: t, materialIndex: n }) } clearGroups() { this.groups = [] } setDrawRange(e, t) { this.drawRange.start = e, this.drawRange.count = t } applyMatrix4(e) { let t = this.attributes.position; t !== void 0 && (t.applyMatrix4(e), t.needsUpdate = !0); let n = this.attributes.normal; if (n !== void 0) { let r = new st().getNormalMatrix(e); n.applyNormalMatrix(r), n.needsUpdate = !0 } let i = this.attributes.tangent; return i !== void 0 && (i.transformDirection(e), i.needsUpdate = !0), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this } applyQuaternion(e) { return Ht.makeRotationFromQuaternion(e), this.applyMatrix4(Ht), this } rotateX(e) { return Ht.makeRotationX(e), this.applyMatrix4(Ht), this } rotateY(e) { return Ht.makeRotationY(e), this.applyMatrix4(Ht), this } rotateZ(e) { return Ht.makeRotationZ(e), this.applyMatrix4(Ht), this } translate(e, t, n) { return Ht.makeTranslation(e, t, n), this.applyMatrix4(Ht), this } scale(e, t, n) { return Ht.makeScale(e, t, n), this.applyMatrix4(Ht), this } lookAt(e) { return ka.lookAt(e), ka.updateMatrix(), this.applyMatrix4(ka.matrix), this } center() { return this.computeBoundingBox(), this.boundingBox.getCenter(Qi).negate(), this.translate(Qi.x, Qi.y, Qi.z), this } setFromPoints(e) { let t = []; for (let n = 0, i = e.length; n < i; n++) { let r = e[n]; t.push(r.x, r.y, r.z || 0) } return this.setAttribute("position", new et(t, 3)), this } computeBoundingBox() { this.boundingBox === null && (this.boundingBox = new kt); let e = this.attributes.position, t = this.morphAttributes.position; if (e && e.isGLBufferAttribute) { console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingBox.set(new A(-1 / 0, -1 / 0, -1 / 0), new A(1 / 0, 1 / 0, 1 / 0)); return } if (e !== void 0) { if (this.boundingBox.setFromBufferAttribute(e), t) for (let n = 0, i = t.length; n < i; n++) { let r = t[n]; Ft.setFromBufferAttribute(r), this.morphTargetsRelative ? (at.addVectors(this.boundingBox.min, Ft.min), this.boundingBox.expandByPoint(at), at.addVectors(this.boundingBox.max, Ft.max), this.boundingBox.expandByPoint(at)) : (this.boundingBox.expandByPoint(Ft.min), this.boundingBox.expandByPoint(Ft.max)) } } else this.boundingBox.makeEmpty(); (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this) } computeBoundingSphere() { this.boundingSphere === null && (this.boundingSphere = new wi); let e = this.attributes.position, t = this.morphAttributes.position; if (e && e.isGLBufferAttribute) { console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this), this.boundingSphere.set(new A, 1 / 0); return } if (e) { let n = this.boundingSphere.center; if (Ft.setFromBufferAttribute(e), t) for (let r = 0, o = t.length; r < o; r++) { let a = t[r]; qr.setFromBufferAttribute(a), this.morphTargetsRelative ? (at.addVectors(Ft.min, qr.min), Ft.expandByPoint(at), at.addVectors(Ft.max, qr.max), Ft.expandByPoint(at)) : (Ft.expandByPoint(qr.min), Ft.expandByPoint(qr.max)) } Ft.getCenter(n); let i = 0; for (let r = 0, o = e.count; r < o; r++)at.fromBufferAttribute(e, r), i = Math.max(i, n.distanceToSquared(at)); if (t) for (let r = 0, o = t.length; r < o; r++) { let a = t[r], l = this.morphTargetsRelative; for (let c = 0, u = a.count; c < u; c++)at.fromBufferAttribute(a, c), l && (Qi.fromBufferAttribute(e, c), at.add(Qi)), i = Math.max(i, n.distanceToSquared(at)) } this.boundingSphere.radius = Math.sqrt(i), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this) } } computeTangents() { let e = this.index, t = this.attributes; if (e === null || t.position === void 0 || t.normal === void 0 || t.uv === void 0) { console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)"); return } let n = e.array, i = t.position.array, r = t.normal.array, o = t.uv.array, a = i.length / 3; t.tangent === void 0 && this.setAttribute("tangent", new Qe(new Float32Array(4 * a), 4)); let l = t.tangent.array, c = [], u = []; for (let D = 0; D < a; D++)c[D] = new A, u[D] = new A; let h = new A, f = new A, d = new A, g = new Y, m = new Y, x = new Y, p = new A, _ = new A; function w(D, L, $) { h.fromArray(i, D * 3), f.fromArray(i, L * 3), d.fromArray(i, $ * 3), g.fromArray(o, D * 2), m.fromArray(o, L * 2), x.fromArray(o, $ * 2), f.sub(h), d.sub(h), m.sub(g), x.sub(g); let z = 1 / (m.x * x.y - x.x * m.y); !isFinite(z) || (p.copy(f).multiplyScalar(x.y).addScaledVector(d, -m.y).multiplyScalar(z), _.copy(d).multiplyScalar(m.x).addScaledVector(f, -x.x).multiplyScalar(z), c[D].add(p), c[L].add(p), c[$].add(p), u[D].add(_), u[L].add(_), u[$].add(_)) } let v = this.groups; v.length === 0 && (v = [{ start: 0, count: n.length }]); for (let D = 0, L = v.length; D < L; ++D) { let $ = v[D], z = $.start, F = $.count; for (let U = z, N = z + F; U < N; U += 3)w(n[U + 0], n[U + 1], n[U + 2]) } let b = new A, T = new A, y = new A, C = new A; function R(D) { y.fromArray(r, D * 3), C.copy(y); let L = c[D]; b.copy(L), b.sub(y.multiplyScalar(y.dot(L))).normalize(), T.crossVectors(C, L); let z = T.dot(u[D]) < 0 ? -1 : 1; l[D * 4] = b.x, l[D * 4 + 1] = b.y, l[D * 4 + 2] = b.z, l[D * 4 + 3] = z } for (let D = 0, L = v.length; D < L; ++D) { let $ = v[D], z = $.start, F = $.count; for (let U = z, N = z + F; U < N; U += 3)R(n[U + 0]), R(n[U + 1]), R(n[U + 2]) } } computeVertexNormals() { let e = this.index, t = this.getAttribute("position"); if (t !== void 0) { let n = this.getAttribute("normal"); if (n === void 0) n = new Qe(new Float32Array(t.count * 3), 3), this.setAttribute("normal", n); else for (let f = 0, d = n.count; f < d; f++)n.setXYZ(f, 0, 0, 0); let i = new A, r = new A, o = new A, a = new A, l = new A, c = new A, u = new A, h = new A; if (e) for (let f = 0, d = e.count; f < d; f += 3) { let g = e.getX(f + 0), m = e.getX(f + 1), x = e.getX(f + 2); i.fromBufferAttribute(t, g), r.fromBufferAttribute(t, m), o.fromBufferAttribute(t, x), u.subVectors(o, r), h.subVectors(i, r), u.cross(h), a.fromBufferAttribute(n, g), l.fromBufferAttribute(n, m), c.fromBufferAttribute(n, x), a.add(u), l.add(u), c.add(u), n.setXYZ(g, a.x, a.y, a.z), n.setXYZ(m, l.x, l.y, l.z), n.setXYZ(x, c.x, c.y, c.z) } else for (let f = 0, d = t.count; f < d; f += 3)i.fromBufferAttribute(t, f + 0), r.fromBufferAttribute(t, f + 1), o.fromBufferAttribute(t, f + 2), u.subVectors(o, r), h.subVectors(i, r), u.cross(h), n.setXYZ(f + 0, u.x, u.y, u.z), n.setXYZ(f + 1, u.x, u.y, u.z), n.setXYZ(f + 2, u.x, u.y, u.z); this.normalizeNormals(), n.needsUpdate = !0 } } merge(e, t) { if (!(e && e.isBufferGeometry)) { console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", e); return } t === void 0 && (t = 0, console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.")); let n = this.attributes; for (let i in n) { if (e.attributes[i] === void 0) continue; let o = n[i].array, a = e.attributes[i], l = a.array, c = a.itemSize * t, u = Math.min(l.length, o.length - c); for (let h = 0, f = c; h < u; h++, f++)o[f] = l[h] } return this } normalizeNormals() { let e = this.attributes.normal; for (let t = 0, n = e.count; t < n; t++)at.fromBufferAttribute(e, t), at.normalize(), e.setXYZ(t, at.x, at.y, at.z) } toNonIndexed() { function e(a, l) { let c = a.array, u = a.itemSize, h = a.normalized, f = new c.constructor(l.length * u), d = 0, g = 0; for (let m = 0, x = l.length; m < x; m++) { a.isInterleavedBufferAttribute ? d = l[m] * a.data.stride + a.offset : d = l[m] * u; for (let p = 0; p < u; p++)f[g++] = c[d++] } return new Qe(f, u, h) } if (this.index === null) return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this; let t = new We, n = this.index.array, i = this.attributes; for (let a in i) { let l = i[a], c = e(l, n); t.setAttribute(a, c) } let r = this.morphAttributes; for (let a in r) { let l = [], c = r[a]; for (let u = 0, h = c.length; u < h; u++) { let f = c[u], d = e(f, n); l.push(d) } t.morphAttributes[a] = l } t.morphTargetsRelative = this.morphTargetsRelative; let o = this.groups; for (let a = 0, l = o.length; a < l; a++) { let c = o[a]; t.addGroup(c.start, c.count, c.materialIndex) } return t } toJSON() { let e = { metadata: { version: 4.5, type: "BufferGeometry", generator: "BufferGeometry.toJSON" } }; if (e.uuid = this.uuid, e.type = this.type, this.name !== "" && (e.name = this.name), Object.keys(this.userData).length > 0 && (e.userData = this.userData), this.parameters !== void 0) { let l = this.parameters; for (let c in l) l[c] !== void 0 && (e[c] = l[c]); return e } e.data = { attributes: {} }; let t = this.index; t !== null && (e.data.index = { type: t.array.constructor.name, array: Array.prototype.slice.call(t.array) }); let n = this.attributes; for (let l in n) { let c = n[l]; e.data.attributes[l] = c.toJSON(e.data) } let i = {}, r = !1; for (let l in this.morphAttributes) { let c = this.morphAttributes[l], u = []; for (let h = 0, f = c.length; h < f; h++) { let d = c[h]; u.push(d.toJSON(e.data)) } u.length > 0 && (i[l] = u, r = !0) } r && (e.data.morphAttributes = i, e.data.morphTargetsRelative = this.morphTargetsRelative); let o = this.groups; o.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(o))); let a = this.boundingSphere; return a !== null && (e.data.boundingSphere = { center: a.center.toArray(), radius: a.radius }), e } clone() { return new We().copy(this) } copy(e) { this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null; let t = {}; this.name = e.name; let n = e.index; n !== null && this.setIndex(n.clone(t)); let i = e.attributes; for (let c in i) { let u = i[c]; this.setAttribute(c, u.clone(t)) } let r = e.morphAttributes; for (let c in r) { let u = [], h = r[c]; for (let f = 0, d = h.length; f < d; f++)u.push(h[f].clone(t)); this.morphAttributes[c] = u } this.morphTargetsRelative = e.morphTargetsRelative; let o = e.groups; for (let c = 0, u = o.length; c < u; c++) { let h = o[c]; this.addGroup(h.start, h.count, h.materialIndex) } let a = e.boundingBox; a !== null && (this.boundingBox = a.clone()); let l = e.boundingSphere; return l !== null && (this.boundingSphere = l.clone()), this.drawRange.start = e.drawRange.start, this.drawRange.count = e.drawRange.count, this.userData = e.userData, this } dispose() { this.dispatchEvent({ type: "dispose" }) } }; We.prototype.isBufferGeometry = !0; var Eu = new xe, Ki = new Wn, Ha = new wi, Xn = new A, Yn = new A, Zn = new A, Ga = new A, Va = new A, Wa = new A, Js = new A, js = new A, $s = new A, Qs = new Y, Ks = new Y, eo = new Y, qa = new A, to = new A, tt = class extends Ne { constructor(e = new We, t = new Ys) { super(); this.type = "Mesh", this.geometry = e, this.material = t, this.updateMorphTargets() } copy(e) { return super.copy(e), e.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = e.morphTargetInfluences.slice()), e.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, e.morphTargetDictionary)), this.material = e.material, this.geometry = e.geometry, this } updateMorphTargets() { let e = this.geometry; if (e.isBufferGeometry) { let t = e.morphAttributes, n = Object.keys(t); if (n.length > 0) { let i = t[n[0]]; if (i !== void 0) { this.morphTargetInfluences = [], this.morphTargetDictionary = {}; for (let r = 0, o = i.length; r < o; r++) { let a = i[r].name || String(r); this.morphTargetInfluences.push(0), this.morphTargetDictionary[a] = r } } } } else { let t = e.morphTargets; t !== void 0 && t.length > 0 && console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.") } } raycast(e, t) { let n = this.geometry, i = this.material, r = this.matrixWorld; if (i === void 0 || (n.boundingSphere === null && n.computeBoundingSphere(), Ha.copy(n.boundingSphere), Ha.applyMatrix4(r), e.ray.intersectsSphere(Ha) === !1) || (Eu.copy(r).invert(), Ki.copy(e.ray).applyMatrix4(Eu), n.boundingBox !== null && Ki.intersectsBox(n.boundingBox) === !1)) return; let o; if (n.isBufferGeometry) { let a = n.index, l = n.attributes.position, c = n.morphAttributes.position, u = n.morphTargetsRelative, h = n.attributes.uv, f = n.attributes.uv2, d = n.groups, g = n.drawRange; if (a !== null) if (Array.isArray(i)) for (let m = 0, x = d.length; m < x; m++) { let p = d[m], _ = i[p.materialIndex], w = Math.max(p.start, g.start), v = Math.min(p.start + p.count, g.start + g.count); for (let b = w, T = v; b < T; b += 3) { let y = a.getX(b), C = a.getX(b + 1), R = a.getX(b + 2); o = no(this, _, e, Ki, l, c, u, h, f, y, C, R), o && (o.faceIndex = Math.floor(b / 3), o.face.materialIndex = p.materialIndex, t.push(o)) } } else { let m = Math.max(0, g.start), x = Math.min(a.count, g.start + g.count); for (let p = m, _ = x; p < _; p += 3) { let w = a.getX(p), v = a.getX(p + 1), b = a.getX(p + 2); o = no(this, i, e, Ki, l, c, u, h, f, w, v, b), o && (o.faceIndex = Math.floor(p / 3), t.push(o)) } } else if (l !== void 0) if (Array.isArray(i)) for (let m = 0, x = d.length; m < x; m++) { let p = d[m], _ = i[p.materialIndex], w = Math.max(p.start, g.start), v = Math.min(p.start + p.count, g.start + g.count); for (let b = w, T = v; b < T; b += 3) { let y = b, C = b + 1, R = b + 2; o = no(this, _, e, Ki, l, c, u, h, f, y, C, R), o && (o.faceIndex = Math.floor(b / 3), o.face.materialIndex = p.materialIndex, t.push(o)) } } else { let m = Math.max(0, g.start), x = Math.min(l.count, g.start + g.count); for (let p = m, _ = x; p < _; p += 3) { let w = p, v = p + 1, b = p + 2; o = no(this, i, e, Ki, l, c, u, h, f, w, v, b), o && (o.faceIndex = Math.floor(p / 3), t.push(o)) } } } else n.isGeometry && console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.") } }; tt.prototype.isMesh = !0; function qm(s, e, t, n, i, r, o, a) { let l; if (e.side === Ke ? l = n.intersectTriangle(o, r, i, !0, a) : l = n.intersectTriangle(i, r, o, e.side !== Bi, a), l === null) return null; to.copy(a), to.applyMatrix4(s.matrixWorld); let c = t.ray.origin.distanceTo(to); return c < t.near || c > t.far ? null : { distance: c, point: to.clone(), object: s } } function no(s, e, t, n, i, r, o, a, l, c, u, h) { Xn.fromBufferAttribute(i, c), Yn.fromBufferAttribute(i, u), Zn.fromBufferAttribute(i, h); let f = s.morphTargetInfluences; if (r && f) { Js.set(0, 0, 0), js.set(0, 0, 0), $s.set(0, 0, 0); for (let g = 0, m = r.length; g < m; g++) { let x = f[g], p = r[g]; x !== 0 && (Ga.fromBufferAttribute(p, c), Va.fromBufferAttribute(p, u), Wa.fromBufferAttribute(p, h), o ? (Js.addScaledVector(Ga, x), js.addScaledVector(Va, x), $s.addScaledVector(Wa, x)) : (Js.addScaledVector(Ga.sub(Xn), x), js.addScaledVector(Va.sub(Yn), x), $s.addScaledVector(Wa.sub(Zn), x))) } Xn.add(Js), Yn.add(js), Zn.add($s) } s.isSkinnedMesh && (s.boneTransform(c, Xn), s.boneTransform(u, Yn), s.boneTransform(h, Zn)); let d = qm(s, e, t, n, Xn, Yn, Zn, qa); if (d) { a && (Qs.fromBufferAttribute(a, c), Ks.fromBufferAttribute(a, u), eo.fromBufferAttribute(a, h), d.uv = Je.getUV(qa, Xn, Yn, Zn, Qs, Ks, eo, new Y)), l && (Qs.fromBufferAttribute(l, c), Ks.fromBufferAttribute(l, u), eo.fromBufferAttribute(l, h), d.uv2 = Je.getUV(qa, Xn, Yn, Zn, Qs, Ks, eo, new Y)); let g = { a: c, b: u, c: h, normal: new A, materialIndex: 0 }; Je.getNormal(Xn, Yn, Zn, g.normal), d.face = g } return d } var er = class extends We { constructor(e = 1, t = 1, n = 1, i = 1, r = 1, o = 1) { super(); this.type = "BoxGeometry", this.parameters = { width: e, height: t, depth: n, widthSegments: i, heightSegments: r, depthSegments: o }; let a = this; i = Math.floor(i), r = Math.floor(r), o = Math.floor(o); let l = [], c = [], u = [], h = [], f = 0, d = 0; g("z", "y", "x", -1, -1, n, t, e, o, r, 0), g("z", "y", "x", 1, -1, n, t, -e, o, r, 1), g("x", "z", "y", 1, 1, e, n, t, i, o, 2), g("x", "z", "y", 1, -1, e, n, -t, i, o, 3), g("x", "y", "z", 1, -1, e, t, n, i, r, 4), g("x", "y", "z", -1, -1, e, t, -n, i, r, 5), this.setIndex(l), this.setAttribute("position", new et(c, 3)), this.setAttribute("normal", new et(u, 3)), this.setAttribute("uv", new et(h, 2)); function g(m, x, p, _, w, v, b, T, y, C, R) { let D = v / y, L = b / C, $ = v / 2, z = b / 2, F = T / 2, U = y + 1, N = C + 1, k = 0, Q = 0, oe = new A; for (let ue = 0; ue < N; ue++) { let ee = ue * L - z; for (let we = 0; we < U; we++) { let W = we * D - $; oe[m] = W * _, oe[x] = ee * w, oe[p] = F, c.push(oe.x, oe.y, oe.z), oe[m] = 0, oe[x] = 0, oe[p] = T > 0 ? 1 : -1, u.push(oe.x, oe.y, oe.z), h.push(we / y), h.push(1 - ue / C), k += 1 } } for (let ue = 0; ue < C; ue++)for (let ee = 0; ee < y; ee++) { let we = f + ee + U * ue, W = f + ee + U * (ue + 1), j = f + (ee + 1) + U * (ue + 1), de = f + (ee + 1) + U * ue; l.push(we, W, de), l.push(W, j, de), Q += 6 } a.addGroup(d, Q, R), d += Q, f += k } } static fromJSON(e) { return new er(e.width, e.height, e.depth, e.widthSegments, e.heightSegments, e.depthSegments) } }; function tr(s) { let e = {}; for (let t in s) { e[t] = {}; for (let n in s[t]) { let i = s[t][n]; i && (i.isColor || i.isMatrix3 || i.isMatrix4 || i.isVector2 || i.isVector3 || i.isVector4 || i.isTexture || i.isQuaternion) ? e[t][n] = i.clone() : Array.isArray(i) ? e[t][n] = i.slice() : e[t][n] = i } } return e } function _t(s) { let e = {}; for (let t = 0; t < s.length; t++) { let n = tr(s[t]); for (let i in n) e[i] = n[i] } return e } var Xm = { clone: tr, merge: _t }, Ym = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`, Zm = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`, Gt = class extends ht { constructor(e) { super(); this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.vertexShader = Ym, this.fragmentShader = Zm, this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.extensions = { derivatives: !1, fragDepth: !1, drawBuffers: !1, shaderTextureLOD: !1 }, this.defaultAttributeValues = { color: [1, 1, 1], uv: [0, 0], uv2: [0, 0] }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, this.glslVersion = null, e !== void 0 && (e.attributes !== void 0 && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."), this.setValues(e)) } copy(e) { return super.copy(e), this.fragmentShader = e.fragmentShader, this.vertexShader = e.vertexShader, this.uniforms = tr(e.uniforms), this.defines = Object.assign({}, e.defines), this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.lights = e.lights, this.clipping = e.clipping, this.extensions = Object.assign({}, e.extensions), this.glslVersion = e.glslVersion, this } toJSON(e) { let t = super.toJSON(e); t.glslVersion = this.glslVersion, t.uniforms = {}; for (let i in this.uniforms) { let o = this.uniforms[i].value; o && o.isTexture ? t.uniforms[i] = { type: "t", value: o.toJSON(e).uuid } : o && o.isColor ? t.uniforms[i] = { type: "c", value: o.getHex() } : o && o.isVector2 ? t.uniforms[i] = { type: "v2", value: o.toArray() } : o && o.isVector3 ? t.uniforms[i] = { type: "v3", value: o.toArray() } : o && o.isVector4 ? t.uniforms[i] = { type: "v4", value: o.toArray() } : o && o.isMatrix3 ? t.uniforms[i] = { type: "m3", value: o.toArray() } : o && o.isMatrix4 ? t.uniforms[i] = { type: "m4", value: o.toArray() } : t.uniforms[i] = { value: o } } Object.keys(this.defines).length > 0 && (t.defines = this.defines), t.vertexShader = this.vertexShader, t.fragmentShader = this.fragmentShader; let n = {}; for (let i in this.extensions) this.extensions[i] === !0 && (n[i] = !0); return Object.keys(n).length > 0 && (t.extensions = n), t } }; Gt.prototype.isShaderMaterial = !0; var io = class extends Ne { constructor() { super(); this.type = "Camera", this.matrixWorldInverse = new xe, this.projectionMatrix = new xe, this.projectionMatrixInverse = new xe } copy(e, t) { return super.copy(e, t), this.matrixWorldInverse.copy(e.matrixWorldInverse), this.projectionMatrix.copy(e.projectionMatrix), this.projectionMatrixInverse.copy(e.projectionMatrixInverse), this } getWorldDirection(e) { this.updateWorldMatrix(!0, !1); let t = this.matrixWorld.elements; return e.set(-t[8], -t[9], -t[10]).normalize() } updateMatrixWorld(e) { super.updateMatrixWorld(e), this.matrixWorldInverse.copy(this.matrixWorld).invert() } updateWorldMatrix(e, t) { super.updateWorldMatrix(e, t), this.matrixWorldInverse.copy(this.matrixWorld).invert() } clone() { return new this.constructor().copy(this) } }; io.prototype.isCamera = !0; var ft = class extends io { constructor(e = 50, t = 1, n = .1, i = 2e3) { super(); this.type = "PerspectiveCamera", this.fov = e, this.zoom = 1, this.near = n, this.far = i, this.focus = 10, this.aspect = t, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix() } copy(e, t) { return super.copy(e, t), this.fov = e.fov, this.zoom = e.zoom, this.near = e.near, this.far = e.far, this.focus = e.focus, this.aspect = e.aspect, this.view = e.view === null ? null : Object.assign({}, e.view), this.filmGauge = e.filmGauge, this.filmOffset = e.filmOffset, this } setFocalLength(e) { let t = .5 * this.getFilmHeight() / e; this.fov = xa * 2 * Math.atan(t), this.updateProjectionMatrix() } getFocalLength() { let e = Math.tan(_a * .5 * this.fov); return .5 * this.getFilmHeight() / e } getEffectiveFOV() { return xa * 2 * Math.atan(Math.tan(_a * .5 * this.fov) / this.zoom) } getFilmWidth() { return this.filmGauge * Math.min(this.aspect, 1) } getFilmHeight() { return this.filmGauge / Math.max(this.aspect, 1) } setViewOffset(e, t, n, i, r, o) { this.aspect = e / t, this.view === null && (this.view = { enabled: !0, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = i, this.view.width = r, this.view.height = o, this.updateProjectionMatrix() } clearViewOffset() { this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix() } updateProjectionMatrix() { let e = this.near, t = e * Math.tan(_a * .5 * this.fov) / this.zoom, n = 2 * t, i = this.aspect * n, r = -.5 * i, o = this.view; if (this.view !== null && this.view.enabled) { let l = o.fullWidth, c = o.fullHeight; r += o.offsetX * i / l, t -= o.offsetY * n / c, i *= o.width / l, n *= o.height / c } let a = this.filmOffset; a !== 0 && (r += e * a / this.getFilmWidth()), this.projectionMatrix.makePerspective(r, r + i, t, t - n, e, this.far), this.projectionMatrixInverse.copy(this.projectionMatrix).invert() } toJSON(e) { let t = super.toJSON(e); return t.object.fov = this.fov, t.object.zoom = this.zoom, t.object.near = this.near, t.object.far = this.far, t.object.focus = this.focus, t.object.aspect = this.aspect, this.view !== null && (t.object.view = Object.assign({}, this.view)), t.object.filmGauge = this.filmGauge, t.object.filmOffset = this.filmOffset, t } }; ft.prototype.isPerspectiveCamera = !0; var nr = 90, ir = 1, ro = class extends Ne { constructor(e, t, n) { super(); if (this.type = "CubeCamera", n.isWebGLCubeRenderTarget !== !0) { console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter."); return } this.renderTarget = n; let i = new ft(nr, ir, e, t); i.layers = this.layers, i.up.set(0, -1, 0), i.lookAt(new A(1, 0, 0)), this.add(i); let r = new ft(nr, ir, e, t); r.layers = this.layers, r.up.set(0, -1, 0), r.lookAt(new A(-1, 0, 0)), this.add(r); let o = new ft(nr, ir, e, t); o.layers = this.layers, o.up.set(0, 0, 1), o.lookAt(new A(0, 1, 0)), this.add(o); let a = new ft(nr, ir, e, t); a.layers = this.layers, a.up.set(0, 0, -1), a.lookAt(new A(0, -1, 0)), this.add(a); let l = new ft(nr, ir, e, t); l.layers = this.layers, l.up.set(0, -1, 0), l.lookAt(new A(0, 0, 1)), this.add(l); let c = new ft(nr, ir, e, t); c.layers = this.layers, c.up.set(0, -1, 0), c.lookAt(new A(0, 0, -1)), this.add(c) } update(e, t) { this.parent === null && this.updateMatrixWorld(); let n = this.renderTarget, [i, r, o, a, l, c] = this.children, u = e.xr.enabled, h = e.getRenderTarget(); e.xr.enabled = !1; let f = n.texture.generateMipmaps; n.texture.generateMipmaps = !1, e.setRenderTarget(n, 0), e.render(t, i), e.setRenderTarget(n, 1), e.render(t, r), e.setRenderTarget(n, 2), e.render(t, o), e.setRenderTarget(n, 3), e.render(t, a), e.setRenderTarget(n, 4), e.render(t, l), n.texture.generateMipmaps = f, e.setRenderTarget(n, 5), e.render(t, c), e.setRenderTarget(h), e.xr.enabled = u } }, Xr = class extends ot { constructor(e, t, n, i, r, o, a, l, c, u) { e = e !== void 0 ? e : [], t = t !== void 0 ? t : Ps, a = a !== void 0 ? a : Un; super(e, t, n, i, r, o, a, l, c, u); this.flipY = !1 } get images() { return this.image } set images(e) { this.image = e } }; Xr.prototype.isCubeTexture = !0; var Xa = class extends $t {
		constructor(e, t, n) { Number.isInteger(t) && (console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"), t = n); super(e, e, t); t = t || {}, this.texture = new Xr(void 0, t.mapping, t.wrapS, t.wrapT, t.magFilter, t.minFilter, t.format, t.type, t.anisotropy, t.encoding), this.texture.isRenderTargetTexture = !0, this.texture.generateMipmaps = t.generateMipmaps !== void 0 ? t.generateMipmaps : !1, this.texture.minFilter = t.minFilter !== void 0 ? t.minFilter : Ut, this.texture._needsFlipEnvMap = !1 } fromEquirectangularTexture(e, t) {
			this.texture.type = t.type, this.texture.format = It, this.texture.encoding = t.encoding, this.texture.generateMipmaps = t.generateMipmaps, this.texture.minFilter = t.minFilter, this.texture.magFilter = t.magFilter; let n = {
				uniforms: { tEquirect: { value: null } }, vertexShader: `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`, fragmentShader: `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`}, i = new er(5, 5, 5), r = new Gt({ name: "CubemapFromEquirect", uniforms: tr(n.uniforms), vertexShader: n.vertexShader, fragmentShader: n.fragmentShader, side: Ke, blending: On }); r.uniforms.tEquirect.value = t; let o = new tt(i, r), a = t.minFilter; return t.minFilter === Ds && (t.minFilter = Ut), new ro(1, 10, this).update(e, o), t.minFilter = a, o.geometry.dispose(), o.material.dispose(), this
		} clear(e, t, n, i) { let r = e.getRenderTarget(); for (let o = 0; o < 6; o++)e.setRenderTarget(this, o), e.clear(t, n, i); e.setRenderTarget(r) }
	}; Xa.prototype.isWebGLCubeRenderTarget = !0; var Ya = new A, Jm = new A, jm = new st, an = class { constructor(e = new A(1, 0, 0), t = 0) { this.normal = e, this.constant = t } set(e, t) { return this.normal.copy(e), this.constant = t, this } setComponents(e, t, n, i) { return this.normal.set(e, t, n), this.constant = i, this } setFromNormalAndCoplanarPoint(e, t) { return this.normal.copy(e), this.constant = -t.dot(this.normal), this } setFromCoplanarPoints(e, t, n) { let i = Ya.subVectors(n, t).cross(Jm.subVectors(e, t)).normalize(); return this.setFromNormalAndCoplanarPoint(i, e), this } copy(e) { return this.normal.copy(e.normal), this.constant = e.constant, this } normalize() { let e = 1 / this.normal.length(); return this.normal.multiplyScalar(e), this.constant *= e, this } negate() { return this.constant *= -1, this.normal.negate(), this } distanceToPoint(e) { return this.normal.dot(e) + this.constant } distanceToSphere(e) { return this.distanceToPoint(e.center) - e.radius } projectPoint(e, t) { return t.copy(this.normal).multiplyScalar(-this.distanceToPoint(e)).add(e) } intersectLine(e, t) { let n = e.delta(Ya), i = this.normal.dot(n); if (i === 0) return this.distanceToPoint(e.start) === 0 ? t.copy(e.start) : null; let r = -(e.start.dot(this.normal) + this.constant) / i; return r < 0 || r > 1 ? null : t.copy(n).multiplyScalar(r).add(e.start) } intersectsLine(e) { let t = this.distanceToPoint(e.start), n = this.distanceToPoint(e.end); return t < 0 && n > 0 || n < 0 && t > 0 } intersectsBox(e) { return e.intersectsPlane(this) } intersectsSphere(e) { return e.intersectsPlane(this) } coplanarPoint(e) { return e.copy(this.normal).multiplyScalar(-this.constant) } applyMatrix4(e, t) { let n = t || jm.getNormalMatrix(e), i = this.coplanarPoint(Ya).applyMatrix4(e), r = this.normal.applyMatrix3(n).normalize(); return this.constant = -i.dot(r), this } translate(e) { return this.constant -= e.dot(this.normal), this } equals(e) { return e.normal.equals(this.normal) && e.constant === this.constant } clone() { return new this.constructor().copy(this) } }; an.prototype.isPlane = !0; var rr = new wi, so = new A, Yr = class { constructor(e = new an, t = new an, n = new an, i = new an, r = new an, o = new an) { this.planes = [e, t, n, i, r, o] } set(e, t, n, i, r, o) { let a = this.planes; return a[0].copy(e), a[1].copy(t), a[2].copy(n), a[3].copy(i), a[4].copy(r), a[5].copy(o), this } copy(e) { let t = this.planes; for (let n = 0; n < 6; n++)t[n].copy(e.planes[n]); return this } setFromProjectionMatrix(e) { let t = this.planes, n = e.elements, i = n[0], r = n[1], o = n[2], a = n[3], l = n[4], c = n[5], u = n[6], h = n[7], f = n[8], d = n[9], g = n[10], m = n[11], x = n[12], p = n[13], _ = n[14], w = n[15]; return t[0].setComponents(a - i, h - l, m - f, w - x).normalize(), t[1].setComponents(a + i, h + l, m + f, w + x).normalize(), t[2].setComponents(a + r, h + c, m + d, w + p).normalize(), t[3].setComponents(a - r, h - c, m - d, w - p).normalize(), t[4].setComponents(a - o, h - u, m - g, w - _).normalize(), t[5].setComponents(a + o, h + u, m + g, w + _).normalize(), this } intersectsObject(e) { let t = e.geometry; return t.boundingSphere === null && t.computeBoundingSphere(), rr.copy(t.boundingSphere).applyMatrix4(e.matrixWorld), this.intersectsSphere(rr) } intersectsSprite(e) { return rr.center.set(0, 0, 0), rr.radius = .7071067811865476, rr.applyMatrix4(e.matrixWorld), this.intersectsSphere(rr) } intersectsSphere(e) { let t = this.planes, n = e.center, i = -e.radius; for (let r = 0; r < 6; r++)if (t[r].distanceToPoint(n) < i) return !1; return !0 } intersectsBox(e) { let t = this.planes; for (let n = 0; n < 6; n++) { let i = t[n]; if (so.x = i.normal.x > 0 ? e.max.x : e.min.x, so.y = i.normal.y > 0 ? e.max.y : e.min.y, so.z = i.normal.z > 0 ? e.max.z : e.min.z, i.distanceToPoint(so) < 0) return !1 } return !0 } containsPoint(e) { let t = this.planes; for (let n = 0; n < 6; n++)if (t[n].distanceToPoint(e) < 0) return !1; return !0 } clone() { return new this.constructor().copy(this) } }; function Au() { let s = null, e = !1, t = null, n = null; function i(r, o) { t(r, o), n = s.requestAnimationFrame(i) } return { start: function () { e !== !0 && t !== null && (n = s.requestAnimationFrame(i), e = !0) }, stop: function () { s.cancelAnimationFrame(n), e = !1 }, setAnimationLoop: function (r) { t = r }, setContext: function (r) { s = r } } } function $m(s, e) { let t = e.isWebGL2, n = new WeakMap; function i(c, u) { let h = c.array, f = c.usage, d = s.createBuffer(); s.bindBuffer(u, d), s.bufferData(u, h, f), c.onUploadCallback(); let g = 5126; return h instanceof Float32Array ? g = 5126 : h instanceof Float64Array ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.") : h instanceof Uint16Array ? c.isFloat16BufferAttribute ? t ? g = 5131 : console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.") : g = 5123 : h instanceof Int16Array ? g = 5122 : h instanceof Uint32Array ? g = 5125 : h instanceof Int32Array ? g = 5124 : h instanceof Int8Array ? g = 5120 : (h instanceof Uint8Array || h instanceof Uint8ClampedArray) && (g = 5121), { buffer: d, type: g, bytesPerElement: h.BYTES_PER_ELEMENT, version: c.version } } function r(c, u, h) { let f = u.array, d = u.updateRange; s.bindBuffer(h, c), d.count === -1 ? s.bufferSubData(h, 0, f) : (t ? s.bufferSubData(h, d.offset * f.BYTES_PER_ELEMENT, f, d.offset, d.count) : s.bufferSubData(h, d.offset * f.BYTES_PER_ELEMENT, f.subarray(d.offset, d.offset + d.count)), d.count = -1) } function o(c) { return c.isInterleavedBufferAttribute && (c = c.data), n.get(c) } function a(c) { c.isInterleavedBufferAttribute && (c = c.data); let u = n.get(c); u && (s.deleteBuffer(u.buffer), n.delete(c)) } function l(c, u) { if (c.isGLBufferAttribute) { let f = n.get(c); (!f || f.version < c.version) && n.set(c, { buffer: c.buffer, type: c.type, bytesPerElement: c.elementSize, version: c.version }); return } c.isInterleavedBufferAttribute && (c = c.data); let h = n.get(c); h === void 0 ? n.set(c, i(c, u)) : h.version < c.version && (r(h.buffer, c, u), h.version = c.version) } return { get: o, remove: a, update: l } } var Jn = class extends We { constructor(e = 1, t = 1, n = 1, i = 1) { super(); this.type = "PlaneGeometry", this.parameters = { width: e, height: t, widthSegments: n, heightSegments: i }; let r = e / 2, o = t / 2, a = Math.floor(n), l = Math.floor(i), c = a + 1, u = l + 1, h = e / a, f = t / l, d = [], g = [], m = [], x = []; for (let p = 0; p < u; p++) { let _ = p * f - o; for (let w = 0; w < c; w++) { let v = w * h - r; g.push(v, -_, 0), m.push(0, 0, 1), x.push(w / a), x.push(1 - p / l) } } for (let p = 0; p < l; p++)for (let _ = 0; _ < a; _++) { let w = _ + c * p, v = _ + c * (p + 1), b = _ + 1 + c * (p + 1), T = _ + 1 + c * p; d.push(w, v, T), d.push(v, b, T) } this.setIndex(d), this.setAttribute("position", new et(g, 3)), this.setAttribute("normal", new et(m, 3)), this.setAttribute("uv", new et(x, 2)) } static fromJSON(e) { return new Jn(e.width, e.height, e.widthSegments, e.heightSegments) } }, Qm = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vUv ).g;
#endif`, Km = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, eg = `#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`, tg = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`, ng = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`, ig = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`, rg = "vec3 transformed = vec3( position );", sg = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`, og = `vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
vec3 BRDF_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( incidentLight.direction + viewDir );
	float dotNL = saturate( dot( normal, incidentLight.direction ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );
	float dotNH = saturate( dot( geometry.normal, halfDir ) );
	float dotVH = saturate( dot( geometry.viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float NoH ) {
	float invAlpha = 1.0 / roughness;
	float cos2h = NoH * NoH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float NoV, float NoL ) {
	return saturate( 1.0 / ( 4.0 * ( NoL + NoV - NoL * NoV ) ) );
}
vec3 BRDF_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {
	vec3 N = geometry.normal;
	vec3 V = geometry.viewDir;
	vec3 H = normalize( V + L );
	float dotNH = saturate( dot( N, H ) );
	return specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );
}
#endif`, ag = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vUv );
		vec2 dSTdy = dFdy( vUv );
		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );
		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`, lg = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`, cg = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`, ug = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`, hg = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`, fg = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`, dg = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`, pg = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`, mg = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`, gg = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float linearToRelativeLuminance( const in vec3 color ) {
	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );
	return dot( weights, color.rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}`, _g = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_maxMipLevel 8.0
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_maxTileSize 256.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		float texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );
		vec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );
		vec2 f = fract( uv );
		uv += 0.5 - f;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		if ( mipInt < cubeUV_maxMipLevel ) {
			uv.y += 2.0 * cubeUV_maxTileSize;
		}
		uv.y += filterInt * 2.0 * cubeUV_minTileSize;
		uv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );
		uv *= texelSize;
		vec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.x += texelSize;
		vec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.y += texelSize;
		vec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.x -= texelSize;
		vec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		vec3 tm = mix( tl, tr, f.x );
		vec3 bm = mix( bl, br, f.x );
		return mix( tm, bm, f.y );
	}
	#define r0 1.0
	#define v0 0.339
	#define m0 - 2.0
	#define r1 0.8
	#define v1 0.276
	#define m1 - 1.0
	#define r4 0.4
	#define v4 0.046
	#define m4 2.0
	#define r5 0.305
	#define v5 0.016
	#define m5 3.0
	#define r6 0.21
	#define v6 0.0038
	#define m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= r1 ) {
			mip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;
		} else if ( roughness >= r4 ) {
			mip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;
		} else if ( roughness >= r5 ) {
			mip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;
		} else if ( roughness >= r6 ) {
			mip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`, xg = `vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`, yg = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`, vg = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );
#endif`, wg = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vUv );
	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`, bg = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`, Mg = "gl_FragColor = linearToOutputTexel( gl_FragColor );", Sg = `
vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 GammaToLinear( in vec4 value, in float gammaFactor ) {
	return vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );
}
vec4 LinearToGamma( in vec4 value, in float gammaFactor ) {
	return vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );
}
vec4 sRGBToLinear( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}
vec4 RGBEToLinear( in vec4 value ) {
	return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );
}
vec4 LinearToRGBE( in vec4 value ) {
	float maxComponent = max( max( value.r, value.g ), value.b );
	float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );
	return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );
}
vec4 RGBMToLinear( in vec4 value, in float maxRange ) {
	return vec4( value.rgb * value.a * maxRange, 1.0 );
}
vec4 LinearToRGBM( in vec4 value, in float maxRange ) {
	float maxRGB = max( value.r, max( value.g, value.b ) );
	float M = clamp( maxRGB / maxRange, 0.0, 1.0 );
	M = ceil( M * 255.0 ) / 255.0;
	return vec4( value.rgb / ( M * maxRange ), M );
}
vec4 RGBDToLinear( in vec4 value, in float maxRange ) {
	return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );
}
vec4 LinearToRGBD( in vec4 value, in float maxRange ) {
	float maxRGB = max( value.r, max( value.g, value.b ) );
	float D = max( maxRange / maxRGB, 1.0 );
	D = clamp( floor( D ) / 255.0, 0.0, 1.0 );
	return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );
}
const mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );
vec4 LinearToLogLuv( in vec4 value ) {
	vec3 Xp_Y_XYZp = cLogLuvM * value.rgb;
	Xp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );
	vec4 vResult;
	vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;
	float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;
	vResult.w = fract( Le );
	vResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;
	return vResult;
}
const mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );
vec4 LogLuvToLinear( in vec4 value ) {
	float Le = value.z * 255.0 + value.w;
	vec3 Xp_Y_XYZp;
	Xp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );
	Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;
	Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;
	vec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;
	return vec4( max( vRGB, 0.0 ), 1.0 );
}`, Tg = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
		envColor = envMapTexelToLinear( envColor );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`, Eg = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform int maxMipLevel;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`, Ag = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`, Lg = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`, Cg = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`, Pg = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`, Rg = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`, Ig = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`, Dg = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`, Fg = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return texture2D( gradientMap, coord ).rgb;
	#else
		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );
	#endif
}`, Bg = `#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vUv2 );
	vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
	#ifndef PHYSICALLY_CORRECT_LIGHTS
		lightMapIrradiance *= PI;
	#endif
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`, Ng = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`, zg = `vec3 diffuse = vec3( 1.0 );
GeometricContext geometry;
geometry.position = mvPosition.xyz;
geometry.normal = normalize( transformedNormal );
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );
GeometricContext backGeometry;
backGeometry.position = geometry.position;
backGeometry.normal = -geometry.normal;
backGeometry.viewDir = geometry.viewDir;
vLightFront = vec3( 0.0 );
vIndirectFront = vec3( 0.0 );
#ifdef DOUBLE_SIDED
	vLightBack = vec3( 0.0 );
	vIndirectBack = vec3( 0.0 );
#endif
IncidentLight directLight;
float dotNL;
vec3 directLightColor_Diffuse;
vIndirectFront += getAmbientLightIrradiance( ambientLightColor );
vIndirectFront += getLightProbeIrradiance( lightProbe, geometry );
#ifdef DOUBLE_SIDED
	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );
	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );
#endif
#if NUM_POINT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		getPointLightInfo( pointLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_SPOT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		getSpotLightInfo( spotLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_DIR_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		getDirectionalLightInfo( directionalLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_HEMI_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );
		#ifdef DOUBLE_SIDED
			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );
		#endif
	}
	#pragma unroll_loop_end
#endif`, Og = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {
	vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( PHYSICALLY_CORRECT_LIGHTS )
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#else
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometry.position;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometry.position;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {
		float dotNL = dot( geometry.normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`, Ug = `#if defined( USE_ENVMAP )
	#ifdef ENVMAP_MODE_REFRACTION
		uniform float refractionRatio;
	#endif
	vec3 getIBLIrradiance( const in GeometricContext geometry ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 reflectVec;
			#ifdef ENVMAP_MODE_REFLECTION
				reflectVec = reflect( - viewDir, normal );
				reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			#else
				reflectVec = refract( - viewDir, normal, refractionRatio );
			#endif
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
#endif`, kg = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`, Hg = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon
#define Material_LightProbeLOD( material )	(0)`, Gg = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`, Vg = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong
#define Material_LightProbeLOD( material )	(0)`, Wg = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	#ifdef SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularTintFactor = specularTint;
		#ifdef USE_SPECULARINTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;
		#endif
		#ifdef USE_SPECULARTINTMAP
			specularTintFactor *= specularTintMapTexelToLinear( texture2D( specularTintMap, vUv ) ).rgb;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularTintFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularTintFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_SHEEN
	material.sheenTint = sheenTint;
#endif`, qg = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenTint;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	vec3 FssEss = specularColor * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		reflectedLight.directSpecular += irradiance * BRDF_Sheen( material.roughness, directLight.direction, geometry, material.sheenTint );
	#else
		reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );
	#endif
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`, Xg = `
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef USE_CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`, Yg = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vUv2 );
		vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
		#ifndef PHYSICALLY_CORRECT_LIGHTS
			lightMapIrradiance *= PI;
		#endif
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometry );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`, Zg = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`, Jg = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`, jg = `#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, $g = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`, Qg = `#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`, Kg = `#ifdef USE_MAP
	vec4 texelColor = texture2D( map, vUv );
	texelColor = mapTexelToLinear( texelColor );
	diffuseColor *= texelColor;
#endif`, e0 = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`, t0 = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
#endif
#ifdef USE_MAP
	vec4 mapTexel = texture2D( map, uv );
	diffuseColor *= mapTexelToLinear( mapTexel );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`, n0 = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	uniform mat3 uvTransform;
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, i0 = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vUv );
	metalnessFactor *= texelMetalness.b;
#endif`, r0 = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`, s0 = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
	objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
	objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
	objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
#endif`, o0 = `#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifndef USE_MORPHNORMALS
		uniform float morphTargetInfluences[ 8 ];
	#else
		uniform float morphTargetInfluences[ 4 ];
	#endif
#endif`, a0 = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	transformed += morphTarget0 * morphTargetInfluences[ 0 ];
	transformed += morphTarget1 * morphTargetInfluences[ 1 ];
	transformed += morphTarget2 * morphTargetInfluences[ 2 ];
	transformed += morphTarget3 * morphTargetInfluences[ 3 ];
	#ifndef USE_MORPHNORMALS
		transformed += morphTarget4 * morphTargetInfluences[ 4 ];
		transformed += morphTarget5 * morphTargetInfluences[ 5 ];
		transformed += morphTarget6 * morphTargetInfluences[ 6 ];
		transformed += morphTarget7 * morphTargetInfluences[ 7 ];
	#endif
#endif`, l0 = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );
	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	#ifdef USE_TANGENT
		vec3 tangent = normalize( vTangent );
		vec3 bitangent = normalize( vBitangent );
		#ifdef DOUBLE_SIDED
			tangent = tangent * faceDirection;
			bitangent = bitangent * faceDirection;
		#endif
		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )
			mat3 vTBN = mat3( tangent, bitangent, normal );
		#endif
	#endif
#endif
vec3 geometryNormal = normal;`, c0 = `#ifdef OBJECTSPACE_NORMALMAP
	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( TANGENTSPACE_NORMALMAP )
	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	#ifdef USE_TANGENT
		normal = normalize( vTBN * mapN );
	#else
		normal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );
	#endif
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`, u0 = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, h0 = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, f0 = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`, d0 = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef OBJECTSPACE_NORMALMAP
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {
		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );
		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );
		vec2 st0 = dFdx( vUv.st );
		vec2 st1 = dFdy( vUv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );
		return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );
	}
#endif`, p0 = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`, m0 = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	#ifdef USE_TANGENT
		clearcoatNormal = normalize( vTBN * clearcoatMapN );
	#else
		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );
	#endif
#endif`, g0 = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif`, _0 = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= transmissionAlpha + 0.1;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`, x0 = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {
	return linearClipZ * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * invClipZ - far );
}`, y0 = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`, v0 = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`, w0 = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`, b0 = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`, M0 = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vUv );
	roughnessFactor *= texelRoughness.g;
#endif`, S0 = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`, T0 = `#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );
		bool inFrustum = all( inFrustumVec );
		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );
		bool frustumTest = all( frustumTestVec );
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`, E0 = `#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`, A0 = `#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0
		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		vec4 shadowWorldPosition;
	#endif
	#if NUM_DIR_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );
		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
#endif`, L0 = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`, C0 = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`, P0 = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	#ifdef BONE_TEXTURE
		uniform highp sampler2D boneTexture;
		uniform int boneTextureSize;
		mat4 getBoneMatrix( const in float i ) {
			float j = i * 4.0;
			float x = mod( j, float( boneTextureSize ) );
			float y = floor( j / float( boneTextureSize ) );
			float dx = 1.0 / float( boneTextureSize );
			float dy = 1.0 / float( boneTextureSize );
			y = dy * ( y + 0.5 );
			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
			mat4 bone = mat4( v1, v2, v3, v4 );
			return bone;
		}
	#else
		uniform mat4 boneMatrices[ MAX_BONES ];
		mat4 getBoneMatrix( const in float i ) {
			mat4 bone = boneMatrices[ int(i) ];
			return bone;
		}
	#endif
#endif`, R0 = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`, I0 = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`, D0 = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`, F0 = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`, B0 = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`, N0 = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`, z0 = `#ifdef USE_TRANSMISSION
	float transmissionAlpha = 1.0;
	float transmissionFactor = transmission;
	float thicknessFactor = thickness;
	#ifdef USE_TRANSMISSIONMAP
		transmissionFactor *= texture2D( transmissionMap, vUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		thicknessFactor *= texture2D( thicknessMap, vUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmission = getIBLVolumeRefraction(
		n, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,
		attenuationTint, attenuationDistance );
	totalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );
	transmissionAlpha = transmission.a;
#endif`, O0 = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationTint;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	vec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( float roughness, float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {
		float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		#ifdef TEXTURE_LOD_EXT
			return texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#else
			return texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#endif
	}
	vec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {
		if ( attenuationDistance == 0.0 ) {
			return radiance;
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;
		}
	}
	vec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,
		vec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,
		vec3 attenuationColor, float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
	}
#endif`, U0 = `#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )
	varying vec2 vUv;
#endif`, k0 = `#ifdef USE_UV
	#ifdef UVS_VERTEX_ONLY
		vec2 vUv;
	#else
		varying vec2 vUv;
	#endif
	uniform mat3 uvTransform;
#endif`, H0 = `#ifdef USE_UV
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
#endif`, G0 = `#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	varying vec2 vUv2;
#endif`, V0 = `#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	attribute vec2 uv2;
	varying vec2 vUv2;
	uniform mat3 uv2Transform;
#endif`, W0 = `#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;
#endif`, q0 = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`, X0 = `uniform sampler2D t2D;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	gl_FragColor = mapTexelToLinear( texColor );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`, Y0 = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`, Z0 = `#include <envmap_common_pars_fragment>
uniform float opacity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	vec3 vReflect = vWorldDirection;
	#include <envmap_fragment>
	gl_FragColor = envColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`, J0 = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, j0 = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`, $0 = `#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`, Q0 = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`, K0 = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`, e_ = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	vec4 texColor = texture2D( tEquirect, sampleUV );
	gl_FragColor = mapTexelToLinear( texColor );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`, t_ = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`, n_ = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, i_ = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, r_ = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel= texture2D( lightMap, vUv2 );
		reflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, s_ = `#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`, o_ = `uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <fog_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <emissivemap_fragment>
	#ifdef DOUBLE_SIDED
		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;
	#else
		reflectedLight.indirectDiffuse += vIndirectFront;
	#endif
	#include <lightmap_fragment>
	reflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );
	#ifdef DOUBLE_SIDED
		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;
	#else
		reflectedLight.directDiffuse = vLightFront;
	#endif
	reflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, a_ = `#define LAMBERT
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <bsdfs>
#include <lights_pars_begin>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <lights_lambert_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, l_ = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
		matcapColor = matcapTexelToLinear( matcapColor );
	#else
		vec4 matcapColor = vec4( 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, c_ = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`, u_ = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
}`, h_ = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	vViewPosition = - mvPosition.xyz;
#endif
}`, f_ = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, d_ = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, p_ = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularTint;
	#ifdef USE_SPECULARINTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
	#ifdef USE_SPECULARTINTMAP
		uniform sampler2D specularTintMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenTint;
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <bsdfs>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - clearcoat * Fcc ) + clearcoatSpecular * clearcoat;
	#endif
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, m_ = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`, g_ = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, __ = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, x_ = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, y_ = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`, v_ = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`, w_ = `#include <common>
#include <fog_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <begin_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, b_ = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`, M_ = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, Ce = { alphamap_fragment: Qm, alphamap_pars_fragment: Km, alphatest_fragment: eg, alphatest_pars_fragment: tg, aomap_fragment: ng, aomap_pars_fragment: ig, begin_vertex: rg, beginnormal_vertex: sg, bsdfs: og, bumpmap_pars_fragment: ag, clipping_planes_fragment: lg, clipping_planes_pars_fragment: cg, clipping_planes_pars_vertex: ug, clipping_planes_vertex: hg, color_fragment: fg, color_pars_fragment: dg, color_pars_vertex: pg, color_vertex: mg, common: gg, cube_uv_reflection_fragment: _g, defaultnormal_vertex: xg, displacementmap_pars_vertex: yg, displacementmap_vertex: vg, emissivemap_fragment: wg, emissivemap_pars_fragment: bg, encodings_fragment: Mg, encodings_pars_fragment: Sg, envmap_fragment: Tg, envmap_common_pars_fragment: Eg, envmap_pars_fragment: Ag, envmap_pars_vertex: Lg, envmap_physical_pars_fragment: Ug, envmap_vertex: Cg, fog_vertex: Pg, fog_pars_vertex: Rg, fog_fragment: Ig, fog_pars_fragment: Dg, gradientmap_pars_fragment: Fg, lightmap_fragment: Bg, lightmap_pars_fragment: Ng, lights_lambert_vertex: zg, lights_pars_begin: Og, lights_toon_fragment: kg, lights_toon_pars_fragment: Hg, lights_phong_fragment: Gg, lights_phong_pars_fragment: Vg, lights_physical_fragment: Wg, lights_physical_pars_fragment: qg, lights_fragment_begin: Xg, lights_fragment_maps: Yg, lights_fragment_end: Zg, logdepthbuf_fragment: Jg, logdepthbuf_pars_fragment: jg, logdepthbuf_pars_vertex: $g, logdepthbuf_vertex: Qg, map_fragment: Kg, map_pars_fragment: e0, map_particle_fragment: t0, map_particle_pars_fragment: n0, metalnessmap_fragment: i0, metalnessmap_pars_fragment: r0, morphnormal_vertex: s0, morphtarget_pars_vertex: o0, morphtarget_vertex: a0, normal_fragment_begin: l0, normal_fragment_maps: c0, normal_pars_fragment: u0, normal_pars_vertex: h0, normal_vertex: f0, normalmap_pars_fragment: d0, clearcoat_normal_fragment_begin: p0, clearcoat_normal_fragment_maps: m0, clearcoat_pars_fragment: g0, output_fragment: _0, packing: x0, premultiplied_alpha_fragment: y0, project_vertex: v0, dithering_fragment: w0, dithering_pars_fragment: b0, roughnessmap_fragment: M0, roughnessmap_pars_fragment: S0, shadowmap_pars_fragment: T0, shadowmap_pars_vertex: E0, shadowmap_vertex: A0, shadowmask_pars_fragment: L0, skinbase_vertex: C0, skinning_pars_vertex: P0, skinning_vertex: R0, skinnormal_vertex: I0, specularmap_fragment: D0, specularmap_pars_fragment: F0, tonemapping_fragment: B0, tonemapping_pars_fragment: N0, transmission_fragment: z0, transmission_pars_fragment: O0, uv_pars_fragment: U0, uv_pars_vertex: k0, uv_vertex: H0, uv2_pars_fragment: G0, uv2_pars_vertex: V0, uv2_vertex: W0, worldpos_vertex: q0, background_frag: X0, background_vert: Y0, cube_frag: Z0, cube_vert: J0, depth_frag: j0, depth_vert: $0, distanceRGBA_frag: Q0, distanceRGBA_vert: K0, equirect_frag: e_, equirect_vert: t_, linedashed_frag: n_, linedashed_vert: i_, meshbasic_frag: r_, meshbasic_vert: s_, meshlambert_frag: o_, meshlambert_vert: a_, meshmatcap_frag: l_, meshmatcap_vert: c_, meshnormal_frag: u_, meshnormal_vert: h_, meshphong_frag: f_, meshphong_vert: d_, meshphysical_frag: p_, meshphysical_vert: m_, meshtoon_frag: g_, meshtoon_vert: __, points_frag: x_, points_vert: y_, shadow_frag: v_, shadow_vert: w_, sprite_frag: b_, sprite_vert: M_ }, te = { common: { diffuse: { value: new se(16777215) }, opacity: { value: 1 }, map: { value: null }, uvTransform: { value: new st }, uv2Transform: { value: new st }, alphaMap: { value: null }, alphaTest: { value: 0 } }, specularmap: { specularMap: { value: null } }, envmap: { envMap: { value: null }, flipEnvMap: { value: -1 }, reflectivity: { value: 1 }, ior: { value: 1.5 }, refractionRatio: { value: .98 }, maxMipLevel: { value: 0 } }, aomap: { aoMap: { value: null }, aoMapIntensity: { value: 1 } }, lightmap: { lightMap: { value: null }, lightMapIntensity: { value: 1 } }, emissivemap: { emissiveMap: { value: null } }, bumpmap: { bumpMap: { value: null }, bumpScale: { value: 1 } }, normalmap: { normalMap: { value: null }, normalScale: { value: new Y(1, 1) } }, displacementmap: { displacementMap: { value: null }, displacementScale: { value: 1 }, displacementBias: { value: 0 } }, roughnessmap: { roughnessMap: { value: null } }, metalnessmap: { metalnessMap: { value: null } }, gradientmap: { gradientMap: { value: null } }, fog: { fogDensity: { value: 25e-5 }, fogNear: { value: 1 }, fogFar: { value: 2e3 }, fogColor: { value: new se(16777215) } }, lights: { ambientLightColor: { value: [] }, lightProbe: { value: [] }, directionalLights: { value: [], properties: { direction: {}, color: {} } }, directionalLightShadows: { value: [], properties: { shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {} } }, directionalShadowMap: { value: [] }, directionalShadowMatrix: { value: [] }, spotLights: { value: [], properties: { color: {}, position: {}, direction: {}, distance: {}, coneCos: {}, penumbraCos: {}, decay: {} } }, spotLightShadows: { value: [], properties: { shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {} } }, spotShadowMap: { value: [] }, spotShadowMatrix: { value: [] }, pointLights: { value: [], properties: { color: {}, position: {}, decay: {}, distance: {} } }, pointLightShadows: { value: [], properties: { shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {}, shadowCameraNear: {}, shadowCameraFar: {} } }, pointShadowMap: { value: [] }, pointShadowMatrix: { value: [] }, hemisphereLights: { value: [], properties: { direction: {}, skyColor: {}, groundColor: {} } }, rectAreaLights: { value: [], properties: { color: {}, position: {}, width: {}, height: {} } }, ltc_1: { value: null }, ltc_2: { value: null } }, points: { diffuse: { value: new se(16777215) }, opacity: { value: 1 }, size: { value: 1 }, scale: { value: 1 }, map: { value: null }, alphaMap: { value: null }, alphaTest: { value: 0 }, uvTransform: { value: new st } }, sprite: { diffuse: { value: new se(16777215) }, opacity: { value: 1 }, center: { value: new Y(.5, .5) }, rotation: { value: 0 }, map: { value: null }, alphaMap: { value: null }, alphaTest: { value: 0 }, uvTransform: { value: new st } } }, ln = { basic: { uniforms: _t([te.common, te.specularmap, te.envmap, te.aomap, te.lightmap, te.fog]), vertexShader: Ce.meshbasic_vert, fragmentShader: Ce.meshbasic_frag }, lambert: { uniforms: _t([te.common, te.specularmap, te.envmap, te.aomap, te.lightmap, te.emissivemap, te.fog, te.lights, { emissive: { value: new se(0) } }]), vertexShader: Ce.meshlambert_vert, fragmentShader: Ce.meshlambert_frag }, phong: { uniforms: _t([te.common, te.specularmap, te.envmap, te.aomap, te.lightmap, te.emissivemap, te.bumpmap, te.normalmap, te.displacementmap, te.fog, te.lights, { emissive: { value: new se(0) }, specular: { value: new se(1118481) }, shininess: { value: 30 } }]), vertexShader: Ce.meshphong_vert, fragmentShader: Ce.meshphong_frag }, standard: { uniforms: _t([te.common, te.envmap, te.aomap, te.lightmap, te.emissivemap, te.bumpmap, te.normalmap, te.displacementmap, te.roughnessmap, te.metalnessmap, te.fog, te.lights, { emissive: { value: new se(0) }, roughness: { value: 1 }, metalness: { value: 0 }, envMapIntensity: { value: 1 } }]), vertexShader: Ce.meshphysical_vert, fragmentShader: Ce.meshphysical_frag }, toon: { uniforms: _t([te.common, te.aomap, te.lightmap, te.emissivemap, te.bumpmap, te.normalmap, te.displacementmap, te.gradientmap, te.fog, te.lights, { emissive: { value: new se(0) } }]), vertexShader: Ce.meshtoon_vert, fragmentShader: Ce.meshtoon_frag }, matcap: { uniforms: _t([te.common, te.bumpmap, te.normalmap, te.displacementmap, te.fog, { matcap: { value: null } }]), vertexShader: Ce.meshmatcap_vert, fragmentShader: Ce.meshmatcap_frag }, points: { uniforms: _t([te.points, te.fog]), vertexShader: Ce.points_vert, fragmentShader: Ce.points_frag }, dashed: { uniforms: _t([te.common, te.fog, { scale: { value: 1 }, dashSize: { value: 1 }, totalSize: { value: 2 } }]), vertexShader: Ce.linedashed_vert, fragmentShader: Ce.linedashed_frag }, depth: { uniforms: _t([te.common, te.displacementmap]), vertexShader: Ce.depth_vert, fragmentShader: Ce.depth_frag }, normal: { uniforms: _t([te.common, te.bumpmap, te.normalmap, te.displacementmap, { opacity: { value: 1 } }]), vertexShader: Ce.meshnormal_vert, fragmentShader: Ce.meshnormal_frag }, sprite: { uniforms: _t([te.sprite, te.fog]), vertexShader: Ce.sprite_vert, fragmentShader: Ce.sprite_frag }, background: { uniforms: { uvTransform: { value: new st }, t2D: { value: null } }, vertexShader: Ce.background_vert, fragmentShader: Ce.background_frag }, cube: { uniforms: _t([te.envmap, { opacity: { value: 1 } }]), vertexShader: Ce.cube_vert, fragmentShader: Ce.cube_frag }, equirect: { uniforms: { tEquirect: { value: null } }, vertexShader: Ce.equirect_vert, fragmentShader: Ce.equirect_frag }, distanceRGBA: { uniforms: _t([te.common, te.displacementmap, { referencePosition: { value: new A }, nearDistance: { value: 1 }, farDistance: { value: 1e3 } }]), vertexShader: Ce.distanceRGBA_vert, fragmentShader: Ce.distanceRGBA_frag }, shadow: { uniforms: _t([te.lights, te.fog, { color: { value: new se(0) }, opacity: { value: 1 } }]), vertexShader: Ce.shadow_vert, fragmentShader: Ce.shadow_frag } }; ln.physical = { uniforms: _t([ln.standard.uniforms, { clearcoat: { value: 0 }, clearcoatMap: { value: null }, clearcoatRoughness: { value: 0 }, clearcoatRoughnessMap: { value: null }, clearcoatNormalScale: { value: new Y(1, 1) }, clearcoatNormalMap: { value: null }, sheenTint: { value: new se(0) }, transmission: { value: 0 }, transmissionMap: { value: null }, transmissionSamplerSize: { value: new Y }, transmissionSamplerMap: { value: null }, thickness: { value: 0 }, thicknessMap: { value: null }, attenuationDistance: { value: 0 }, attenuationTint: { value: new se(0) }, specularIntensity: { value: 0 }, specularIntensityMap: { value: null }, specularTint: { value: new se(1, 1, 1) }, specularTintMap: { value: null } }]), vertexShader: Ce.meshphysical_vert, fragmentShader: Ce.meshphysical_frag }; function S_(s, e, t, n, i) { let r = new se(0), o = 0, a, l, c = null, u = 0, h = null; function f(g, m) { let x = !1, p = m.isScene === !0 ? m.background : null; p && p.isTexture && (p = e.get(p)); let _ = s.xr, w = _.getSession && _.getSession(); w && w.environmentBlendMode === "additive" && (p = null), p === null ? d(r, o) : p && p.isColor && (d(p, 1), x = !0), (s.autoClear || x) && s.clear(s.autoClearColor, s.autoClearDepth, s.autoClearStencil), p && (p.isCubeTexture || p.mapping === Is) ? (l === void 0 && (l = new tt(new er(1, 1, 1), new Gt({ name: "BackgroundCubeMaterial", uniforms: tr(ln.cube.uniforms), vertexShader: ln.cube.vertexShader, fragmentShader: ln.cube.fragmentShader, side: Ke, depthTest: !1, depthWrite: !1, fog: !1 })), l.geometry.deleteAttribute("normal"), l.geometry.deleteAttribute("uv"), l.onBeforeRender = function (v, b, T) { this.matrixWorld.copyPosition(T.matrixWorld) }, Object.defineProperty(l.material, "envMap", { get: function () { return this.uniforms.envMap.value } }), n.update(l)), l.material.uniforms.envMap.value = p, l.material.uniforms.flipEnvMap.value = p.isCubeTexture && p.isRenderTargetTexture === !1 ? -1 : 1, (c !== p || u !== p.version || h !== s.toneMapping) && (l.material.needsUpdate = !0, c = p, u = p.version, h = s.toneMapping), g.unshift(l, l.geometry, l.material, 0, 0, null)) : p && p.isTexture && (a === void 0 && (a = new tt(new Jn(2, 2), new Gt({ name: "BackgroundMaterial", uniforms: tr(ln.background.uniforms), vertexShader: ln.background.vertexShader, fragmentShader: ln.background.fragmentShader, side: zr, depthTest: !1, depthWrite: !1, fog: !1 })), a.geometry.deleteAttribute("normal"), Object.defineProperty(a.material, "map", { get: function () { return this.uniforms.t2D.value } }), n.update(a)), a.material.uniforms.t2D.value = p, p.matrixAutoUpdate === !0 && p.updateMatrix(), a.material.uniforms.uvTransform.value.copy(p.matrix), (c !== p || u !== p.version || h !== s.toneMapping) && (a.material.needsUpdate = !0, c = p, u = p.version, h = s.toneMapping), g.unshift(a, a.geometry, a.material, 0, 0, null)) } function d(g, m) { t.buffers.color.setClear(g.r, g.g, g.b, m, i) } return { getClearColor: function () { return r }, setClearColor: function (g, m = 1) { r.set(g), o = m, d(r, o) }, getClearAlpha: function () { return o }, setClearAlpha: function (g) { o = g, d(r, o) }, render: f } } function T_(s, e, t, n) { let i = s.getParameter(34921), r = n.isWebGL2 ? null : e.get("OES_vertex_array_object"), o = n.isWebGL2 || r !== null, a = {}, l = m(null), c = l; function u(z, F, U, N, k) { let Q = !1; if (o) { let oe = g(N, U, F); c !== oe && (c = oe, f(c.object)), Q = x(N, k), Q && p(N, k) } else { let oe = F.wireframe === !0; (c.geometry !== N.id || c.program !== U.id || c.wireframe !== oe) && (c.geometry = N.id, c.program = U.id, c.wireframe = oe, Q = !0) } z.isInstancedMesh === !0 && (Q = !0), k !== null && t.update(k, 34963), Q && (y(z, F, U, N), k !== null && s.bindBuffer(34963, t.get(k).buffer)) } function h() { return n.isWebGL2 ? s.createVertexArray() : r.createVertexArrayOES() } function f(z) { return n.isWebGL2 ? s.bindVertexArray(z) : r.bindVertexArrayOES(z) } function d(z) { return n.isWebGL2 ? s.deleteVertexArray(z) : r.deleteVertexArrayOES(z) } function g(z, F, U) { let N = U.wireframe === !0, k = a[z.id]; k === void 0 && (k = {}, a[z.id] = k); let Q = k[F.id]; Q === void 0 && (Q = {}, k[F.id] = Q); let oe = Q[N]; return oe === void 0 && (oe = m(h()), Q[N] = oe), oe } function m(z) { let F = [], U = [], N = []; for (let k = 0; k < i; k++)F[k] = 0, U[k] = 0, N[k] = 0; return { geometry: null, program: null, wireframe: !1, newAttributes: F, enabledAttributes: U, attributeDivisors: N, object: z, attributes: {}, index: null } } function x(z, F) { let U = c.attributes, N = z.attributes, k = 0; for (let Q in N) { let oe = U[Q], ue = N[Q]; if (oe === void 0 || oe.attribute !== ue || oe.data !== ue.data) return !0; k++ } return c.attributesNum !== k || c.index !== F } function p(z, F) { let U = {}, N = z.attributes, k = 0; for (let Q in N) { let oe = N[Q], ue = {}; ue.attribute = oe, oe.data && (ue.data = oe.data), U[Q] = ue, k++ } c.attributes = U, c.attributesNum = k, c.index = F } function _() { let z = c.newAttributes; for (let F = 0, U = z.length; F < U; F++)z[F] = 0 } function w(z) { v(z, 0) } function v(z, F) { let U = c.newAttributes, N = c.enabledAttributes, k = c.attributeDivisors; U[z] = 1, N[z] === 0 && (s.enableVertexAttribArray(z), N[z] = 1), k[z] !== F && ((n.isWebGL2 ? s : e.get("ANGLE_instanced_arrays"))[n.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](z, F), k[z] = F) } function b() { let z = c.newAttributes, F = c.enabledAttributes; for (let U = 0, N = F.length; U < N; U++)F[U] !== z[U] && (s.disableVertexAttribArray(U), F[U] = 0) } function T(z, F, U, N, k, Q) { n.isWebGL2 === !0 && (U === 5124 || U === 5125) ? s.vertexAttribIPointer(z, F, U, k, Q) : s.vertexAttribPointer(z, F, U, N, k, Q) } function y(z, F, U, N) { if (n.isWebGL2 === !1 && (z.isInstancedMesh || N.isInstancedBufferGeometry) && e.get("ANGLE_instanced_arrays") === null) return; _(); let k = N.attributes, Q = U.getAttributes(), oe = F.defaultAttributeValues; for (let ue in Q) { let ee = Q[ue]; if (ee.location >= 0) { let we = k[ue]; if (we === void 0 && (ue === "instanceMatrix" && z.instanceMatrix && (we = z.instanceMatrix), ue === "instanceColor" && z.instanceColor && (we = z.instanceColor)), we !== void 0) { let W = we.normalized, j = we.itemSize, de = t.get(we); if (de === void 0) continue; let O = de.buffer, _e = de.type, Me = de.bytesPerElement; if (we.isInterleavedBufferAttribute) { let ce = we.data, he = ce.stride, Ee = we.offset; if (ce && ce.isInstancedInterleavedBuffer) { for (let V = 0; V < ee.locationSize; V++)v(ee.location + V, ce.meshPerAttribute); z.isInstancedMesh !== !0 && N._maxInstanceCount === void 0 && (N._maxInstanceCount = ce.meshPerAttribute * ce.count) } else for (let V = 0; V < ee.locationSize; V++)w(ee.location + V); s.bindBuffer(34962, O); for (let V = 0; V < ee.locationSize; V++)T(ee.location + V, j / ee.locationSize, _e, W, he * Me, (Ee + j / ee.locationSize * V) * Me) } else { if (we.isInstancedBufferAttribute) { for (let ce = 0; ce < ee.locationSize; ce++)v(ee.location + ce, we.meshPerAttribute); z.isInstancedMesh !== !0 && N._maxInstanceCount === void 0 && (N._maxInstanceCount = we.meshPerAttribute * we.count) } else for (let ce = 0; ce < ee.locationSize; ce++)w(ee.location + ce); s.bindBuffer(34962, O); for (let ce = 0; ce < ee.locationSize; ce++)T(ee.location + ce, j / ee.locationSize, _e, W, j * Me, j / ee.locationSize * ce * Me) } } else if (oe !== void 0) { let W = oe[ue]; if (W !== void 0) switch (W.length) { case 2: s.vertexAttrib2fv(ee.location, W); break; case 3: s.vertexAttrib3fv(ee.location, W); break; case 4: s.vertexAttrib4fv(ee.location, W); break; default: s.vertexAttrib1fv(ee.location, W) } } } } b() } function C() { L(); for (let z in a) { let F = a[z]; for (let U in F) { let N = F[U]; for (let k in N) d(N[k].object), delete N[k]; delete F[U] } delete a[z] } } function R(z) { if (a[z.id] === void 0) return; let F = a[z.id]; for (let U in F) { let N = F[U]; for (let k in N) d(N[k].object), delete N[k]; delete F[U] } delete a[z.id] } function D(z) { for (let F in a) { let U = a[F]; if (U[z.id] === void 0) continue; let N = U[z.id]; for (let k in N) d(N[k].object), delete N[k]; delete U[z.id] } } function L() { $(), c !== l && (c = l, f(c.object)) } function $() { l.geometry = null, l.program = null, l.wireframe = !1 } return { setup: u, reset: L, resetDefaultState: $, dispose: C, releaseStatesOfGeometry: R, releaseStatesOfProgram: D, initAttributes: _, enableAttribute: w, disableUnusedAttributes: b } } function E_(s, e, t, n) { let i = n.isWebGL2, r; function o(c) { r = c } function a(c, u) { s.drawArrays(r, c, u), t.update(u, r, 1) } function l(c, u, h) { if (h === 0) return; let f, d; if (i) f = s, d = "drawArraysInstanced"; else if (f = e.get("ANGLE_instanced_arrays"), d = "drawArraysInstancedANGLE", f === null) { console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays."); return } f[d](r, c, u, h), t.update(u, r, h) } this.setMode = o, this.render = a, this.renderInstances = l } function A_(s, e, t) { let n; function i() { if (n !== void 0) return n; if (e.has("EXT_texture_filter_anisotropic") === !0) { let y = e.get("EXT_texture_filter_anisotropic"); n = s.getParameter(y.MAX_TEXTURE_MAX_ANISOTROPY_EXT) } else n = 0; return n } function r(y) { if (y === "highp") { if (s.getShaderPrecisionFormat(35633, 36338).precision > 0 && s.getShaderPrecisionFormat(35632, 36338).precision > 0) return "highp"; y = "mediump" } return y === "mediump" && s.getShaderPrecisionFormat(35633, 36337).precision > 0 && s.getShaderPrecisionFormat(35632, 36337).precision > 0 ? "mediump" : "lowp" } let o = typeof WebGL2RenderingContext != "undefined" && s instanceof WebGL2RenderingContext || typeof WebGL2ComputeRenderingContext != "undefined" && s instanceof WebGL2ComputeRenderingContext, a = t.precision !== void 0 ? t.precision : "highp", l = r(a); l !== a && (console.warn("THREE.WebGLRenderer:", a, "not supported, using", l, "instead."), a = l); let c = o || e.has("WEBGL_draw_buffers"), u = t.logarithmicDepthBuffer === !0, h = s.getParameter(34930), f = s.getParameter(35660), d = s.getParameter(3379), g = s.getParameter(34076), m = s.getParameter(34921), x = s.getParameter(36347), p = s.getParameter(36348), _ = s.getParameter(36349), w = f > 0, v = o || e.has("OES_texture_float"), b = w && v, T = o ? s.getParameter(36183) : 0; return { isWebGL2: o, drawBuffers: c, getMaxAnisotropy: i, getMaxPrecision: r, precision: a, logarithmicDepthBuffer: u, maxTextures: h, maxVertexTextures: f, maxTextureSize: d, maxCubemapSize: g, maxAttributes: m, maxVertexUniforms: x, maxVaryings: p, maxFragmentUniforms: _, vertexTextures: w, floatFragmentTextures: v, floatVertexTextures: b, maxSamples: T } } function L_(s) { let e = this, t = null, n = 0, i = !1, r = !1, o = new an, a = new st, l = { value: null, needsUpdate: !1 }; this.uniform = l, this.numPlanes = 0, this.numIntersection = 0, this.init = function (h, f, d) { let g = h.length !== 0 || f || n !== 0 || i; return i = f, t = u(h, d, 0), n = h.length, g }, this.beginShadows = function () { r = !0, u(null) }, this.endShadows = function () { r = !1, c() }, this.setState = function (h, f, d) { let g = h.clippingPlanes, m = h.clipIntersection, x = h.clipShadows, p = s.get(h); if (!i || g === null || g.length === 0 || r && !x) r ? u(null) : c(); else { let _ = r ? 0 : n, w = _ * 4, v = p.clippingState || null; l.value = v, v = u(g, f, w, d); for (let b = 0; b !== w; ++b)v[b] = t[b]; p.clippingState = v, this.numIntersection = m ? this.numPlanes : 0, this.numPlanes += _ } }; function c() { l.value !== t && (l.value = t, l.needsUpdate = n > 0), e.numPlanes = n, e.numIntersection = 0 } function u(h, f, d, g) { let m = h !== null ? h.length : 0, x = null; if (m !== 0) { if (x = l.value, g !== !0 || x === null) { let p = d + m * 4, _ = f.matrixWorldInverse; a.getNormalMatrix(_), (x === null || x.length < p) && (x = new Float32Array(p)); for (let w = 0, v = d; w !== m; ++w, v += 4)o.copy(h[w]).applyMatrix4(_, a), o.normal.toArray(x, v), x[v + 3] = o.constant } l.value = x, l.needsUpdate = !0 } return e.numPlanes = m, e.numIntersection = 0, x } } function C_(s) { let e = new WeakMap; function t(o, a) { return a === aa ? o.mapping = Ps : a === la && (o.mapping = Rs), o } function n(o) { if (o && o.isTexture && o.isRenderTargetTexture === !1) { let a = o.mapping; if (a === aa || a === la) if (e.has(o)) { let l = e.get(o).texture; return t(l, o.mapping) } else { let l = o.image; if (l && l.height > 0) { let c = s.getRenderTarget(), u = new Xa(l.height / 2); return u.fromEquirectangularTexture(s, o), e.set(o, u), s.setRenderTarget(c), o.addEventListener("dispose", i), t(u.texture, o.mapping) } else return null } } return o } function i(o) { let a = o.target; a.removeEventListener("dispose", i); let l = e.get(a); l !== void 0 && (e.delete(a), l.dispose()) } function r() { e = new WeakMap } return { get: n, dispose: r } } var oo = class extends io { constructor(e = -1, t = 1, n = 1, i = -1, r = .1, o = 2e3) { super(); this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = e, this.right = t, this.top = n, this.bottom = i, this.near = r, this.far = o, this.updateProjectionMatrix() } copy(e, t) { return super.copy(e, t), this.left = e.left, this.right = e.right, this.top = e.top, this.bottom = e.bottom, this.near = e.near, this.far = e.far, this.zoom = e.zoom, this.view = e.view === null ? null : Object.assign({}, e.view), this } setViewOffset(e, t, n, i, r, o) { this.view === null && (this.view = { enabled: !0, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = i, this.view.width = r, this.view.height = o, this.updateProjectionMatrix() } clearViewOffset() { this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix() } updateProjectionMatrix() { let e = (this.right - this.left) / (2 * this.zoom), t = (this.top - this.bottom) / (2 * this.zoom), n = (this.right + this.left) / 2, i = (this.top + this.bottom) / 2, r = n - e, o = n + e, a = i + t, l = i - t; if (this.view !== null && this.view.enabled) { let c = (this.right - this.left) / this.view.fullWidth / this.zoom, u = (this.top - this.bottom) / this.view.fullHeight / this.zoom; r += c * this.view.offsetX, o = r + c * this.view.width, a -= u * this.view.offsetY, l = a - u * this.view.height } this.projectionMatrix.makeOrthographic(r, o, a, l, this.near, this.far), this.projectionMatrixInverse.copy(this.projectionMatrix).invert() } toJSON(e) { let t = super.toJSON(e); return t.object.zoom = this.zoom, t.object.left = this.left, t.object.right = this.right, t.object.top = this.top, t.object.bottom = this.bottom, t.object.near = this.near, t.object.far = this.far, this.view !== null && (t.object.view = Object.assign({}, this.view)), t } }; oo.prototype.isOrthographicCamera = !0; var Zr = class extends Gt { constructor(e) { super(e); this.type = "RawShaderMaterial" } }; Zr.prototype.isRawShaderMaterial = !0; var sr = 4, jn = 8, cn = Math.pow(2, jn), Lu = [.125, .215, .35, .446, .526, .582], Cu = jn - sr + 1 + Lu.length, or = 20, un = { [St]: 0, [Gi]: 1, [ma]: 2, [au]: 3, [lu]: 4, [cu]: 5, [pa]: 6 }, Za = new oo, { _lodPlanes: Jr, _sizeLods: Pu, _sigmas: ao } = R_(), Ru = new se, Ja = null, bi = (1 + Math.sqrt(5)) / 2, ar = 1 / bi, Iu = [new A(1, 1, 1), new A(-1, 1, 1), new A(1, 1, -1), new A(-1, 1, -1), new A(0, bi, ar), new A(0, bi, -ar), new A(ar, 0, bi), new A(-ar, 0, bi), new A(bi, ar, 0), new A(-bi, ar, 0)], Du = class { constructor(e) { this._renderer = e, this._pingPongRenderTarget = null, this._blurMaterial = I_(or), this._equirectShader = null, this._cubemapShader = null, this._compileMaterial(this._blurMaterial) } fromScene(e, t = 0, n = .1, i = 100) { Ja = this._renderer.getRenderTarget(); let r = this._allocateTargets(); return this._sceneToCubeUV(e, n, i, r), t > 0 && this._blur(r, 0, 0, t), this._applyPMREM(r), this._cleanup(r), r } fromEquirectangular(e) { return this._fromTexture(e) } fromCubemap(e) { return this._fromTexture(e) } compileCubemapShader() { this._cubemapShader === null && (this._cubemapShader = Nu(), this._compileMaterial(this._cubemapShader)) } compileEquirectangularShader() { this._equirectShader === null && (this._equirectShader = Bu(), this._compileMaterial(this._equirectShader)) } dispose() { this._blurMaterial.dispose(), this._cubemapShader !== null && this._cubemapShader.dispose(), this._equirectShader !== null && this._equirectShader.dispose(); for (let e = 0; e < Jr.length; e++)Jr[e].dispose() } _cleanup(e) { this._pingPongRenderTarget.dispose(), this._renderer.setRenderTarget(Ja), e.scissorTest = !1, lo(e, 0, 0, e.width, e.height) } _fromTexture(e) { Ja = this._renderer.getRenderTarget(); let t = this._allocateTargets(e); return this._textureToCubeUV(e, t), this._applyPMREM(t), this._cleanup(t), t } _allocateTargets(e) { let t = { magFilter: rt, minFilter: rt, generateMipmaps: !1, type: zi, format: Hp, encoding: P_(e) ? e.encoding : ma, depthBuffer: !1 }, n = Fu(t); return n.depthBuffer = !e, this._pingPongRenderTarget = Fu(t), n } _compileMaterial(e) { let t = new tt(Jr[0], e); this._renderer.compile(t, Za) } _sceneToCubeUV(e, t, n, i) { let r = 90, o = 1, a = new ft(r, o, t, n), l = [1, -1, 1, 1, 1, 1], c = [1, 1, 1, -1, -1, -1], u = this._renderer, h = u.autoClear, f = u.outputEncoding, d = u.toneMapping; u.getClearColor(Ru), u.toneMapping = gi, u.outputEncoding = St, u.autoClear = !1; let g = new Ys({ name: "PMREM.Background", side: Ke, depthWrite: !1, depthTest: !1 }), m = new tt(new er, g), x = !1, p = e.background; p ? p.isColor && (g.color.copy(p), e.background = null, x = !0) : (g.color.copy(Ru), x = !0); for (let _ = 0; _ < 6; _++) { let w = _ % 3; w == 0 ? (a.up.set(0, l[_], 0), a.lookAt(c[_], 0, 0)) : w == 1 ? (a.up.set(0, 0, l[_]), a.lookAt(0, c[_], 0)) : (a.up.set(0, l[_], 0), a.lookAt(0, 0, c[_])), lo(i, w * cn, _ > 2 ? cn : 0, cn, cn), u.setRenderTarget(i), x && u.render(m, a), u.render(e, a) } m.geometry.dispose(), m.material.dispose(), u.toneMapping = d, u.outputEncoding = f, u.autoClear = h, e.background = p } _textureToCubeUV(e, t) { let n = this._renderer; e.isCubeTexture ? this._cubemapShader == null && (this._cubemapShader = Nu()) : this._equirectShader == null && (this._equirectShader = Bu()); let i = e.isCubeTexture ? this._cubemapShader : this._equirectShader, r = new tt(Jr[0], i), o = i.uniforms; o.envMap.value = e, e.isCubeTexture || o.texelSize.value.set(1 / e.image.width, 1 / e.image.height), o.inputEncoding.value = un[e.encoding], o.outputEncoding.value = un[t.texture.encoding], lo(t, 0, 0, 3 * cn, 2 * cn), n.setRenderTarget(t), n.render(r, Za) } _applyPMREM(e) { let t = this._renderer, n = t.autoClear; t.autoClear = !1; for (let i = 1; i < Cu; i++) { let r = Math.sqrt(ao[i] * ao[i] - ao[i - 1] * ao[i - 1]), o = Iu[(i - 1) % Iu.length]; this._blur(e, i - 1, i, r, o) } t.autoClear = n } _blur(e, t, n, i, r) { let o = this._pingPongRenderTarget; this._halfBlur(e, o, t, n, i, "latitudinal", r), this._halfBlur(o, e, n, n, i, "longitudinal", r) } _halfBlur(e, t, n, i, r, o, a) { let l = this._renderer, c = this._blurMaterial; o !== "latitudinal" && o !== "longitudinal" && console.error("blur direction must be either latitudinal or longitudinal!"); let u = 3, h = new tt(Jr[i], c), f = c.uniforms, d = Pu[n] - 1, g = isFinite(r) ? Math.PI / (2 * d) : 2 * Math.PI / (2 * or - 1), m = r / g, x = isFinite(r) ? 1 + Math.floor(u * m) : or; x > or && console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${x} samples when the maximum is set to ${or}`); let p = [], _ = 0; for (let T = 0; T < or; ++T) { let y = T / m, C = Math.exp(-y * y / 2); p.push(C), T == 0 ? _ += C : T < x && (_ += 2 * C) } for (let T = 0; T < p.length; T++)p[T] = p[T] / _; f.envMap.value = e.texture, f.samples.value = x, f.weights.value = p, f.latitudinal.value = o === "latitudinal", a && (f.poleAxis.value = a), f.dTheta.value = g, f.mipInt.value = jn - n, f.inputEncoding.value = un[e.texture.encoding], f.outputEncoding.value = un[e.texture.encoding]; let w = Pu[i], v = 3 * Math.max(0, cn - 2 * w), b = (i === 0 ? 0 : 2 * cn) + 2 * w * (i > jn - sr ? i - jn + sr : 0); lo(t, v, b, 3 * w, 2 * w), l.setRenderTarget(t), l.render(h, Za) } }; function P_(s) { return s === void 0 || s.type !== zi ? !1 : s.encoding === St || s.encoding === Gi || s.encoding === pa } function R_() { let s = [], e = [], t = [], n = jn; for (let i = 0; i < Cu; i++) { let r = Math.pow(2, n); e.push(r); let o = 1 / r; i > jn - sr ? o = Lu[i - jn + sr - 1] : i == 0 && (o = 0), t.push(o); let a = 1 / (r - 1), l = -a / 2, c = 1 + a / 2, u = [l, l, c, l, c, c, l, l, c, c, l, c], h = 6, f = 6, d = 3, g = 2, m = 1, x = new Float32Array(d * f * h), p = new Float32Array(g * f * h), _ = new Float32Array(m * f * h); for (let v = 0; v < h; v++) { let b = v % 3 * 2 / 3 - 1, T = v > 2 ? 0 : -1, y = [b, T, 0, b + 2 / 3, T, 0, b + 2 / 3, T + 1, 0, b, T, 0, b + 2 / 3, T + 1, 0, b, T + 1, 0]; x.set(y, d * f * v), p.set(u, g * f * v); let C = [v, v, v, v, v, v]; _.set(C, m * f * v) } let w = new We; w.setAttribute("position", new Qe(x, d)), w.setAttribute("uv", new Qe(p, g)), w.setAttribute("faceIndex", new Qe(_, m)), s.push(w), n > sr && n-- } return { _lodPlanes: s, _sizeLods: e, _sigmas: t } } function Fu(s) { let e = new $t(3 * cn, 3 * cn, s); return e.texture.mapping = Is, e.texture.name = "PMREM.cubeUv", e.scissorTest = !0, e } function lo(s, e, t, n, i) { s.viewport.set(e, t, n, i), s.scissor.set(e, t, n, i) } function I_(s) {
		let e = new Float32Array(s), t = new A(0, 1, 0); return new Zr({
			name: "SphericalGaussianBlur", defines: { n: s }, uniforms: { envMap: { value: null }, samples: { value: 1 }, weights: { value: e }, latitudinal: { value: !1 }, dTheta: { value: 0 }, mipInt: { value: 0 }, poleAxis: { value: t }, inputEncoding: { value: un[St] }, outputEncoding: { value: un[St] } }, vertexShader: ja(), fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			${$a()}

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`, blending: On, depthTest: !1, depthWrite: !1
		})
	} function Bu() {
		let s = new Y(1, 1); return new Zr({
			name: "EquirectangularToCubeUV", uniforms: { envMap: { value: null }, texelSize: { value: s }, inputEncoding: { value: un[St] }, outputEncoding: { value: un[St] } }, vertexShader: ja(), fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform vec2 texelSize;

			${$a()}

			#include <common>

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				vec2 f = fract( uv / texelSize - 0.5 );
				uv -= f * texelSize;
				vec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x += texelSize.x;
				vec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.y += texelSize.y;
				vec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x -= texelSize.x;
				vec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;

				vec3 tm = mix( tl, tr, f.x );
				vec3 bm = mix( bl, br, f.x );
				gl_FragColor.rgb = mix( tm, bm, f.y );

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`, blending: On, depthTest: !1, depthWrite: !1
		})
	} function Nu() {
		return new Zr({
			name: "CubemapToCubeUV", uniforms: { envMap: { value: null }, inputEncoding: { value: un[St] }, outputEncoding: { value: un[St] } }, vertexShader: ja(), fragmentShader: `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			${$a()}

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;
				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`, blending: On, depthTest: !1, depthWrite: !1
		})
	} function ja() {
		return `

		precision mediump float;
		precision mediump int;

		attribute vec3 position;
		attribute vec2 uv;
		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`} function $a() {
		return `

		uniform int inputEncoding;
		uniform int outputEncoding;

		#include <encodings_pars_fragment>

		vec4 inputTexelToLinear( vec4 value ) {

			if ( inputEncoding == 0 ) {

				return value;

			} else if ( inputEncoding == 1 ) {

				return sRGBToLinear( value );

			} else if ( inputEncoding == 2 ) {

				return RGBEToLinear( value );

			} else if ( inputEncoding == 3 ) {

				return RGBMToLinear( value, 7.0 );

			} else if ( inputEncoding == 4 ) {

				return RGBMToLinear( value, 16.0 );

			} else if ( inputEncoding == 5 ) {

				return RGBDToLinear( value, 256.0 );

			} else {

				return GammaToLinear( value, 2.2 );

			}

		}

		vec4 linearToOutputTexel( vec4 value ) {

			if ( outputEncoding == 0 ) {

				return value;

			} else if ( outputEncoding == 1 ) {

				return LinearTosRGB( value );

			} else if ( outputEncoding == 2 ) {

				return LinearToRGBE( value );

			} else if ( outputEncoding == 3 ) {

				return LinearToRGBM( value, 7.0 );

			} else if ( outputEncoding == 4 ) {

				return LinearToRGBM( value, 16.0 );

			} else if ( outputEncoding == 5 ) {

				return LinearToRGBD( value, 256.0 );

			} else {

				return LinearToGamma( value, 2.2 );

			}

		}

		vec4 envMapTexelToLinear( vec4 color ) {

			return inputTexelToLinear( color );

		}
	`} function D_(s) { let e = new WeakMap, t = null; function n(a) { if (a && a.isTexture && a.isRenderTargetTexture === !1) { let l = a.mapping, c = l === aa || l === la, u = l === Ps || l === Rs; if (c || u) { if (e.has(a)) return e.get(a).texture; { let h = a.image; if (c && h && h.height > 0 || u && h && i(h)) { let f = s.getRenderTarget(); t === null && (t = new Du(s)); let d = c ? t.fromEquirectangular(a) : t.fromCubemap(a); return e.set(a, d), s.setRenderTarget(f), a.addEventListener("dispose", r), d.texture } else return null } } } return a } function i(a) { let l = 0, c = 6; for (let u = 0; u < c; u++)a[u] !== void 0 && l++; return l === c } function r(a) { let l = a.target; l.removeEventListener("dispose", r); let c = e.get(l); c !== void 0 && (e.delete(l), c.dispose()) } function o() { e = new WeakMap, t !== null && (t.dispose(), t = null) } return { get: n, dispose: o } } function F_(s) { let e = {}; function t(n) { if (e[n] !== void 0) return e[n]; let i; switch (n) { case "WEBGL_depth_texture": i = s.getExtension("WEBGL_depth_texture") || s.getExtension("MOZ_WEBGL_depth_texture") || s.getExtension("WEBKIT_WEBGL_depth_texture"); break; case "EXT_texture_filter_anisotropic": i = s.getExtension("EXT_texture_filter_anisotropic") || s.getExtension("MOZ_EXT_texture_filter_anisotropic") || s.getExtension("WEBKIT_EXT_texture_filter_anisotropic"); break; case "WEBGL_compressed_texture_s3tc": i = s.getExtension("WEBGL_compressed_texture_s3tc") || s.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || s.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc"); break; case "WEBGL_compressed_texture_pvrtc": i = s.getExtension("WEBGL_compressed_texture_pvrtc") || s.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"); break; default: i = s.getExtension(n) }return e[n] = i, i } return { has: function (n) { return t(n) !== null }, init: function (n) { n.isWebGL2 ? t("EXT_color_buffer_float") : (t("WEBGL_depth_texture"), t("OES_texture_float"), t("OES_texture_half_float"), t("OES_texture_half_float_linear"), t("OES_standard_derivatives"), t("OES_element_index_uint"), t("OES_vertex_array_object"), t("ANGLE_instanced_arrays")), t("OES_texture_float_linear"), t("EXT_color_buffer_half_float") }, get: function (n) { let i = t(n); return i === null && console.warn("THREE.WebGLRenderer: " + n + " extension not supported."), i } } } function B_(s, e, t, n) { let i = {}, r = new WeakMap; function o(h) { let f = h.target; f.index !== null && e.remove(f.index); for (let g in f.attributes) e.remove(f.attributes[g]); f.removeEventListener("dispose", o), delete i[f.id]; let d = r.get(f); d && (e.remove(d), r.delete(f)), n.releaseStatesOfGeometry(f), f.isInstancedBufferGeometry === !0 && delete f._maxInstanceCount, t.memory.geometries-- } function a(h, f) { return i[f.id] === !0 || (f.addEventListener("dispose", o), i[f.id] = !0, t.memory.geometries++), f } function l(h) { let f = h.attributes; for (let g in f) e.update(f[g], 34962); let d = h.morphAttributes; for (let g in d) { let m = d[g]; for (let x = 0, p = m.length; x < p; x++)e.update(m[x], 34962) } } function c(h) { let f = [], d = h.index, g = h.attributes.position, m = 0; if (d !== null) { let _ = d.array; m = d.version; for (let w = 0, v = _.length; w < v; w += 3) { let b = _[w + 0], T = _[w + 1], y = _[w + 2]; f.push(b, T, T, y, y, b) } } else { let _ = g.array; m = g.version; for (let w = 0, v = _.length / 3 - 1; w < v; w += 3) { let b = w + 0, T = w + 1, y = w + 2; f.push(b, T, T, y, y, b) } } let x = new (Tu(f) > 65535 ? Ua : Oa)(f, 1); x.version = m; let p = r.get(h); p && e.remove(p), r.set(h, x) } function u(h) { let f = r.get(h); if (f) { let d = h.index; d !== null && f.version < d.version && c(h) } else c(h); return r.get(h) } return { get: a, update: l, getWireframeAttribute: u } } function N_(s, e, t, n) { let i = n.isWebGL2, r; function o(f) { r = f } let a, l; function c(f) { a = f.type, l = f.bytesPerElement } function u(f, d) { s.drawElements(r, d, a, f * l), t.update(d, r, 1) } function h(f, d, g) { if (g === 0) return; let m, x; if (i) m = s, x = "drawElementsInstanced"; else if (m = e.get("ANGLE_instanced_arrays"), x = "drawElementsInstancedANGLE", m === null) { console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays."); return } m[x](r, d, a, f * l, g), t.update(d, r, g) } this.setMode = o, this.setIndex = c, this.render = u, this.renderInstances = h } function z_(s) { let e = { geometries: 0, textures: 0 }, t = { frame: 0, calls: 0, triangles: 0, points: 0, lines: 0 }; function n(r, o, a) { switch (t.calls++, o) { case 4: t.triangles += a * (r / 3); break; case 1: t.lines += a * (r / 2); break; case 3: t.lines += a * (r - 1); break; case 2: t.lines += a * r; break; case 0: t.points += a * r; break; default: console.error("THREE.WebGLInfo: Unknown draw mode:", o); break } } function i() { t.frame++, t.calls = 0, t.triangles = 0, t.points = 0, t.lines = 0 } return { memory: e, render: t, programs: null, autoReset: !0, reset: i, update: n } } function O_(s, e) { return s[0] - e[0] } function U_(s, e) { return Math.abs(e[1]) - Math.abs(s[1]) } function k_(s) { let e = {}, t = new Float32Array(8), n = []; for (let r = 0; r < 8; r++)n[r] = [r, 0]; function i(r, o, a, l) { let c = r.morphTargetInfluences, u = c === void 0 ? 0 : c.length, h = e[o.id]; if (h === void 0 || h.length !== u) { h = []; for (let x = 0; x < u; x++)h[x] = [x, 0]; e[o.id] = h } for (let x = 0; x < u; x++) { let p = h[x]; p[0] = x, p[1] = c[x] } h.sort(U_); for (let x = 0; x < 8; x++)x < u && h[x][1] ? (n[x][0] = h[x][0], n[x][1] = h[x][1]) : (n[x][0] = Number.MAX_SAFE_INTEGER, n[x][1] = 0); n.sort(O_); let f = o.morphAttributes.position, d = o.morphAttributes.normal, g = 0; for (let x = 0; x < 8; x++) { let p = n[x], _ = p[0], w = p[1]; _ !== Number.MAX_SAFE_INTEGER && w ? (f && o.getAttribute("morphTarget" + x) !== f[_] && o.setAttribute("morphTarget" + x, f[_]), d && o.getAttribute("morphNormal" + x) !== d[_] && o.setAttribute("morphNormal" + x, d[_]), t[x] = w, g += w) : (f && o.hasAttribute("morphTarget" + x) === !0 && o.deleteAttribute("morphTarget" + x), d && o.hasAttribute("morphNormal" + x) === !0 && o.deleteAttribute("morphNormal" + x), t[x] = 0) } let m = o.morphTargetsRelative ? 1 : 1 - g; l.getUniforms().setValue(s, "morphTargetBaseInfluence", m), l.getUniforms().setValue(s, "morphTargetInfluences", t) } return { update: i } } function H_(s, e, t, n) { let i = new WeakMap; function r(l) { let c = n.render.frame, u = l.geometry, h = e.get(l, u); return i.get(h) !== c && (e.update(h), i.set(h, c)), l.isInstancedMesh && (l.hasEventListener("dispose", a) === !1 && l.addEventListener("dispose", a), t.update(l.instanceMatrix, 34962), l.instanceColor !== null && t.update(l.instanceColor, 34962)), h } function o() { i = new WeakMap } function a(l) { let c = l.target; c.removeEventListener("dispose", a), t.remove(c.instanceMatrix), c.instanceColor !== null && t.remove(c.instanceColor) } return { update: r, dispose: o } } var Qa = class extends ot { constructor(e = null, t = 1, n = 1, i = 1) { super(null); this.image = { data: e, width: t, height: n, depth: i }, this.magFilter = rt, this.minFilter = rt, this.wrapR = Rt, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1, this.needsUpdate = !0 } }; Qa.prototype.isDataTexture2DArray = !0; var Ka = class extends ot { constructor(e = null, t = 1, n = 1, i = 1) { super(null); this.image = { data: e, width: t, height: n, depth: i }, this.magFilter = rt, this.minFilter = rt, this.wrapR = Rt, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1, this.needsUpdate = !0 } }; Ka.prototype.isDataTexture3D = !0; var zu = new ot, G_ = new Qa, V_ = new Ka, Ou = new Xr, Uu = [], ku = [], Hu = new Float32Array(16), Gu = new Float32Array(9), Vu = new Float32Array(4); function lr(s, e, t) { let n = s[0]; if (n <= 0 || n > 0) return s; let i = e * t, r = Uu[i]; if (r === void 0 && (r = new Float32Array(i), Uu[i] = r), e !== 0) { n.toArray(r, 0); for (let o = 1, a = 0; o !== e; ++o)a += t, s[o].toArray(r, a) } return r } function wt(s, e) { if (s.length !== e.length) return !1; for (let t = 0, n = s.length; t < n; t++)if (s[t] !== e[t]) return !1; return !0 } function xt(s, e) { for (let t = 0, n = e.length; t < n; t++)s[t] = e[t] } function Wu(s, e) { let t = ku[e]; t === void 0 && (t = new Int32Array(e), ku[e] = t); for (let n = 0; n !== e; ++n)t[n] = s.allocateTextureUnit(); return t } function W_(s, e) { let t = this.cache; t[0] !== e && (s.uniform1f(this.addr, e), t[0] = e) } function q_(s, e) { let t = this.cache; if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y) && (s.uniform2f(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y); else { if (wt(t, e)) return; s.uniform2fv(this.addr, e), xt(t, e) } } function X_(s, e) { let t = this.cache; if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (s.uniform3f(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z); else if (e.r !== void 0) (t[0] !== e.r || t[1] !== e.g || t[2] !== e.b) && (s.uniform3f(this.addr, e.r, e.g, e.b), t[0] = e.r, t[1] = e.g, t[2] = e.b); else { if (wt(t, e)) return; s.uniform3fv(this.addr, e), xt(t, e) } } function Y_(s, e) { let t = this.cache; if (e.x !== void 0) (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (s.uniform4f(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w); else { if (wt(t, e)) return; s.uniform4fv(this.addr, e), xt(t, e) } } function Z_(s, e) { let t = this.cache, n = e.elements; if (n === void 0) { if (wt(t, e)) return; s.uniformMatrix2fv(this.addr, !1, e), xt(t, e) } else { if (wt(t, n)) return; Vu.set(n), s.uniformMatrix2fv(this.addr, !1, Vu), xt(t, n) } } function J_(s, e) { let t = this.cache, n = e.elements; if (n === void 0) { if (wt(t, e)) return; s.uniformMatrix3fv(this.addr, !1, e), xt(t, e) } else { if (wt(t, n)) return; Gu.set(n), s.uniformMatrix3fv(this.addr, !1, Gu), xt(t, n) } } function j_(s, e) { let t = this.cache, n = e.elements; if (n === void 0) { if (wt(t, e)) return; s.uniformMatrix4fv(this.addr, !1, e), xt(t, e) } else { if (wt(t, n)) return; Hu.set(n), s.uniformMatrix4fv(this.addr, !1, Hu), xt(t, n) } } function $_(s, e) { let t = this.cache; t[0] !== e && (s.uniform1i(this.addr, e), t[0] = e) } function Q_(s, e) { let t = this.cache; wt(t, e) || (s.uniform2iv(this.addr, e), xt(t, e)) } function K_(s, e) { let t = this.cache; wt(t, e) || (s.uniform3iv(this.addr, e), xt(t, e)) } function ex(s, e) { let t = this.cache; wt(t, e) || (s.uniform4iv(this.addr, e), xt(t, e)) } function tx(s, e) { let t = this.cache; t[0] !== e && (s.uniform1ui(this.addr, e), t[0] = e) } function nx(s, e) { let t = this.cache; wt(t, e) || (s.uniform2uiv(this.addr, e), xt(t, e)) } function ix(s, e) { let t = this.cache; wt(t, e) || (s.uniform3uiv(this.addr, e), xt(t, e)) } function rx(s, e) { let t = this.cache; wt(t, e) || (s.uniform4uiv(this.addr, e), xt(t, e)) } function sx(s, e, t) { let n = this.cache, i = t.allocateTextureUnit(); n[0] !== i && (s.uniform1i(this.addr, i), n[0] = i), t.safeSetTexture2D(e || zu, i) } function ox(s, e, t) { let n = this.cache, i = t.allocateTextureUnit(); n[0] !== i && (s.uniform1i(this.addr, i), n[0] = i), t.setTexture3D(e || V_, i) } function ax(s, e, t) { let n = this.cache, i = t.allocateTextureUnit(); n[0] !== i && (s.uniform1i(this.addr, i), n[0] = i), t.safeSetTextureCube(e || Ou, i) } function lx(s, e, t) { let n = this.cache, i = t.allocateTextureUnit(); n[0] !== i && (s.uniform1i(this.addr, i), n[0] = i), t.setTexture2DArray(e || G_, i) } function cx(s) { switch (s) { case 5126: return W_; case 35664: return q_; case 35665: return X_; case 35666: return Y_; case 35674: return Z_; case 35675: return J_; case 35676: return j_; case 5124: case 35670: return $_; case 35667: case 35671: return Q_; case 35668: case 35672: return K_; case 35669: case 35673: return ex; case 5125: return tx; case 36294: return nx; case 36295: return ix; case 36296: return rx; case 35678: case 36198: case 36298: case 36306: case 35682: return sx; case 35679: case 36299: case 36307: return ox; case 35680: case 36300: case 36308: case 36293: return ax; case 36289: case 36303: case 36311: case 36292: return lx } } function ux(s, e) { s.uniform1fv(this.addr, e) } function hx(s, e) { let t = lr(e, this.size, 2); s.uniform2fv(this.addr, t) } function fx(s, e) { let t = lr(e, this.size, 3); s.uniform3fv(this.addr, t) } function dx(s, e) { let t = lr(e, this.size, 4); s.uniform4fv(this.addr, t) } function px(s, e) { let t = lr(e, this.size, 4); s.uniformMatrix2fv(this.addr, !1, t) } function mx(s, e) { let t = lr(e, this.size, 9); s.uniformMatrix3fv(this.addr, !1, t) } function gx(s, e) { let t = lr(e, this.size, 16); s.uniformMatrix4fv(this.addr, !1, t) } function _x(s, e) { s.uniform1iv(this.addr, e) } function xx(s, e) { s.uniform2iv(this.addr, e) } function yx(s, e) { s.uniform3iv(this.addr, e) } function vx(s, e) { s.uniform4iv(this.addr, e) } function wx(s, e) { s.uniform1uiv(this.addr, e) } function bx(s, e) { s.uniform2uiv(this.addr, e) } function Mx(s, e) { s.uniform3uiv(this.addr, e) } function Sx(s, e) { s.uniform4uiv(this.addr, e) } function Tx(s, e, t) { let n = e.length, i = Wu(t, n); s.uniform1iv(this.addr, i); for (let r = 0; r !== n; ++r)t.safeSetTexture2D(e[r] || zu, i[r]) } function Ex(s, e, t) { let n = e.length, i = Wu(t, n); s.uniform1iv(this.addr, i); for (let r = 0; r !== n; ++r)t.safeSetTextureCube(e[r] || Ou, i[r]) } function Ax(s) { switch (s) { case 5126: return ux; case 35664: return hx; case 35665: return fx; case 35666: return dx; case 35674: return px; case 35675: return mx; case 35676: return gx; case 5124: case 35670: return _x; case 35667: case 35671: return xx; case 35668: case 35672: return yx; case 35669: case 35673: return vx; case 5125: return wx; case 36294: return bx; case 36295: return Mx; case 36296: return Sx; case 35678: case 36198: case 36298: case 36306: case 35682: return Tx; case 35680: case 36300: case 36308: case 36293: return Ex } } function Lx(s, e, t) { this.id = s, this.addr = t, this.cache = [], this.setValue = cx(e.type) } function qu(s, e, t) { this.id = s, this.addr = t, this.cache = [], this.size = e.size, this.setValue = Ax(e.type) } qu.prototype.updateCache = function (s) { let e = this.cache; s instanceof Float32Array && e.length !== s.length && (this.cache = new Float32Array(s.length)), xt(e, s) }; function Xu(s) { this.id = s, this.seq = [], this.map = {} } Xu.prototype.setValue = function (s, e, t) { let n = this.seq; for (let i = 0, r = n.length; i !== r; ++i) { let o = n[i]; o.setValue(s, e[o.id], t) } }; var el = /(\w+)(\])?(\[|\.)?/g; function Yu(s, e) { s.seq.push(e), s.map[e.id] = e } function Cx(s, e, t) { let n = s.name, i = n.length; for (el.lastIndex = 0; ;) { let r = el.exec(n), o = el.lastIndex, a = r[1], l = r[2] === "]", c = r[3]; if (l && (a = a | 0), c === void 0 || c === "[" && o + 2 === i) { Yu(t, c === void 0 ? new Lx(a, s, e) : new qu(a, s, e)); break } else { let h = t.map[a]; h === void 0 && (h = new Xu(a), Yu(t, h)), t = h } } } function $n(s, e) { this.seq = [], this.map = {}; let t = s.getProgramParameter(e, 35718); for (let n = 0; n < t; ++n) { let i = s.getActiveUniform(e, n), r = s.getUniformLocation(e, i.name); Cx(i, r, this) } } $n.prototype.setValue = function (s, e, t, n) { let i = this.map[e]; i !== void 0 && i.setValue(s, t, n) }; $n.prototype.setOptional = function (s, e, t) { let n = e[t]; n !== void 0 && this.setValue(s, t, n) }; $n.upload = function (s, e, t, n) { for (let i = 0, r = e.length; i !== r; ++i) { let o = e[i], a = t[o.id]; a.needsUpdate !== !1 && o.setValue(s, a.value, n) } }; $n.seqWithValue = function (s, e) { let t = []; for (let n = 0, i = s.length; n !== i; ++n) { let r = s[n]; r.id in e && t.push(r) } return t }; function Zu(s, e, t) { let n = s.createShader(e); return s.shaderSource(n, t), s.compileShader(n), n } var Px = 0; function Rx(s) {
		let e = s.split(`
`); for (let t = 0; t < e.length; t++)e[t] = t + 1 + ": " + e[t]; return e.join(`
`)
	} function Ju(s) { switch (s) { case St: return ["Linear", "( value )"]; case Gi: return ["sRGB", "( value )"]; case ma: return ["RGBE", "( value )"]; case au: return ["RGBM", "( value, 7.0 )"]; case lu: return ["RGBM", "( value, 16.0 )"]; case cu: return ["RGBD", "( value, 256.0 )"]; case pa: return ["Gamma", "( value, float( GAMMA_FACTOR ) )"]; case Lm: return ["LogLuv", "( value )"]; default: return console.warn("THREE.WebGLProgram: Unsupported encoding:", s), ["Linear", "( value )"] } } function ju(s, e, t) {
		let n = s.getShaderParameter(e, 35713), i = s.getShaderInfoLog(e).trim(); return n && i === "" ? "" : t.toUpperCase() + `

`+ i + `

`+ Rx(s.getShaderSource(e))
	} function cr(s, e) { let t = Ju(e); return "vec4 " + s + "( vec4 value ) { return " + t[0] + "ToLinear" + t[1] + "; }" } function Ix(s, e) { let t = Ju(e); return "vec4 " + s + "( vec4 value ) { return LinearTo" + t[0] + t[1] + "; }" } function Dx(s, e) { let t; switch (e) { case Ep: t = "Linear"; break; case Ap: t = "Reinhard"; break; case Lp: t = "OptimizedCineon"; break; case Cp: t = "ACESFilmic"; break; case Pp: t = "Custom"; break; default: console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), t = "Linear" }return "vec3 " + s + "( vec3 color ) { return " + t + "ToneMapping( color ); }" } function Fx(s) {
		return [s.extensionDerivatives || s.envMapCubeUV || s.bumpMap || s.tangentSpaceNormalMap || s.clearcoatNormalMap || s.flatShading || s.shaderID === "physical" ? "#extension GL_OES_standard_derivatives : enable" : "", (s.extensionFragDepth || s.logarithmicDepthBuffer) && s.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "", s.extensionDrawBuffers && s.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "", (s.extensionShaderTextureLOD || s.envMap || s.transmission) && s.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(jr).join(`
`)
	} function Bx(s) {
		let e = []; for (let t in s) { let n = s[t]; n !== !1 && e.push("#define " + t + " " + n) } return e.join(`
`)
	} function Nx(s, e) { let t = {}, n = s.getProgramParameter(e, 35721); for (let i = 0; i < n; i++) { let r = s.getActiveAttrib(e, i), o = r.name, a = 1; r.type === 35674 && (a = 2), r.type === 35675 && (a = 3), r.type === 35676 && (a = 4), t[o] = { type: r.type, location: s.getAttribLocation(e, o), locationSize: a } } return t } function jr(s) { return s !== "" } function $u(s, e) { return s.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows) } function Qu(s, e) { return s.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection) } var zx = /^[ \t]*#include +<([\w\d./]+)>/gm; function tl(s) { return s.replace(zx, Ox) } function Ox(s, e) { let t = Ce[e]; if (t === void 0) throw new Error("Can not resolve #include <" + e + ">"); return tl(t) } var Ux = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g, kx = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g; function Ku(s) { return s.replace(kx, eh).replace(Ux, Hx) } function Hx(s, e, t, n) { return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."), eh(s, e, t, n) } function eh(s, e, t, n) { let i = ""; for (let r = parseInt(e); r < parseInt(t); r++)i += n.replace(/\[\s*i\s*\]/g, "[ " + r + " ]").replace(/UNROLLED_LOOP_INDEX/g, r); return i } function th(s) {
		let e = "precision " + s.precision + ` float;
precision `+ s.precision + " int;"; return s.precision === "highp" ? e += `
#define HIGH_PRECISION`: s.precision === "mediump" ? e += `
#define MEDIUM_PRECISION`: s.precision === "lowp" && (e += `
#define LOW_PRECISION`), e
	} function Gx(s) { let e = "SHADOWMAP_TYPE_BASIC"; return s.shadowMapType === Oc ? e = "SHADOWMAP_TYPE_PCF" : s.shadowMapType === rp ? e = "SHADOWMAP_TYPE_PCF_SOFT" : s.shadowMapType === Nr && (e = "SHADOWMAP_TYPE_VSM"), e } function Vx(s) { let e = "ENVMAP_TYPE_CUBE"; if (s.envMap) switch (s.envMapMode) { case Ps: case Rs: e = "ENVMAP_TYPE_CUBE"; break; case Is: case ca: e = "ENVMAP_TYPE_CUBE_UV"; break }return e } function Wx(s) { let e = "ENVMAP_MODE_REFLECTION"; if (s.envMap) switch (s.envMapMode) { case Rs: case ca: e = "ENVMAP_MODE_REFRACTION"; break }return e } function qx(s) { let e = "ENVMAP_BLENDING_NONE"; if (s.envMap) switch (s.combine) { case Cs: e = "ENVMAP_BLENDING_MULTIPLY"; break; case Sp: e = "ENVMAP_BLENDING_MIX"; break; case Tp: e = "ENVMAP_BLENDING_ADD"; break }return e } function Xx(s, e, t, n) {
		let i = s.getContext(), r = t.defines, o = t.vertexShader, a = t.fragmentShader, l = Gx(t), c = Vx(t), u = Wx(t), h = qx(t), f = s.gammaFactor > 0 ? s.gammaFactor : 1, d = t.isWebGL2 ? "" : Fx(t), g = Bx(r), m = i.createProgram(), x, p, _ = t.glslVersion ? "#version " + t.glslVersion + `
`: ""; t.isRawShaderMaterial ? (x = [g].filter(jr).join(`
`), x.length > 0 && (x += `
`), p = [d, g].filter(jr).join(`
`), p.length > 0 && (p += `
`)) : (x = [th(t), "#define SHADER_NAME " + t.shaderName, g, t.instancing ? "#define USE_INSTANCING" : "", t.instancingColor ? "#define USE_INSTANCING_COLOR" : "", t.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define GAMMA_FACTOR " + f, "#define MAX_BONES " + t.maxBones, t.useFog && t.fog ? "#define USE_FOG" : "", t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "", t.map ? "#define USE_MAP" : "", t.envMap ? "#define USE_ENVMAP" : "", t.envMap ? "#define " + u : "", t.lightMap ? "#define USE_LIGHTMAP" : "", t.aoMap ? "#define USE_AOMAP" : "", t.emissiveMap ? "#define USE_EMISSIVEMAP" : "", t.bumpMap ? "#define USE_BUMPMAP" : "", t.normalMap ? "#define USE_NORMALMAP" : "", t.normalMap && t.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", t.normalMap && t.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", t.displacementMap && t.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", t.specularMap ? "#define USE_SPECULARMAP" : "", t.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "", t.specularTintMap ? "#define USE_SPECULARTINTMAP" : "", t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", t.metalnessMap ? "#define USE_METALNESSMAP" : "", t.alphaMap ? "#define USE_ALPHAMAP" : "", t.transmission ? "#define USE_TRANSMISSION" : "", t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", t.thicknessMap ? "#define USE_THICKNESSMAP" : "", t.vertexTangents ? "#define USE_TANGENT" : "", t.vertexColors ? "#define USE_COLOR" : "", t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", t.vertexUvs ? "#define USE_UV" : "", t.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", t.flatShading ? "#define FLAT_SHADED" : "", t.skinning ? "#define USE_SKINNING" : "", t.useVertexTexture ? "#define BONE_TEXTURE" : "", t.morphTargets ? "#define USE_MORPHTARGETS" : "", t.morphNormals && t.flatShading === !1 ? "#define USE_MORPHNORMALS" : "", t.doubleSided ? "#define DOUBLE_SIDED" : "", t.flipSided ? "#define FLIP_SIDED" : "", t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", t.shadowMapEnabled ? "#define " + l : "", t.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", "#ifdef USE_INSTANCING", "	attribute mat4 instanceMatrix;", "#endif", "#ifdef USE_INSTANCING_COLOR", "	attribute vec3 instanceColor;", "#endif", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_TANGENT", "	attribute vec4 tangent;", "#endif", "#if defined( USE_COLOR_ALPHA )", "	attribute vec4 color;", "#elif defined( USE_COLOR )", "	attribute vec3 color;", "#endif", "#ifdef USE_MORPHTARGETS", "	attribute vec3 morphTarget0;", "	attribute vec3 morphTarget1;", "	attribute vec3 morphTarget2;", "	attribute vec3 morphTarget3;", "	#ifdef USE_MORPHNORMALS", "		attribute vec3 morphNormal0;", "		attribute vec3 morphNormal1;", "		attribute vec3 morphNormal2;", "		attribute vec3 morphNormal3;", "	#else", "		attribute vec3 morphTarget4;", "		attribute vec3 morphTarget5;", "		attribute vec3 morphTarget6;", "		attribute vec3 morphTarget7;", "	#endif", "#endif", "#ifdef USE_SKINNING", "	attribute vec4 skinIndex;", "	attribute vec4 skinWeight;", "#endif", `
`].filter(jr).join(`
`), p = [d, th(t), "#define SHADER_NAME " + t.shaderName, g, "#define GAMMA_FACTOR " + f, t.useFog && t.fog ? "#define USE_FOG" : "", t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "", t.map ? "#define USE_MAP" : "", t.matcap ? "#define USE_MATCAP" : "", t.envMap ? "#define USE_ENVMAP" : "", t.envMap ? "#define " + c : "", t.envMap ? "#define " + u : "", t.envMap ? "#define " + h : "", t.lightMap ? "#define USE_LIGHTMAP" : "", t.aoMap ? "#define USE_AOMAP" : "", t.emissiveMap ? "#define USE_EMISSIVEMAP" : "", t.bumpMap ? "#define USE_BUMPMAP" : "", t.normalMap ? "#define USE_NORMALMAP" : "", t.normalMap && t.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", t.normalMap && t.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", t.clearcoat ? "#define USE_CLEARCOAT" : "", t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", t.specularMap ? "#define USE_SPECULARMAP" : "", t.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "", t.specularTintMap ? "#define USE_SPECULARTINTMAP" : "", t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", t.metalnessMap ? "#define USE_METALNESSMAP" : "", t.alphaMap ? "#define USE_ALPHAMAP" : "", t.alphaTest ? "#define USE_ALPHATEST" : "", t.sheenTint ? "#define USE_SHEEN" : "", t.transmission ? "#define USE_TRANSMISSION" : "", t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", t.thicknessMap ? "#define USE_THICKNESSMAP" : "", t.vertexTangents ? "#define USE_TANGENT" : "", t.vertexColors || t.instancingColor ? "#define USE_COLOR" : "", t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", t.vertexUvs ? "#define USE_UV" : "", t.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", t.gradientMap ? "#define USE_GRADIENTMAP" : "", t.flatShading ? "#define FLAT_SHADED" : "", t.doubleSided ? "#define DOUBLE_SIDED" : "", t.flipSided ? "#define FLIP_SIDED" : "", t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", t.shadowMapEnabled ? "#define " + l : "", t.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", t.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", t.logarithmicDepthBuffer && t.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", (t.extensionShaderTextureLOD || t.envMap) && t.rendererExtensionShaderTextureLod ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", t.toneMapping !== gi ? "#define TONE_MAPPING" : "", t.toneMapping !== gi ? Ce.tonemapping_pars_fragment : "", t.toneMapping !== gi ? Dx("toneMapping", t.toneMapping) : "", t.dithering ? "#define DITHERING" : "", t.format === Un ? "#define OPAQUE" : "", Ce.encodings_pars_fragment, t.map ? cr("mapTexelToLinear", t.mapEncoding) : "", t.matcap ? cr("matcapTexelToLinear", t.matcapEncoding) : "", t.envMap ? cr("envMapTexelToLinear", t.envMapEncoding) : "", t.emissiveMap ? cr("emissiveMapTexelToLinear", t.emissiveMapEncoding) : "", t.specularTintMap ? cr("specularTintMapTexelToLinear", t.specularTintMapEncoding) : "", t.lightMap ? cr("lightMapTexelToLinear", t.lightMapEncoding) : "", Ix("linearToOutputTexel", t.outputEncoding), t.depthPacking ? "#define DEPTH_PACKING " + t.depthPacking : "", `
`].filter(jr).join(`
`)), o = tl(o), o = $u(o, t), o = Qu(o, t), a = tl(a), a = $u(a, t), a = Qu(a, t), o = Ku(o), a = Ku(a), t.isWebGL2 && t.isRawShaderMaterial !== !0 && (_ = `#version 300 es
`, x = ["#define attribute in", "#define varying out", "#define texture2D texture"].join(`
`) + `
`+ x, p = ["#define varying in", t.glslVersion === uu ? "" : "out highp vec4 pc_fragColor;", t.glslVersion === uu ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth", "#define texture2D texture", "#define textureCube texture", "#define texture2DProj textureProj", "#define texture2DLodEXT textureLod", "#define texture2DProjLodEXT textureProjLod", "#define textureCubeLodEXT textureLod", "#define texture2DGradEXT textureGrad", "#define texture2DProjGradEXT textureProjGrad", "#define textureCubeGradEXT textureGrad"].join(`
`) + `
`+ p); let w = _ + x + o, v = _ + p + a, b = Zu(i, 35633, w), T = Zu(i, 35632, v); if (i.attachShader(m, b), i.attachShader(m, T), t.index0AttributeName !== void 0 ? i.bindAttribLocation(m, 0, t.index0AttributeName) : t.morphTargets === !0 && i.bindAttribLocation(m, 0, "position"), i.linkProgram(m), s.debug.checkShaderErrors) {
			let R = i.getProgramInfoLog(m).trim(), D = i.getShaderInfoLog(b).trim(), L = i.getShaderInfoLog(T).trim(), $ = !0, z = !0; if (i.getProgramParameter(m, 35714) === !1) {
				$ = !1; let F = ju(i, b, "vertex"), U = ju(i, T, "fragment"); console.error("THREE.WebGLProgram: Shader Error " + i.getError() + " - VALIDATE_STATUS " + i.getProgramParameter(m, 35715) + `

Program Info Log: `+ R + `
`+ F + `
`+ U)
			} else R !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", R) : (D === "" || L === "") && (z = !1); z && (this.diagnostics = { runnable: $, programLog: R, vertexShader: { log: D, prefix: x }, fragmentShader: { log: L, prefix: p } })
		} i.deleteShader(b), i.deleteShader(T); let y; this.getUniforms = function () { return y === void 0 && (y = new $n(i, m)), y }; let C; return this.getAttributes = function () { return C === void 0 && (C = Nx(i, m)), C }, this.destroy = function () { n.releaseStatesOfProgram(this), i.deleteProgram(m), this.program = void 0 }, this.name = t.shaderName, this.id = Px++, this.cacheKey = e, this.usedTimes = 1, this.program = m, this.vertexShader = b, this.fragmentShader = T, this
	} function Yx(s, e, t, n, i, r, o) { let a = [], l = i.isWebGL2, c = i.logarithmicDepthBuffer, u = i.floatVertexTextures, h = i.maxVertexUniforms, f = i.vertexTextures, d = i.precision, g = { MeshDepthMaterial: "depth", MeshDistanceMaterial: "distanceRGBA", MeshNormalMaterial: "normal", MeshBasicMaterial: "basic", MeshLambertMaterial: "lambert", MeshPhongMaterial: "phong", MeshToonMaterial: "toon", MeshStandardMaterial: "physical", MeshPhysicalMaterial: "physical", MeshMatcapMaterial: "matcap", LineBasicMaterial: "basic", LineDashedMaterial: "dashed", PointsMaterial: "points", ShadowMaterial: "shadow", SpriteMaterial: "sprite" }, m = ["precision", "isWebGL2", "supportsVertexTextures", "outputEncoding", "instancing", "instancingColor", "map", "mapEncoding", "matcap", "matcapEncoding", "envMap", "envMapMode", "envMapEncoding", "envMapCubeUV", "lightMap", "lightMapEncoding", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "tangentSpaceNormalMap", "clearcoat", "clearcoatMap", "clearcoatRoughnessMap", "clearcoatNormalMap", "displacementMap", "specularMap", "specularIntensityMap", "specularTintMap", "specularTintMapEncoding", "roughnessMap", "metalnessMap", "gradientMap", "alphaMap", "alphaTest", "combine", "vertexColors", "vertexAlphas", "vertexTangents", "vertexUvs", "uvsVertexOnly", "fog", "useFog", "fogExp2", "flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning", "maxBones", "useVertexTexture", "morphTargets", "morphNormals", "premultipliedAlpha", "numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights", "numDirLightShadows", "numPointLightShadows", "numSpotLightShadows", "shadowMapEnabled", "shadowMapType", "toneMapping", "physicallyCorrectLights", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering", "format", "sheenTint", "transmission", "transmissionMap", "thicknessMap"]; function x(y) { let R = y.skeleton.bones; if (u) return 1024; { let L = Math.floor((h - 20) / 4), $ = Math.min(L, R.length); return $ < R.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + R.length + " bones. This GPU supports " + $ + "."), 0) : $ } } function p(y) { let C; return y && y.isTexture ? C = y.encoding : y && y.isWebGLRenderTarget ? (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."), C = y.texture.encoding) : C = St, C } function _(y, C, R, D, L) { let $ = D.fog, z = y.isMeshStandardMaterial ? D.environment : null, F = (y.isMeshStandardMaterial ? t : e).get(y.envMap || z), U = g[y.type], N = L.isSkinnedMesh ? x(L) : 0; y.precision !== null && (d = i.getMaxPrecision(y.precision), d !== y.precision && console.warn("THREE.WebGLProgram.getParameters:", y.precision, "not supported, using", d, "instead.")); let k, Q; if (U) { let W = ln[U]; k = W.vertexShader, Q = W.fragmentShader } else k = y.vertexShader, Q = y.fragmentShader; let oe = s.getRenderTarget(), ue = y.alphaTest > 0, ee = y.clearcoat > 0; return { isWebGL2: l, shaderID: U, shaderName: y.type, vertexShader: k, fragmentShader: Q, defines: y.defines, isRawShaderMaterial: y.isRawShaderMaterial === !0, glslVersion: y.glslVersion, precision: d, instancing: L.isInstancedMesh === !0, instancingColor: L.isInstancedMesh === !0 && L.instanceColor !== null, supportsVertexTextures: f, outputEncoding: oe !== null ? p(oe.texture) : s.outputEncoding, map: !!y.map, mapEncoding: p(y.map), matcap: !!y.matcap, matcapEncoding: p(y.matcap), envMap: !!F, envMapMode: F && F.mapping, envMapEncoding: p(F), envMapCubeUV: !!F && (F.mapping === Is || F.mapping === ca), lightMap: !!y.lightMap, lightMapEncoding: p(y.lightMap), aoMap: !!y.aoMap, emissiveMap: !!y.emissiveMap, emissiveMapEncoding: p(y.emissiveMap), bumpMap: !!y.bumpMap, normalMap: !!y.normalMap, objectSpaceNormalMap: y.normalMapType === Rm, tangentSpaceNormalMap: y.normalMapType === Vi, clearcoat: ee, clearcoatMap: ee && !!y.clearcoatMap, clearcoatRoughnessMap: ee && !!y.clearcoatRoughnessMap, clearcoatNormalMap: ee && !!y.clearcoatNormalMap, displacementMap: !!y.displacementMap, roughnessMap: !!y.roughnessMap, metalnessMap: !!y.metalnessMap, specularMap: !!y.specularMap, specularIntensityMap: !!y.specularIntensityMap, specularTintMap: !!y.specularTintMap, specularTintMapEncoding: p(y.specularTintMap), alphaMap: !!y.alphaMap, alphaTest: ue, gradientMap: !!y.gradientMap, sheenTint: !!y.sheenTint && (y.sheenTint.r > 0 || y.sheenTint.g > 0 || y.sheenTint.b > 0), transmission: y.transmission > 0, transmissionMap: !!y.transmissionMap, thicknessMap: !!y.thicknessMap, combine: y.combine, vertexTangents: !!y.normalMap && !!L.geometry && !!L.geometry.attributes.tangent, vertexColors: y.vertexColors, vertexAlphas: y.vertexColors === !0 && !!L.geometry && !!L.geometry.attributes.color && L.geometry.attributes.color.itemSize === 4, vertexUvs: !!y.map || !!y.bumpMap || !!y.normalMap || !!y.specularMap || !!y.alphaMap || !!y.emissiveMap || !!y.roughnessMap || !!y.metalnessMap || !!y.clearcoatMap || !!y.clearcoatRoughnessMap || !!y.clearcoatNormalMap || !!y.displacementMap || !!y.transmissionMap || !!y.thicknessMap || !!y.specularIntensityMap || !!y.specularTintMap, uvsVertexOnly: !(!!y.map || !!y.bumpMap || !!y.normalMap || !!y.specularMap || !!y.alphaMap || !!y.emissiveMap || !!y.roughnessMap || !!y.metalnessMap || !!y.clearcoatNormalMap || y.transmission > 0 || !!y.transmissionMap || !!y.thicknessMap || !!y.specularIntensityMap || !!y.specularTintMap) && !!y.displacementMap, fog: !!$, useFog: y.fog, fogExp2: $ && $.isFogExp2, flatShading: !!y.flatShading, sizeAttenuation: y.sizeAttenuation, logarithmicDepthBuffer: c, skinning: L.isSkinnedMesh === !0 && N > 0, maxBones: N, useVertexTexture: u, morphTargets: !!L.geometry && !!L.geometry.morphAttributes.position, morphNormals: !!L.geometry && !!L.geometry.morphAttributes.normal, numDirLights: C.directional.length, numPointLights: C.point.length, numSpotLights: C.spot.length, numRectAreaLights: C.rectArea.length, numHemiLights: C.hemi.length, numDirLightShadows: C.directionalShadowMap.length, numPointLightShadows: C.pointShadowMap.length, numSpotLightShadows: C.spotShadowMap.length, numClippingPlanes: o.numPlanes, numClipIntersection: o.numIntersection, format: y.format, dithering: y.dithering, shadowMapEnabled: s.shadowMap.enabled && R.length > 0, shadowMapType: s.shadowMap.type, toneMapping: y.toneMapped ? s.toneMapping : gi, physicallyCorrectLights: s.physicallyCorrectLights, premultipliedAlpha: y.premultipliedAlpha, doubleSided: y.side === Bi, flipSided: y.side === Ke, depthPacking: y.depthPacking !== void 0 ? y.depthPacking : !1, index0AttributeName: y.index0AttributeName, extensionDerivatives: y.extensions && y.extensions.derivatives, extensionFragDepth: y.extensions && y.extensions.fragDepth, extensionDrawBuffers: y.extensions && y.extensions.drawBuffers, extensionShaderTextureLOD: y.extensions && y.extensions.shaderTextureLOD, rendererExtensionFragDepth: l || n.has("EXT_frag_depth"), rendererExtensionDrawBuffers: l || n.has("WEBGL_draw_buffers"), rendererExtensionShaderTextureLod: l || n.has("EXT_shader_texture_lod"), customProgramCacheKey: y.customProgramCacheKey() } } function w(y) { let C = []; if (y.shaderID ? C.push(y.shaderID) : (C.push(y.fragmentShader), C.push(y.vertexShader)), y.defines !== void 0) for (let R in y.defines) C.push(R), C.push(y.defines[R]); if (y.isRawShaderMaterial === !1) { for (let R = 0; R < m.length; R++)C.push(y[m[R]]); C.push(s.outputEncoding), C.push(s.gammaFactor) } return C.push(y.customProgramCacheKey), C.join() } function v(y) { let C = g[y.type], R; if (C) { let D = ln[C]; R = Xm.clone(D.uniforms) } else R = y.uniforms; return R } function b(y, C) { let R; for (let D = 0, L = a.length; D < L; D++) { let $ = a[D]; if ($.cacheKey === C) { R = $, ++R.usedTimes; break } } return R === void 0 && (R = new Xx(s, C, y, r), a.push(R)), R } function T(y) { if (--y.usedTimes == 0) { let C = a.indexOf(y); a[C] = a[a.length - 1], a.pop(), y.destroy() } } return { getParameters: _, getProgramCacheKey: w, getUniforms: v, acquireProgram: b, releaseProgram: T, programs: a } } function Zx() { let s = new WeakMap; function e(r) { let o = s.get(r); return o === void 0 && (o = {}, s.set(r, o)), o } function t(r) { s.delete(r) } function n(r, o, a) { s.get(r)[o] = a } function i() { s = new WeakMap } return { get: e, remove: t, update: n, dispose: i } } function Jx(s, e) { return s.groupOrder !== e.groupOrder ? s.groupOrder - e.groupOrder : s.renderOrder !== e.renderOrder ? s.renderOrder - e.renderOrder : s.program !== e.program ? s.program.id - e.program.id : s.material.id !== e.material.id ? s.material.id - e.material.id : s.z !== e.z ? s.z - e.z : s.id - e.id } function nh(s, e) { return s.groupOrder !== e.groupOrder ? s.groupOrder - e.groupOrder : s.renderOrder !== e.renderOrder ? s.renderOrder - e.renderOrder : s.z !== e.z ? e.z - s.z : s.id - e.id } function ih(s) { let e = [], t = 0, n = [], i = [], r = [], o = { id: -1 }; function a() { t = 0, n.length = 0, i.length = 0, r.length = 0 } function l(d, g, m, x, p, _) { let w = e[t], v = s.get(m); return w === void 0 ? (w = { id: d.id, object: d, geometry: g, material: m, program: v.program || o, groupOrder: x, renderOrder: d.renderOrder, z: p, group: _ }, e[t] = w) : (w.id = d.id, w.object = d, w.geometry = g, w.material = m, w.program = v.program || o, w.groupOrder = x, w.renderOrder = d.renderOrder, w.z = p, w.group = _), t++, w } function c(d, g, m, x, p, _) { let w = l(d, g, m, x, p, _); m.transmission > 0 ? i.push(w) : m.transparent === !0 ? r.push(w) : n.push(w) } function u(d, g, m, x, p, _) { let w = l(d, g, m, x, p, _); m.transmission > 0 ? i.unshift(w) : m.transparent === !0 ? r.unshift(w) : n.unshift(w) } function h(d, g) { n.length > 1 && n.sort(d || Jx), i.length > 1 && i.sort(g || nh), r.length > 1 && r.sort(g || nh) } function f() { for (let d = t, g = e.length; d < g; d++) { let m = e[d]; if (m.id === null) break; m.id = null, m.object = null, m.geometry = null, m.material = null, m.program = null, m.group = null } } return { opaque: n, transmissive: i, transparent: r, init: a, push: c, unshift: u, finish: f, sort: h } } function jx(s) { let e = new WeakMap; function t(i, r) { let o; return e.has(i) === !1 ? (o = new ih(s), e.set(i, [o])) : r >= e.get(i).length ? (o = new ih(s), e.get(i).push(o)) : o = e.get(i)[r], o } function n() { e = new WeakMap } return { get: t, dispose: n } } function $x() { let s = {}; return { get: function (e) { if (s[e.id] !== void 0) return s[e.id]; let t; switch (e.type) { case "DirectionalLight": t = { direction: new A, color: new se }; break; case "SpotLight": t = { position: new A, direction: new A, color: new se, distance: 0, coneCos: 0, penumbraCos: 0, decay: 0 }; break; case "PointLight": t = { position: new A, color: new se, distance: 0, decay: 0 }; break; case "HemisphereLight": t = { direction: new A, skyColor: new se, groundColor: new se }; break; case "RectAreaLight": t = { color: new se, position: new A, halfWidth: new A, halfHeight: new A }; break }return s[e.id] = t, t } } } function Qx() { let s = {}; return { get: function (e) { if (s[e.id] !== void 0) return s[e.id]; let t; switch (e.type) { case "DirectionalLight": t = { shadowBias: 0, shadowNormalBias: 0, shadowRadius: 1, shadowMapSize: new Y }; break; case "SpotLight": t = { shadowBias: 0, shadowNormalBias: 0, shadowRadius: 1, shadowMapSize: new Y }; break; case "PointLight": t = { shadowBias: 0, shadowNormalBias: 0, shadowRadius: 1, shadowMapSize: new Y, shadowCameraNear: 1, shadowCameraFar: 1e3 }; break }return s[e.id] = t, t } } } var Kx = 0; function ey(s, e) { return (e.castShadow ? 1 : 0) - (s.castShadow ? 1 : 0) } function ty(s, e) { let t = new $x, n = Qx(), i = { version: 0, hash: { directionalLength: -1, pointLength: -1, spotLength: -1, rectAreaLength: -1, hemiLength: -1, numDirectionalShadows: -1, numPointShadows: -1, numSpotShadows: -1 }, ambient: [0, 0, 0], probe: [], directional: [], directionalShadow: [], directionalShadowMap: [], directionalShadowMatrix: [], spot: [], spotShadow: [], spotShadowMap: [], spotShadowMatrix: [], rectArea: [], rectAreaLTC1: null, rectAreaLTC2: null, point: [], pointShadow: [], pointShadowMap: [], pointShadowMatrix: [], hemi: [] }; for (let u = 0; u < 9; u++)i.probe.push(new A); let r = new A, o = new xe, a = new xe; function l(u, h) { let f = 0, d = 0, g = 0; for (let R = 0; R < 9; R++)i.probe[R].set(0, 0, 0); let m = 0, x = 0, p = 0, _ = 0, w = 0, v = 0, b = 0, T = 0; u.sort(ey); let y = h !== !0 ? Math.PI : 1; for (let R = 0, D = u.length; R < D; R++) { let L = u[R], $ = L.color, z = L.intensity, F = L.distance, U = L.shadow && L.shadow.map ? L.shadow.map.texture : null; if (L.isAmbientLight) f += $.r * z * y, d += $.g * z * y, g += $.b * z * y; else if (L.isLightProbe) for (let N = 0; N < 9; N++)i.probe[N].addScaledVector(L.sh.coefficients[N], z); else if (L.isDirectionalLight) { let N = t.get(L); if (N.color.copy(L.color).multiplyScalar(L.intensity * y), L.castShadow) { let k = L.shadow, Q = n.get(L); Q.shadowBias = k.bias, Q.shadowNormalBias = k.normalBias, Q.shadowRadius = k.radius, Q.shadowMapSize = k.mapSize, i.directionalShadow[m] = Q, i.directionalShadowMap[m] = U, i.directionalShadowMatrix[m] = L.shadow.matrix, v++ } i.directional[m] = N, m++ } else if (L.isSpotLight) { let N = t.get(L); if (N.position.setFromMatrixPosition(L.matrixWorld), N.color.copy($).multiplyScalar(z * y), N.distance = F, N.coneCos = Math.cos(L.angle), N.penumbraCos = Math.cos(L.angle * (1 - L.penumbra)), N.decay = L.decay, L.castShadow) { let k = L.shadow, Q = n.get(L); Q.shadowBias = k.bias, Q.shadowNormalBias = k.normalBias, Q.shadowRadius = k.radius, Q.shadowMapSize = k.mapSize, i.spotShadow[p] = Q, i.spotShadowMap[p] = U, i.spotShadowMatrix[p] = L.shadow.matrix, T++ } i.spot[p] = N, p++ } else if (L.isRectAreaLight) { let N = t.get(L); N.color.copy($).multiplyScalar(z), N.halfWidth.set(L.width * .5, 0, 0), N.halfHeight.set(0, L.height * .5, 0), i.rectArea[_] = N, _++ } else if (L.isPointLight) { let N = t.get(L); if (N.color.copy(L.color).multiplyScalar(L.intensity * y), N.distance = L.distance, N.decay = L.decay, L.castShadow) { let k = L.shadow, Q = n.get(L); Q.shadowBias = k.bias, Q.shadowNormalBias = k.normalBias, Q.shadowRadius = k.radius, Q.shadowMapSize = k.mapSize, Q.shadowCameraNear = k.camera.near, Q.shadowCameraFar = k.camera.far, i.pointShadow[x] = Q, i.pointShadowMap[x] = U, i.pointShadowMatrix[x] = L.shadow.matrix, b++ } i.point[x] = N, x++ } else if (L.isHemisphereLight) { let N = t.get(L); N.skyColor.copy(L.color).multiplyScalar(z * y), N.groundColor.copy(L.groundColor).multiplyScalar(z * y), i.hemi[w] = N, w++ } } _ > 0 && (e.isWebGL2 || s.has("OES_texture_float_linear") === !0 ? (i.rectAreaLTC1 = te.LTC_FLOAT_1, i.rectAreaLTC2 = te.LTC_FLOAT_2) : s.has("OES_texture_half_float_linear") === !0 ? (i.rectAreaLTC1 = te.LTC_HALF_1, i.rectAreaLTC2 = te.LTC_HALF_2) : console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")), i.ambient[0] = f, i.ambient[1] = d, i.ambient[2] = g; let C = i.hash; (C.directionalLength !== m || C.pointLength !== x || C.spotLength !== p || C.rectAreaLength !== _ || C.hemiLength !== w || C.numDirectionalShadows !== v || C.numPointShadows !== b || C.numSpotShadows !== T) && (i.directional.length = m, i.spot.length = p, i.rectArea.length = _, i.point.length = x, i.hemi.length = w, i.directionalShadow.length = v, i.directionalShadowMap.length = v, i.pointShadow.length = b, i.pointShadowMap.length = b, i.spotShadow.length = T, i.spotShadowMap.length = T, i.directionalShadowMatrix.length = v, i.pointShadowMatrix.length = b, i.spotShadowMatrix.length = T, C.directionalLength = m, C.pointLength = x, C.spotLength = p, C.rectAreaLength = _, C.hemiLength = w, C.numDirectionalShadows = v, C.numPointShadows = b, C.numSpotShadows = T, i.version = Kx++) } function c(u, h) { let f = 0, d = 0, g = 0, m = 0, x = 0, p = h.matrixWorldInverse; for (let _ = 0, w = u.length; _ < w; _++) { let v = u[_]; if (v.isDirectionalLight) { let b = i.directional[f]; b.direction.setFromMatrixPosition(v.matrixWorld), r.setFromMatrixPosition(v.target.matrixWorld), b.direction.sub(r), b.direction.transformDirection(p), f++ } else if (v.isSpotLight) { let b = i.spot[g]; b.position.setFromMatrixPosition(v.matrixWorld), b.position.applyMatrix4(p), b.direction.setFromMatrixPosition(v.matrixWorld), r.setFromMatrixPosition(v.target.matrixWorld), b.direction.sub(r), b.direction.transformDirection(p), g++ } else if (v.isRectAreaLight) { let b = i.rectArea[m]; b.position.setFromMatrixPosition(v.matrixWorld), b.position.applyMatrix4(p), a.identity(), o.copy(v.matrixWorld), o.premultiply(p), a.extractRotation(o), b.halfWidth.set(v.width * .5, 0, 0), b.halfHeight.set(0, v.height * .5, 0), b.halfWidth.applyMatrix4(a), b.halfHeight.applyMatrix4(a), m++ } else if (v.isPointLight) { let b = i.point[d]; b.position.setFromMatrixPosition(v.matrixWorld), b.position.applyMatrix4(p), d++ } else if (v.isHemisphereLight) { let b = i.hemi[x]; b.direction.setFromMatrixPosition(v.matrixWorld), b.direction.transformDirection(p), b.direction.normalize(), x++ } } } return { setup: l, setupView: c, state: i } } function rh(s, e) { let t = new ty(s, e), n = [], i = []; function r() { n.length = 0, i.length = 0 } function o(h) { n.push(h) } function a(h) { i.push(h) } function l(h) { t.setup(n, h) } function c(h) { t.setupView(n, h) } return { init: r, state: { lightsArray: n, shadowsArray: i, lights: t }, setupLights: l, setupLightsView: c, pushLight: o, pushShadow: a } } function ny(s, e) { let t = new WeakMap; function n(r, o = 0) { let a; return t.has(r) === !1 ? (a = new rh(s, e), t.set(r, [a])) : o >= t.get(r).length ? (a = new rh(s, e), t.get(r).push(a)) : a = t.get(r)[o], a } function i() { t = new WeakMap } return { get: n, dispose: i } } var nl = class extends ht { constructor(e) { super(); this.type = "MeshDepthMaterial", this.depthPacking = Cm, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.setValues(e) } copy(e) { return super.copy(e), this.depthPacking = e.depthPacking, this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this } }; nl.prototype.isMeshDepthMaterial = !0; var il = class extends ht { constructor(e) { super(); this.type = "MeshDistanceMaterial", this.referencePosition = new A, this.nearDistance = 1, this.farDistance = 1e3, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.fog = !1, this.setValues(e) } copy(e) { return super.copy(e), this.referencePosition.copy(e.referencePosition), this.nearDistance = e.nearDistance, this.farDistance = e.farDistance, this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this } }; il.prototype.isMeshDistanceMaterial = !0; var iy = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
uniform float samples;
#include <packing>
void main() {
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`, ry = `void main() {
	gl_Position = vec4( position, 1.0 );
}`; function sh(s, e, t) { let n = new Yr, i = new Y, r = new Y, o = new Oe, a = new nl({ depthPacking: Pm }), l = new il, c = {}, u = t.maxTextureSize, h = { 0: Ke, 1: zr, 2: Bi }, f = new Gt({ uniforms: { shadow_pass: { value: null }, resolution: { value: new Y }, radius: { value: 4 }, samples: { value: 8 } }, vertexShader: ry, fragmentShader: iy }), d = f.clone(); d.defines.HORIZONTAL_PASS = 1; let g = new We; g.setAttribute("position", new Qe(new Float32Array([-1, -1, .5, 3, -1, .5, -1, 3, .5]), 3)); let m = new tt(g, f), x = this; this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = Oc, this.render = function (v, b, T) { if (x.enabled === !1 || x.autoUpdate === !1 && x.needsUpdate === !1 || v.length === 0) return; let y = s.getRenderTarget(), C = s.getActiveCubeFace(), R = s.getActiveMipmapLevel(), D = s.state; D.setBlending(On), D.buffers.color.setClear(1, 1, 1, 1), D.buffers.depth.setTest(!0), D.setScissorTest(!1); for (let L = 0, $ = v.length; L < $; L++) { let z = v[L], F = z.shadow; if (F === void 0) { console.warn("THREE.WebGLShadowMap:", z, "has no shadow."); continue } if (F.autoUpdate === !1 && F.needsUpdate === !1) continue; i.copy(F.mapSize); let U = F.getFrameExtents(); if (i.multiply(U), r.copy(F.mapSize), (i.x > u || i.y > u) && (i.x > u && (r.x = Math.floor(u / U.x), i.x = r.x * U.x, F.mapSize.x = r.x), i.y > u && (r.y = Math.floor(u / U.y), i.y = r.y * U.y, F.mapSize.y = r.y)), F.map === null && !F.isPointLightShadow && this.type === Nr) { let k = { minFilter: Ut, magFilter: Ut, format: It }; F.map = new $t(i.x, i.y, k), F.map.texture.name = z.name + ".shadowMap", F.mapPass = new $t(i.x, i.y, k), F.camera.updateProjectionMatrix() } if (F.map === null) { let k = { minFilter: rt, magFilter: rt, format: It }; F.map = new $t(i.x, i.y, k), F.map.texture.name = z.name + ".shadowMap", F.camera.updateProjectionMatrix() } s.setRenderTarget(F.map), s.clear(); let N = F.getViewportCount(); for (let k = 0; k < N; k++) { let Q = F.getViewport(k); o.set(r.x * Q.x, r.y * Q.y, r.x * Q.z, r.y * Q.w), D.viewport(o), F.updateMatrices(z, k), n = F.getFrustum(), w(b, T, F.camera, z, this.type) } !F.isPointLightShadow && this.type === Nr && p(F, T), F.needsUpdate = !1 } x.needsUpdate = !1, s.setRenderTarget(y, C, R) }; function p(v, b) { let T = e.update(m); f.uniforms.shadow_pass.value = v.map.texture, f.uniforms.resolution.value = v.mapSize, f.uniforms.radius.value = v.radius, f.uniforms.samples.value = v.blurSamples, s.setRenderTarget(v.mapPass), s.clear(), s.renderBufferDirect(b, null, T, f, m, null), d.uniforms.shadow_pass.value = v.mapPass.texture, d.uniforms.resolution.value = v.mapSize, d.uniforms.radius.value = v.radius, d.uniforms.samples.value = v.blurSamples, s.setRenderTarget(v.map), s.clear(), s.renderBufferDirect(b, null, T, d, m, null) } function _(v, b, T, y, C, R, D) { let L = null, $ = y.isPointLight === !0 ? v.customDistanceMaterial : v.customDepthMaterial; if ($ !== void 0 ? L = $ : L = y.isPointLight === !0 ? l : a, s.localClippingEnabled && T.clipShadows === !0 && T.clippingPlanes.length !== 0 || T.displacementMap && T.displacementScale !== 0 || T.alphaMap && T.alphaTest > 0) { let z = L.uuid, F = T.uuid, U = c[z]; U === void 0 && (U = {}, c[z] = U); let N = U[F]; N === void 0 && (N = L.clone(), U[F] = N), L = N } return L.visible = T.visible, L.wireframe = T.wireframe, D === Nr ? L.side = T.shadowSide !== null ? T.shadowSide : T.side : L.side = T.shadowSide !== null ? T.shadowSide : h[T.side], L.alphaMap = T.alphaMap, L.alphaTest = T.alphaTest, L.clipShadows = T.clipShadows, L.clippingPlanes = T.clippingPlanes, L.clipIntersection = T.clipIntersection, L.displacementMap = T.displacementMap, L.displacementScale = T.displacementScale, L.displacementBias = T.displacementBias, L.wireframeLinewidth = T.wireframeLinewidth, L.linewidth = T.linewidth, y.isPointLight === !0 && L.isMeshDistanceMaterial === !0 && (L.referencePosition.setFromMatrixPosition(y.matrixWorld), L.nearDistance = C, L.farDistance = R), L } function w(v, b, T, y, C) { if (v.visible === !1) return; if (v.layers.test(b.layers) && (v.isMesh || v.isLine || v.isPoints) && (v.castShadow || v.receiveShadow && C === Nr) && (!v.frustumCulled || n.intersectsObject(v))) { v.modelViewMatrix.multiplyMatrices(T.matrixWorldInverse, v.matrixWorld); let L = e.update(v), $ = v.material; if (Array.isArray($)) { let z = L.groups; for (let F = 0, U = z.length; F < U; F++) { let N = z[F], k = $[N.materialIndex]; if (k && k.visible) { let Q = _(v, L, k, y, T.near, T.far, C); s.renderBufferDirect(T, null, L, Q, v, N) } } } else if ($.visible) { let z = _(v, L, $, y, T.near, T.far, C); s.renderBufferDirect(T, null, L, z, v, null) } } let D = v.children; for (let L = 0, $ = D.length; L < $; L++)w(D[L], b, T, y, C) } } function sy(s, e, t) { let n = t.isWebGL2; function i() { let P = !1, re = new Oe, q = null, le = new Oe(0, 0, 0, 0); return { setMask: function (fe) { q !== fe && !P && (s.colorMask(fe, fe, fe, fe), q = fe) }, setLocked: function (fe) { P = fe }, setClear: function (fe, Re, mt, gt, Bn) { Bn === !0 && (fe *= gt, Re *= gt, mt *= gt), re.set(fe, Re, mt, gt), le.equals(re) === !1 && (s.clearColor(fe, Re, mt, gt), le.copy(re)) }, reset: function () { P = !1, q = null, le.set(-1, 0, 0, 0) } } } function r() { let P = !1, re = null, q = null, le = null; return { setTest: function (fe) { fe ? j(2929) : de(2929) }, setMask: function (fe) { re !== fe && !P && (s.depthMask(fe), re = fe) }, setFunc: function (fe) { if (q !== fe) { if (fe) switch (fe) { case _p: s.depthFunc(512); break; case xp: s.depthFunc(519); break; case yp: s.depthFunc(513); break; case oa: s.depthFunc(515); break; case vp: s.depthFunc(514); break; case wp: s.depthFunc(518); break; case bp: s.depthFunc(516); break; case Mp: s.depthFunc(517); break; default: s.depthFunc(515) } else s.depthFunc(515); q = fe } }, setLocked: function (fe) { P = fe }, setClear: function (fe) { le !== fe && (s.clearDepth(fe), le = fe) }, reset: function () { P = !1, re = null, q = null, le = null } } } function o() { let P = !1, re = null, q = null, le = null, fe = null, Re = null, mt = null, gt = null, Bn = null; return { setTest: function (Ze) { P || (Ze ? j(2960) : de(2960)) }, setMask: function (Ze) { re !== Ze && !P && (s.stencilMask(Ze), re = Ze) }, setFunc: function (Ze, _n, xn) { (q !== Ze || le !== _n || fe !== xn) && (s.stencilFunc(Ze, _n, xn), q = Ze, le = _n, fe = xn) }, setOp: function (Ze, _n, xn) { (Re !== Ze || mt !== _n || gt !== xn) && (s.stencilOp(Ze, _n, xn), Re = Ze, mt = _n, gt = xn) }, setLocked: function (Ze) { P = Ze }, setClear: function (Ze) { Bn !== Ze && (s.clearStencil(Ze), Bn = Ze) }, reset: function () { P = !1, re = null, q = null, le = null, fe = null, Re = null, mt = null, gt = null, Bn = null } } } let a = new i, l = new r, c = new o, u = {}, h = null, f = {}, d = null, g = !1, m = null, x = null, p = null, _ = null, w = null, v = null, b = null, T = !1, y = null, C = null, R = null, D = null, L = null, $ = s.getParameter(35661), z = !1, F = 0, U = s.getParameter(7938); U.indexOf("WebGL") !== -1 ? (F = parseFloat(/^WebGL (\d)/.exec(U)[1]), z = F >= 1) : U.indexOf("OpenGL ES") !== -1 && (F = parseFloat(/^OpenGL ES (\d)/.exec(U)[1]), z = F >= 2); let N = null, k = {}, Q = s.getParameter(3088), oe = s.getParameter(2978), ue = new Oe().fromArray(Q), ee = new Oe().fromArray(oe); function we(P, re, q) { let le = new Uint8Array(4), fe = s.createTexture(); s.bindTexture(P, fe), s.texParameteri(P, 10241, 9728), s.texParameteri(P, 10240, 9728); for (let Re = 0; Re < q; Re++)s.texImage2D(re + Re, 0, 6408, 1, 1, 0, 6408, 5121, le); return fe } let W = {}; W[3553] = we(3553, 3553, 1), W[34067] = we(34067, 34069, 6), a.setClear(0, 0, 0, 1), l.setClear(1), c.setClear(0), j(2929), l.setFunc(oa), J(!1), K(zc), j(2884), Ee(On); function j(P) { u[P] !== !0 && (s.enable(P), u[P] = !0) } function de(P) { u[P] !== !1 && (s.disable(P), u[P] = !1) } function O(P) { P !== h && (s.bindFramebuffer(36160, P), h = P) } function _e(P, re) { return re === null && h !== null && (re = h), f[P] !== re ? (s.bindFramebuffer(P, re), f[P] = re, n && (P === 36009 && (f[36160] = re), P === 36160 && (f[36009] = re)), !0) : !1 } function Me(P) { return d !== P ? (s.useProgram(P), d = P, !0) : !1 } let ce = { [Ni]: 32774, [op]: 32778, [ap]: 32779 }; if (n) ce[Vc] = 32775, ce[Wc] = 32776; else { let P = e.get("EXT_blend_minmax"); P !== null && (ce[Vc] = P.MIN_EXT, ce[Wc] = P.MAX_EXT) } let he = { [lp]: 0, [cp]: 1, [up]: 768, [qc]: 770, [gp]: 776, [pp]: 774, [fp]: 772, [hp]: 769, [Xc]: 771, [mp]: 775, [dp]: 773 }; function Ee(P, re, q, le, fe, Re, mt, gt) { if (P === On) { g === !0 && (de(3042), g = !1); return } if (g === !1 && (j(3042), g = !0), P !== sp) { if (P !== m || gt !== T) { if ((x !== Ni || w !== Ni) && (s.blendEquation(32774), x = Ni, w = Ni), gt) switch (P) { case Or: s.blendFuncSeparate(1, 771, 1, 771); break; case kc: s.blendFunc(1, 1); break; case Hc: s.blendFuncSeparate(0, 0, 769, 771); break; case Gc: s.blendFuncSeparate(0, 768, 0, 770); break; default: console.error("THREE.WebGLState: Invalid blending: ", P); break } else switch (P) { case Or: s.blendFuncSeparate(770, 771, 1, 771); break; case kc: s.blendFunc(770, 1); break; case Hc: s.blendFunc(0, 769); break; case Gc: s.blendFunc(0, 768); break; default: console.error("THREE.WebGLState: Invalid blending: ", P); break }p = null, _ = null, v = null, b = null, m = P, T = gt } return } fe = fe || re, Re = Re || q, mt = mt || le, (re !== x || fe !== w) && (s.blendEquationSeparate(ce[re], ce[fe]), x = re, w = fe), (q !== p || le !== _ || Re !== v || mt !== b) && (s.blendFuncSeparate(he[q], he[le], he[Re], he[mt]), p = q, _ = le, v = Re, b = mt), m = P, T = null } function V(P, re) { P.side === Bi ? de(2884) : j(2884); let q = P.side === Ke; re && (q = !q), J(q), P.blending === Or && P.transparent === !1 ? Ee(On) : Ee(P.blending, P.blendEquation, P.blendSrc, P.blendDst, P.blendEquationAlpha, P.blendSrcAlpha, P.blendDstAlpha, P.premultipliedAlpha), l.setFunc(P.depthFunc), l.setTest(P.depthTest), l.setMask(P.depthWrite), a.setMask(P.colorWrite); let le = P.stencilWrite; c.setTest(le), le && (c.setMask(P.stencilWriteMask), c.setFunc(P.stencilFunc, P.stencilRef, P.stencilFuncMask), c.setOp(P.stencilFail, P.stencilZFail, P.stencilZPass)), ie(P.polygonOffset, P.polygonOffsetFactor, P.polygonOffsetUnits), P.alphaToCoverage === !0 ? j(32926) : de(32926) } function J(P) { y !== P && (P ? s.frontFace(2304) : s.frontFace(2305), y = P) } function K(P) { P !== np ? (j(2884), P !== C && (P === zc ? s.cullFace(1029) : P === ip ? s.cullFace(1028) : s.cullFace(1032))) : de(2884), C = P } function pe(P) { P !== R && (z && s.lineWidth(P), R = P) } function ie(P, re, q) { P ? (j(32823), (D !== re || L !== q) && (s.polygonOffset(re, q), D = re, L = q)) : de(32823) } function E(P) { P ? j(3089) : de(3089) } function S(P) { P === void 0 && (P = 33984 + $ - 1), N !== P && (s.activeTexture(P), N = P) } function G(P, re) { N === null && S(); let q = k[N]; q === void 0 && (q = { type: void 0, texture: void 0 }, k[N] = q), (q.type !== P || q.texture !== re) && (s.bindTexture(P, re || W[P]), q.type = P, q.texture = re) } function X() { let P = k[N]; P !== void 0 && P.type !== void 0 && (s.bindTexture(P.type, null), P.type = void 0, P.texture = void 0) } function ne() { try { s.compressedTexImage2D.apply(s, arguments) } catch (P) { console.error("THREE.WebGLState:", P) } } function ae() { try { s.texImage2D.apply(s, arguments) } catch (P) { console.error("THREE.WebGLState:", P) } } function be() { try { s.texImage3D.apply(s, arguments) } catch (P) { console.error("THREE.WebGLState:", P) } } function ge(P) { ue.equals(P) === !1 && (s.scissor(P.x, P.y, P.z, P.w), ue.copy(P)) } function Te(P) { ee.equals(P) === !1 && (s.viewport(P.x, P.y, P.z, P.w), ee.copy(P)) } function me() { s.disable(3042), s.disable(2884), s.disable(2929), s.disable(32823), s.disable(3089), s.disable(2960), s.disable(32926), s.blendEquation(32774), s.blendFunc(1, 0), s.blendFuncSeparate(1, 0, 1, 0), s.colorMask(!0, !0, !0, !0), s.clearColor(0, 0, 0, 0), s.depthMask(!0), s.depthFunc(513), s.clearDepth(1), s.stencilMask(4294967295), s.stencilFunc(519, 0, 4294967295), s.stencilOp(7680, 7680, 7680), s.clearStencil(0), s.cullFace(1029), s.frontFace(2305), s.polygonOffset(0, 0), s.activeTexture(33984), s.bindFramebuffer(36160, null), n === !0 && (s.bindFramebuffer(36009, null), s.bindFramebuffer(36008, null)), s.useProgram(null), s.lineWidth(1), s.scissor(0, 0, s.canvas.width, s.canvas.height), s.viewport(0, 0, s.canvas.width, s.canvas.height), u = {}, N = null, k = {}, h = null, f = {}, d = null, g = !1, m = null, x = null, p = null, _ = null, w = null, v = null, b = null, T = !1, y = null, C = null, R = null, D = null, L = null, ue.set(0, 0, s.canvas.width, s.canvas.height), ee.set(0, 0, s.canvas.width, s.canvas.height), a.reset(), l.reset(), c.reset() } return { buffers: { color: a, depth: l, stencil: c }, enable: j, disable: de, bindFramebuffer: _e, bindXRFramebuffer: O, useProgram: Me, setBlending: Ee, setMaterial: V, setFlipSided: J, setCullFace: K, setLineWidth: pe, setPolygonOffset: ie, setScissorTest: E, activeTexture: S, bindTexture: G, unbindTexture: X, compressedTexImage2D: ne, texImage2D: ae, texImage3D: be, scissor: ge, viewport: Te, reset: me } } function oy(s, e, t, n, i, r, o) { let a = i.isWebGL2, l = i.maxTextures, c = i.maxCubemapSize, u = i.maxTextureSize, h = i.maxSamples, f = new WeakMap, d, g = !1; try { g = typeof OffscreenCanvas != "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null } catch (E) { } function m(E, S) { return g ? new OffscreenCanvas(E, S) : document.createElementNS("http://www.w3.org/1999/xhtml", "canvas") } function x(E, S, G, X) { let ne = 1; if ((E.width > X || E.height > X) && (ne = X / Math.max(E.width, E.height)), ne < 1 || S === !0) if (typeof HTMLImageElement != "undefined" && E instanceof HTMLImageElement || typeof HTMLCanvasElement != "undefined" && E instanceof HTMLCanvasElement || typeof ImageBitmap != "undefined" && E instanceof ImageBitmap) { let ae = S ? Fm : Math.floor, be = ae(ne * E.width), ge = ae(ne * E.height); d === void 0 && (d = m(be, ge)); let Te = G ? m(be, ge) : d; return Te.width = be, Te.height = ge, Te.getContext("2d").drawImage(E, 0, 0, be, ge), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + E.width + "x" + E.height + ") to (" + be + "x" + ge + ")."), Te } else return "data" in E && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + E.width + "x" + E.height + ")."), E; return E } function p(E) { return hu(E.width) && hu(E.height) } function _(E) { return a ? !1 : E.wrapS !== Rt || E.wrapT !== Rt || E.minFilter !== rt && E.minFilter !== Ut } function w(E, S) { return E.generateMipmaps && S && E.minFilter !== rt && E.minFilter !== Ut } function v(E, S, G, X, ne = 1) { s.generateMipmap(E); let ae = n.get(S); ae.__maxMipLevel = Math.log2(Math.max(G, X, ne)) } function b(E, S, G) { if (a === !1) return S; if (E !== null) { if (s[E] !== void 0) return s[E]; console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + E + "'") } let X = S; return S === 6403 && (G === 5126 && (X = 33326), G === 5131 && (X = 33325), G === 5121 && (X = 33321)), S === 6407 && (G === 5126 && (X = 34837), G === 5131 && (X = 34843), G === 5121 && (X = 32849)), S === 6408 && (G === 5126 && (X = 34836), G === 5131 && (X = 34842), G === 5121 && (X = 32856)), (X === 33325 || X === 33326 || X === 34842 || X === 34836) && e.get("EXT_color_buffer_float"), X } function T(E) { return E === rt || E === Zc || E === Jc ? 9728 : 9729 } function y(E) { let S = E.target; S.removeEventListener("dispose", y), R(S), S.isVideoTexture && f.delete(S), o.memory.textures-- } function C(E) { let S = E.target; S.removeEventListener("dispose", C), D(S) } function R(E) { let S = n.get(E); S.__webglInit !== void 0 && (s.deleteTexture(S.__webglTexture), n.remove(E)) } function D(E) { let S = E.texture, G = n.get(E), X = n.get(S); if (!!E) { if (X.__webglTexture !== void 0 && (s.deleteTexture(X.__webglTexture), o.memory.textures--), E.depthTexture && E.depthTexture.dispose(), E.isWebGLCubeRenderTarget) for (let ne = 0; ne < 6; ne++)s.deleteFramebuffer(G.__webglFramebuffer[ne]), G.__webglDepthbuffer && s.deleteRenderbuffer(G.__webglDepthbuffer[ne]); else s.deleteFramebuffer(G.__webglFramebuffer), G.__webglDepthbuffer && s.deleteRenderbuffer(G.__webglDepthbuffer), G.__webglMultisampledFramebuffer && s.deleteFramebuffer(G.__webglMultisampledFramebuffer), G.__webglColorRenderbuffer && s.deleteRenderbuffer(G.__webglColorRenderbuffer), G.__webglDepthRenderbuffer && s.deleteRenderbuffer(G.__webglDepthRenderbuffer); if (E.isWebGLMultipleRenderTargets) for (let ne = 0, ae = S.length; ne < ae; ne++) { let be = n.get(S[ne]); be.__webglTexture && (s.deleteTexture(be.__webglTexture), o.memory.textures--), n.remove(S[ne]) } n.remove(S), n.remove(E) } } let L = 0; function $() { L = 0 } function z() { let E = L; return E >= l && console.warn("THREE.WebGLTextures: Trying to use " + E + " texture units while this GPU supports only " + l), L += 1, E } function F(E, S) { let G = n.get(E); if (E.isVideoTexture && V(E), E.version > 0 && G.__version !== E.version) { let X = E.image; if (X === void 0) console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined"); else if (X.complete === !1) console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete"); else { we(G, E, S); return } } t.activeTexture(33984 + S), t.bindTexture(3553, G.__webglTexture) } function U(E, S) { let G = n.get(E); if (E.version > 0 && G.__version !== E.version) { we(G, E, S); return } t.activeTexture(33984 + S), t.bindTexture(35866, G.__webglTexture) } function N(E, S) { let G = n.get(E); if (E.version > 0 && G.__version !== E.version) { we(G, E, S); return } t.activeTexture(33984 + S), t.bindTexture(32879, G.__webglTexture) } function k(E, S) { let G = n.get(E); if (E.version > 0 && G.__version !== E.version) { W(G, E, S); return } t.activeTexture(33984 + S), t.bindTexture(34067, G.__webglTexture) } let Q = { [ua]: 10497, [Rt]: 33071, [ha]: 33648 }, oe = { [rt]: 9728, [Zc]: 9984, [Jc]: 9986, [Ut]: 9729, [Rp]: 9985, [Ds]: 9987 }; function ue(E, S, G) { if (G ? (s.texParameteri(E, 10242, Q[S.wrapS]), s.texParameteri(E, 10243, Q[S.wrapT]), (E === 32879 || E === 35866) && s.texParameteri(E, 32882, Q[S.wrapR]), s.texParameteri(E, 10240, oe[S.magFilter]), s.texParameteri(E, 10241, oe[S.minFilter])) : (s.texParameteri(E, 10242, 33071), s.texParameteri(E, 10243, 33071), (E === 32879 || E === 35866) && s.texParameteri(E, 32882, 33071), (S.wrapS !== Rt || S.wrapT !== Rt) && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), s.texParameteri(E, 10240, T(S.magFilter)), s.texParameteri(E, 10241, T(S.minFilter)), S.minFilter !== rt && S.minFilter !== Ut && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")), e.has("EXT_texture_filter_anisotropic") === !0) { let X = e.get("EXT_texture_filter_anisotropic"); if (S.type === _i && e.has("OES_texture_float_linear") === !1 || a === !1 && S.type === Oi && e.has("OES_texture_half_float_linear") === !1) return; (S.anisotropy > 1 || n.get(S).__currentAnisotropy) && (s.texParameterf(E, X.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(S.anisotropy, i.getMaxAnisotropy())), n.get(S).__currentAnisotropy = S.anisotropy) } } function ee(E, S) { E.__webglInit === void 0 && (E.__webglInit = !0, S.addEventListener("dispose", y), E.__webglTexture = s.createTexture(), o.memory.textures++) } function we(E, S, G) { let X = 3553; S.isDataTexture2DArray && (X = 35866), S.isDataTexture3D && (X = 32879), ee(E, S), t.activeTexture(33984 + G), t.bindTexture(X, E.__webglTexture), s.pixelStorei(37440, S.flipY), s.pixelStorei(37441, S.premultiplyAlpha), s.pixelStorei(3317, S.unpackAlignment), s.pixelStorei(37443, 0); let ne = _(S) && p(S.image) === !1, ae = x(S.image, ne, !1, u), be = p(ae) || a, ge = r.convert(S.format), Te = r.convert(S.type), me = b(S.internalFormat, ge, Te); ue(X, S, be); let P, re = S.mipmaps; if (S.isDepthTexture) me = 6402, a ? S.type === _i ? me = 36012 : S.type === Bs ? me = 33190 : S.type === Ur ? me = 35056 : me = 33189 : S.type === _i && console.error("WebGLRenderer: Floating point depth texture requires WebGL2."), S.format === Ui && me === 6402 && S.type !== Fs && S.type !== Bs && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), S.type = Fs, Te = r.convert(S.type)), S.format === kr && me === 6402 && (me = 34041, S.type !== Ur && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), S.type = Ur, Te = r.convert(S.type))), t.texImage2D(3553, 0, me, ae.width, ae.height, 0, ge, Te, null); else if (S.isDataTexture) if (re.length > 0 && be) { for (let q = 0, le = re.length; q < le; q++)P = re[q], t.texImage2D(3553, q, me, P.width, P.height, 0, ge, Te, P.data); S.generateMipmaps = !1, E.__maxMipLevel = re.length - 1 } else t.texImage2D(3553, 0, me, ae.width, ae.height, 0, ge, Te, ae.data), E.__maxMipLevel = 0; else if (S.isCompressedTexture) { for (let q = 0, le = re.length; q < le; q++)P = re[q], S.format !== It && S.format !== Un ? ge !== null ? t.compressedTexImage2D(3553, q, me, P.width, P.height, 0, P.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : t.texImage2D(3553, q, me, P.width, P.height, 0, ge, Te, P.data); E.__maxMipLevel = re.length - 1 } else if (S.isDataTexture2DArray) t.texImage3D(35866, 0, me, ae.width, ae.height, ae.depth, 0, ge, Te, ae.data), E.__maxMipLevel = 0; else if (S.isDataTexture3D) t.texImage3D(32879, 0, me, ae.width, ae.height, ae.depth, 0, ge, Te, ae.data), E.__maxMipLevel = 0; else if (re.length > 0 && be) { for (let q = 0, le = re.length; q < le; q++)P = re[q], t.texImage2D(3553, q, me, ge, Te, P); S.generateMipmaps = !1, E.__maxMipLevel = re.length - 1 } else t.texImage2D(3553, 0, me, ge, Te, ae), E.__maxMipLevel = 0; w(S, be) && v(X, S, ae.width, ae.height), E.__version = S.version, S.onUpdate && S.onUpdate(S) } function W(E, S, G) { if (S.image.length !== 6) return; ee(E, S), t.activeTexture(33984 + G), t.bindTexture(34067, E.__webglTexture), s.pixelStorei(37440, S.flipY), s.pixelStorei(37441, S.premultiplyAlpha), s.pixelStorei(3317, S.unpackAlignment), s.pixelStorei(37443, 0); let X = S && (S.isCompressedTexture || S.image[0].isCompressedTexture), ne = S.image[0] && S.image[0].isDataTexture, ae = []; for (let q = 0; q < 6; q++)!X && !ne ? ae[q] = x(S.image[q], !1, !0, c) : ae[q] = ne ? S.image[q].image : S.image[q]; let be = ae[0], ge = p(be) || a, Te = r.convert(S.format), me = r.convert(S.type), P = b(S.internalFormat, Te, me); ue(34067, S, ge); let re; if (X) { for (let q = 0; q < 6; q++) { re = ae[q].mipmaps; for (let le = 0; le < re.length; le++) { let fe = re[le]; S.format !== It && S.format !== Un ? Te !== null ? t.compressedTexImage2D(34069 + q, le, P, fe.width, fe.height, 0, fe.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : t.texImage2D(34069 + q, le, P, fe.width, fe.height, 0, Te, me, fe.data) } } E.__maxMipLevel = re.length - 1 } else { re = S.mipmaps; for (let q = 0; q < 6; q++)if (ne) { t.texImage2D(34069 + q, 0, P, ae[q].width, ae[q].height, 0, Te, me, ae[q].data); for (let le = 0; le < re.length; le++) { let Re = re[le].image[q].image; t.texImage2D(34069 + q, le + 1, P, Re.width, Re.height, 0, Te, me, Re.data) } } else { t.texImage2D(34069 + q, 0, P, Te, me, ae[q]); for (let le = 0; le < re.length; le++) { let fe = re[le]; t.texImage2D(34069 + q, le + 1, P, Te, me, fe.image[q]) } } E.__maxMipLevel = re.length } w(S, ge) && v(34067, S, be.width, be.height), E.__version = S.version, S.onUpdate && S.onUpdate(S) } function j(E, S, G, X, ne) { let ae = r.convert(G.format), be = r.convert(G.type), ge = b(G.internalFormat, ae, be); ne === 32879 || ne === 35866 ? t.texImage3D(ne, 0, ge, S.width, S.height, S.depth, 0, ae, be, null) : t.texImage2D(ne, 0, ge, S.width, S.height, 0, ae, be, null), t.bindFramebuffer(36160, E), s.framebufferTexture2D(36160, X, ne, n.get(G).__webglTexture, 0), t.bindFramebuffer(36160, null) } function de(E, S, G) { if (s.bindRenderbuffer(36161, E), S.depthBuffer && !S.stencilBuffer) { let X = 33189; if (G) { let ne = S.depthTexture; ne && ne.isDepthTexture && (ne.type === _i ? X = 36012 : ne.type === Bs && (X = 33190)); let ae = Ee(S); s.renderbufferStorageMultisample(36161, ae, X, S.width, S.height) } else s.renderbufferStorage(36161, X, S.width, S.height); s.framebufferRenderbuffer(36160, 36096, 36161, E) } else if (S.depthBuffer && S.stencilBuffer) { if (G) { let X = Ee(S); s.renderbufferStorageMultisample(36161, X, 35056, S.width, S.height) } else s.renderbufferStorage(36161, 34041, S.width, S.height); s.framebufferRenderbuffer(36160, 33306, 36161, E) } else { let X = S.isWebGLMultipleRenderTargets === !0 ? S.texture[0] : S.texture, ne = r.convert(X.format), ae = r.convert(X.type), be = b(X.internalFormat, ne, ae); if (G) { let ge = Ee(S); s.renderbufferStorageMultisample(36161, ge, be, S.width, S.height) } else s.renderbufferStorage(36161, be, S.width, S.height) } s.bindRenderbuffer(36161, null) } function O(E, S) { if (S && S.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported"); if (t.bindFramebuffer(36160, E), !(S.depthTexture && S.depthTexture.isDepthTexture)) throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture"); (!n.get(S.depthTexture).__webglTexture || S.depthTexture.image.width !== S.width || S.depthTexture.image.height !== S.height) && (S.depthTexture.image.width = S.width, S.depthTexture.image.height = S.height, S.depthTexture.needsUpdate = !0), F(S.depthTexture, 0); let X = n.get(S.depthTexture).__webglTexture; if (S.depthTexture.format === Ui) s.framebufferTexture2D(36160, 36096, 3553, X, 0); else if (S.depthTexture.format === kr) s.framebufferTexture2D(36160, 33306, 3553, X, 0); else throw new Error("Unknown depthTexture format") } function _e(E) { let S = n.get(E), G = E.isWebGLCubeRenderTarget === !0; if (E.depthTexture) { if (G) throw new Error("target.depthTexture not supported in Cube render targets"); O(S.__webglFramebuffer, E) } else if (G) { S.__webglDepthbuffer = []; for (let X = 0; X < 6; X++)t.bindFramebuffer(36160, S.__webglFramebuffer[X]), S.__webglDepthbuffer[X] = s.createRenderbuffer(), de(S.__webglDepthbuffer[X], E, !1) } else t.bindFramebuffer(36160, S.__webglFramebuffer), S.__webglDepthbuffer = s.createRenderbuffer(), de(S.__webglDepthbuffer, E, !1); t.bindFramebuffer(36160, null) } function Me(E) { let S = E.texture, G = n.get(E), X = n.get(S); E.addEventListener("dispose", C), E.isWebGLMultipleRenderTargets !== !0 && (X.__webglTexture = s.createTexture(), X.__version = S.version, o.memory.textures++); let ne = E.isWebGLCubeRenderTarget === !0, ae = E.isWebGLMultipleRenderTargets === !0, be = E.isWebGLMultisampleRenderTarget === !0, ge = S.isDataTexture3D || S.isDataTexture2DArray, Te = p(E) || a; if (a && S.format === Un && (S.type === _i || S.type === Oi) && (S.format = It, console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")), ne) { G.__webglFramebuffer = []; for (let me = 0; me < 6; me++)G.__webglFramebuffer[me] = s.createFramebuffer() } else if (G.__webglFramebuffer = s.createFramebuffer(), ae) if (i.drawBuffers) { let me = E.texture; for (let P = 0, re = me.length; P < re; P++) { let q = n.get(me[P]); q.__webglTexture === void 0 && (q.__webglTexture = s.createTexture(), o.memory.textures++) } } else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension."); else if (be) if (a) { G.__webglMultisampledFramebuffer = s.createFramebuffer(), G.__webglColorRenderbuffer = s.createRenderbuffer(), s.bindRenderbuffer(36161, G.__webglColorRenderbuffer); let me = r.convert(S.format), P = r.convert(S.type), re = b(S.internalFormat, me, P), q = Ee(E); s.renderbufferStorageMultisample(36161, q, re, E.width, E.height), t.bindFramebuffer(36160, G.__webglMultisampledFramebuffer), s.framebufferRenderbuffer(36160, 36064, 36161, G.__webglColorRenderbuffer), s.bindRenderbuffer(36161, null), E.depthBuffer && (G.__webglDepthRenderbuffer = s.createRenderbuffer(), de(G.__webglDepthRenderbuffer, E, !0)), t.bindFramebuffer(36160, null) } else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2."); if (ne) { t.bindTexture(34067, X.__webglTexture), ue(34067, S, Te); for (let me = 0; me < 6; me++)j(G.__webglFramebuffer[me], E, S, 36064, 34069 + me); w(S, Te) && v(34067, S, E.width, E.height), t.unbindTexture() } else if (ae) { let me = E.texture; for (let P = 0, re = me.length; P < re; P++) { let q = me[P], le = n.get(q); t.bindTexture(3553, le.__webglTexture), ue(3553, q, Te), j(G.__webglFramebuffer, E, q, 36064 + P, 3553), w(q, Te) && v(3553, q, E.width, E.height) } t.unbindTexture() } else { let me = 3553; ge && (a ? me = S.isDataTexture3D ? 32879 : 35866 : console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.")), t.bindTexture(me, X.__webglTexture), ue(me, S, Te), j(G.__webglFramebuffer, E, S, 36064, me), w(S, Te) && v(me, S, E.width, E.height, E.depth), t.unbindTexture() } E.depthBuffer && _e(E) } function ce(E) { let S = p(E) || a, G = E.isWebGLMultipleRenderTargets === !0 ? E.texture : [E.texture]; for (let X = 0, ne = G.length; X < ne; X++) { let ae = G[X]; if (w(ae, S)) { let be = E.isWebGLCubeRenderTarget ? 34067 : 3553, ge = n.get(ae).__webglTexture; t.bindTexture(be, ge), v(be, ae, E.width, E.height), t.unbindTexture() } } } function he(E) { if (E.isWebGLMultisampleRenderTarget) if (a) { let S = E.width, G = E.height, X = 16384; E.depthBuffer && (X |= 256), E.stencilBuffer && (X |= 1024); let ne = n.get(E); t.bindFramebuffer(36008, ne.__webglMultisampledFramebuffer), t.bindFramebuffer(36009, ne.__webglFramebuffer), s.blitFramebuffer(0, 0, S, G, 0, 0, S, G, X, 9728), t.bindFramebuffer(36008, null), t.bindFramebuffer(36009, ne.__webglMultisampledFramebuffer) } else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.") } function Ee(E) { return a && E.isWebGLMultisampleRenderTarget ? Math.min(h, E.samples) : 0 } function V(E) { let S = o.render.frame; f.get(E) !== S && (f.set(E, S), E.update()) } let J = !1, K = !1; function pe(E, S) { E && E.isWebGLRenderTarget && (J === !1 && (console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."), J = !0), E = E.texture), F(E, S) } function ie(E, S) { E && E.isWebGLCubeRenderTarget && (K === !1 && (console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."), K = !0), E = E.texture), k(E, S) } this.allocateTextureUnit = z, this.resetTextureUnits = $, this.setTexture2D = F, this.setTexture2DArray = U, this.setTexture3D = N, this.setTextureCube = k, this.setupRenderTarget = Me, this.updateRenderTargetMipmap = ce, this.updateMultisampleRenderTarget = he, this.safeSetTexture2D = pe, this.safeSetTextureCube = ie } function ay(s, e, t) { let n = t.isWebGL2; function i(r) { let o; if (r === zi) return 5121; if (r === Bp) return 32819; if (r === Np) return 32820; if (r === zp) return 33635; if (r === Ip) return 5120; if (r === Dp) return 5122; if (r === Fs) return 5123; if (r === Fp) return 5124; if (r === Bs) return 5125; if (r === _i) return 5126; if (r === Oi) return n ? 5131 : (o = e.get("OES_texture_half_float"), o !== null ? o.HALF_FLOAT_OES : null); if (r === Op) return 6406; if (r === Un) return 6407; if (r === It) return 6408; if (r === Up) return 6409; if (r === kp) return 6410; if (r === Ui) return 6402; if (r === kr) return 34041; if (r === Gp) return 6403; if (r === Vp) return 36244; if (r === Wp) return 33319; if (r === qp) return 33320; if (r === Xp) return 36248; if (r === Yp) return 36249; if (r === jc || r === $c || r === Qc || r === Kc) if (o = e.get("WEBGL_compressed_texture_s3tc"), o !== null) { if (r === jc) return o.COMPRESSED_RGB_S3TC_DXT1_EXT; if (r === $c) return o.COMPRESSED_RGBA_S3TC_DXT1_EXT; if (r === Qc) return o.COMPRESSED_RGBA_S3TC_DXT3_EXT; if (r === Kc) return o.COMPRESSED_RGBA_S3TC_DXT5_EXT } else return null; if (r === eu || r === tu || r === nu || r === iu) if (o = e.get("WEBGL_compressed_texture_pvrtc"), o !== null) { if (r === eu) return o.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; if (r === tu) return o.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; if (r === nu) return o.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; if (r === iu) return o.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG } else return null; if (r === Zp) return o = e.get("WEBGL_compressed_texture_etc1"), o !== null ? o.COMPRESSED_RGB_ETC1_WEBGL : null; if ((r === ru || r === su) && (o = e.get("WEBGL_compressed_texture_etc"), o !== null)) { if (r === ru) return o.COMPRESSED_RGB8_ETC2; if (r === su) return o.COMPRESSED_RGBA8_ETC2_EAC } if (r === Jp || r === jp || r === $p || r === Qp || r === Kp || r === em || r === tm || r === nm || r === im || r === rm || r === sm || r === om || r === am || r === lm || r === um || r === hm || r === fm || r === dm || r === pm || r === mm || r === gm || r === _m || r === xm || r === ym || r === vm || r === wm || r === bm || r === Mm) return o = e.get("WEBGL_compressed_texture_astc"), o !== null ? r : null; if (r === cm) return o = e.get("EXT_texture_compression_bptc"), o !== null ? r : null; if (r === Ur) return n ? 34042 : (o = e.get("WEBGL_depth_texture"), o !== null ? o.UNSIGNED_INT_24_8_WEBGL : null) } return { convert: i } } var rl = class extends ft { constructor(e = []) { super(); this.cameras = e } }; rl.prototype.isArrayCamera = !0; var Qn = class extends Ne { constructor() { super(); this.type = "Group" } }; Qn.prototype.isGroup = !0; var ly = { type: "move" }, co = class { constructor() { this._targetRay = null, this._grip = null, this._hand = null } getHandSpace() { return this._hand === null && (this._hand = new Qn, this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = {}, this._hand.inputState = { pinching: !1 }), this._hand } getTargetRaySpace() { return this._targetRay === null && (this._targetRay = new Qn, this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1, this._targetRay.hasLinearVelocity = !1, this._targetRay.linearVelocity = new A, this._targetRay.hasAngularVelocity = !1, this._targetRay.angularVelocity = new A), this._targetRay } getGripSpace() { return this._grip === null && (this._grip = new Qn, this._grip.matrixAutoUpdate = !1, this._grip.visible = !1, this._grip.hasLinearVelocity = !1, this._grip.linearVelocity = new A, this._grip.hasAngularVelocity = !1, this._grip.angularVelocity = new A), this._grip } dispatchEvent(e) { return this._targetRay !== null && this._targetRay.dispatchEvent(e), this._grip !== null && this._grip.dispatchEvent(e), this._hand !== null && this._hand.dispatchEvent(e), this } disconnect(e) { return this.dispatchEvent({ type: "disconnected", data: e }), this._targetRay !== null && (this._targetRay.visible = !1), this._grip !== null && (this._grip.visible = !1), this._hand !== null && (this._hand.visible = !1), this } update(e, t, n) { let i = null, r = null, o = null, a = this._targetRay, l = this._grip, c = this._hand; if (e && t.session.visibilityState !== "visible-blurred") if (a !== null && (i = t.getPose(e.targetRaySpace, n), i !== null && (a.matrix.fromArray(i.transform.matrix), a.matrix.decompose(a.position, a.rotation, a.scale), i.linearVelocity ? (a.hasLinearVelocity = !0, a.linearVelocity.copy(i.linearVelocity)) : a.hasLinearVelocity = !1, i.angularVelocity ? (a.hasAngularVelocity = !0, a.angularVelocity.copy(i.angularVelocity)) : a.hasAngularVelocity = !1, this.dispatchEvent(ly))), c && e.hand) { o = !0; for (let m of e.hand.values()) { let x = t.getJointPose(m, n); if (c.joints[m.jointName] === void 0) { let _ = new Qn; _.matrixAutoUpdate = !1, _.visible = !1, c.joints[m.jointName] = _, c.add(_) } let p = c.joints[m.jointName]; x !== null && (p.matrix.fromArray(x.transform.matrix), p.matrix.decompose(p.position, p.rotation, p.scale), p.jointRadius = x.radius), p.visible = x !== null } let u = c.joints["index-finger-tip"], h = c.joints["thumb-tip"], f = u.position.distanceTo(h.position), d = .02, g = .005; c.inputState.pinching && f > d + g ? (c.inputState.pinching = !1, this.dispatchEvent({ type: "pinchend", handedness: e.handedness, target: this })) : !c.inputState.pinching && f <= d - g && (c.inputState.pinching = !0, this.dispatchEvent({ type: "pinchstart", handedness: e.handedness, target: this })) } else l !== null && e.gripSpace && (r = t.getPose(e.gripSpace, n), r !== null && (l.matrix.fromArray(r.transform.matrix), l.matrix.decompose(l.position, l.rotation, l.scale), r.linearVelocity ? (l.hasLinearVelocity = !0, l.linearVelocity.copy(r.linearVelocity)) : l.hasLinearVelocity = !1, r.angularVelocity ? (l.hasAngularVelocity = !0, l.angularVelocity.copy(r.angularVelocity)) : l.hasAngularVelocity = !1)); return a !== null && (a.visible = i !== null), l !== null && (l.visible = r !== null), c !== null && (c.visible = o !== null), this } }, oh = class extends kn { constructor(e, t) { super(); let n = this, i = e.state, r = null, o = 1, a = null, l = "local-floor", c = null, u = null, h = null, f = null, d = null, g = !1, m = null, x = null, p = null, _ = null, w = null, v = null, b = [], T = new Map, y = new ft; y.layers.enable(1), y.viewport = new Oe; let C = new ft; C.layers.enable(2), C.viewport = new Oe; let R = [y, C], D = new rl; D.layers.enable(1), D.layers.enable(2); let L = null, $ = null; this.cameraAutoUpdate = !0, this.enabled = !1, this.isPresenting = !1, this.getController = function (W) { let j = b[W]; return j === void 0 && (j = new co, b[W] = j), j.getTargetRaySpace() }, this.getControllerGrip = function (W) { let j = b[W]; return j === void 0 && (j = new co, b[W] = j), j.getGripSpace() }, this.getHand = function (W) { let j = b[W]; return j === void 0 && (j = new co, b[W] = j), j.getHandSpace() }; function z(W) { let j = T.get(W.inputSource); j && j.dispatchEvent({ type: W.type, data: W.inputSource }) } function F() { T.forEach(function (W, j) { W.disconnect(j) }), T.clear(), L = null, $ = null, i.bindXRFramebuffer(null), e.setRenderTarget(e.getRenderTarget()), h && t.deleteFramebuffer(h), m && t.deleteFramebuffer(m), x && t.deleteRenderbuffer(x), p && t.deleteRenderbuffer(p), h = null, m = null, x = null, p = null, d = null, f = null, u = null, r = null, we.stop(), n.isPresenting = !1, n.dispatchEvent({ type: "sessionend" }) } this.setFramebufferScaleFactor = function (W) { o = W, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.") }, this.setReferenceSpaceType = function (W) { l = W, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.") }, this.getReferenceSpace = function () { return a }, this.getBaseLayer = function () { return f !== null ? f : d }, this.getBinding = function () { return u }, this.getFrame = function () { return _ }, this.getSession = function () { return r }, this.setSession = async function (W) { if (r = W, r !== null) { r.addEventListener("select", z), r.addEventListener("selectstart", z), r.addEventListener("selectend", z), r.addEventListener("squeeze", z), r.addEventListener("squeezestart", z), r.addEventListener("squeezeend", z), r.addEventListener("end", F), r.addEventListener("inputsourceschange", U); let j = t.getContextAttributes(); if (j.xrCompatible !== !0 && await t.makeXRCompatible(), r.renderState.layers === void 0) { let de = { antialias: j.antialias, alpha: j.alpha, depth: j.depth, stencil: j.stencil, framebufferScaleFactor: o }; d = new XRWebGLLayer(r, t, de), r.updateRenderState({ baseLayer: d }) } else if (t instanceof WebGLRenderingContext) { let de = { antialias: !0, alpha: j.alpha, depth: j.depth, stencil: j.stencil, framebufferScaleFactor: o }; d = new XRWebGLLayer(r, t, de), r.updateRenderState({ layers: [d] }) } else { g = j.antialias; let de = null; j.depth && (v = 256, j.stencil && (v |= 1024), w = j.stencil ? 33306 : 36096, de = j.stencil ? 35056 : 33190); let O = { colorFormat: j.alpha ? 32856 : 32849, depthFormat: de, scaleFactor: o }; u = new XRWebGLBinding(r, t), f = u.createProjectionLayer(O), h = t.createFramebuffer(), r.updateRenderState({ layers: [f] }), g && (m = t.createFramebuffer(), x = t.createRenderbuffer(), t.bindRenderbuffer(36161, x), t.renderbufferStorageMultisample(36161, 4, 32856, f.textureWidth, f.textureHeight), i.bindFramebuffer(36160, m), t.framebufferRenderbuffer(36160, 36064, 36161, x), t.bindRenderbuffer(36161, null), de !== null && (p = t.createRenderbuffer(), t.bindRenderbuffer(36161, p), t.renderbufferStorageMultisample(36161, 4, de, f.textureWidth, f.textureHeight), t.framebufferRenderbuffer(36160, w, 36161, p), t.bindRenderbuffer(36161, null)), i.bindFramebuffer(36160, null)) } a = await r.requestReferenceSpace(l), we.setContext(r), we.start(), n.isPresenting = !0, n.dispatchEvent({ type: "sessionstart" }) } }; function U(W) { let j = r.inputSources; for (let de = 0; de < b.length; de++)T.set(j[de], b[de]); for (let de = 0; de < W.removed.length; de++) { let O = W.removed[de], _e = T.get(O); _e && (_e.dispatchEvent({ type: "disconnected", data: O }), T.delete(O)) } for (let de = 0; de < W.added.length; de++) { let O = W.added[de], _e = T.get(O); _e && _e.dispatchEvent({ type: "connected", data: O }) } } let N = new A, k = new A; function Q(W, j, de) { N.setFromMatrixPosition(j.matrixWorld), k.setFromMatrixPosition(de.matrixWorld); let O = N.distanceTo(k), _e = j.projectionMatrix.elements, Me = de.projectionMatrix.elements, ce = _e[14] / (_e[10] - 1), he = _e[14] / (_e[10] + 1), Ee = (_e[9] + 1) / _e[5], V = (_e[9] - 1) / _e[5], J = (_e[8] - 1) / _e[0], K = (Me[8] + 1) / Me[0], pe = ce * J, ie = ce * K, E = O / (-J + K), S = E * -J; j.matrixWorld.decompose(W.position, W.quaternion, W.scale), W.translateX(S), W.translateZ(E), W.matrixWorld.compose(W.position, W.quaternion, W.scale), W.matrixWorldInverse.copy(W.matrixWorld).invert(); let G = ce + E, X = he + E, ne = pe - S, ae = ie + (O - S), be = Ee * he / X * G, ge = V * he / X * G; W.projectionMatrix.makePerspective(ne, ae, be, ge, G, X) } function oe(W, j) { j === null ? W.matrixWorld.copy(W.matrix) : W.matrixWorld.multiplyMatrices(j.matrixWorld, W.matrix), W.matrixWorldInverse.copy(W.matrixWorld).invert() } this.updateCamera = function (W) { if (r === null) return; D.near = C.near = y.near = W.near, D.far = C.far = y.far = W.far, (L !== D.near || $ !== D.far) && (r.updateRenderState({ depthNear: D.near, depthFar: D.far }), L = D.near, $ = D.far); let j = W.parent, de = D.cameras; oe(D, j); for (let _e = 0; _e < de.length; _e++)oe(de[_e], j); D.matrixWorld.decompose(D.position, D.quaternion, D.scale), W.position.copy(D.position), W.quaternion.copy(D.quaternion), W.scale.copy(D.scale), W.matrix.copy(D.matrix), W.matrixWorld.copy(D.matrixWorld); let O = W.children; for (let _e = 0, Me = O.length; _e < Me; _e++)O[_e].updateMatrixWorld(!0); de.length === 2 ? Q(D, y, C) : D.projectionMatrix.copy(y.projectionMatrix) }, this.getCamera = function () { return D }, this.getFoveation = function () { if (f !== null) return f.fixedFoveation; if (d !== null) return d.fixedFoveation }, this.setFoveation = function (W) { f !== null && (f.fixedFoveation = W), d !== null && d.fixedFoveation !== void 0 && (d.fixedFoveation = W) }; let ue = null; function ee(W, j) { if (c = j.getViewerPose(a), _ = j, c !== null) { let O = c.views; d !== null && i.bindXRFramebuffer(d.framebuffer); let _e = !1; O.length !== D.cameras.length && (D.cameras.length = 0, _e = !0); for (let Me = 0; Me < O.length; Me++) { let ce = O[Me], he = null; if (d !== null) he = d.getViewport(ce); else { let V = u.getViewSubImage(f, ce); i.bindXRFramebuffer(h), V.depthStencilTexture !== void 0 && t.framebufferTexture2D(36160, w, 3553, V.depthStencilTexture, 0), t.framebufferTexture2D(36160, 36064, 3553, V.colorTexture, 0), he = V.viewport } let Ee = R[Me]; Ee.matrix.fromArray(ce.transform.matrix), Ee.projectionMatrix.fromArray(ce.projectionMatrix), Ee.viewport.set(he.x, he.y, he.width, he.height), Me === 0 && D.matrix.copy(Ee.matrix), _e === !0 && D.cameras.push(Ee) } g && (i.bindXRFramebuffer(m), v !== null && t.clear(v)) } let de = r.inputSources; for (let O = 0; O < b.length; O++) { let _e = b[O], Me = de[O]; _e.update(Me, j, a) } if (ue && ue(W, j), g) { let O = f.textureWidth, _e = f.textureHeight; i.bindFramebuffer(36008, m), i.bindFramebuffer(36009, h), t.invalidateFramebuffer(36008, [w]), t.invalidateFramebuffer(36009, [w]), t.blitFramebuffer(0, 0, O, _e, 0, 0, O, _e, 16384, 9728), t.invalidateFramebuffer(36008, [36064]), i.bindFramebuffer(36008, null), i.bindFramebuffer(36009, null), i.bindFramebuffer(36160, m) } _ = null } let we = new Au; we.setAnimationLoop(ee), this.setAnimationLoop = function (W) { ue = W }, this.dispose = function () { } } }; function cy(s) { function e(p, _) { p.fogColor.value.copy(_.color), _.isFog ? (p.fogNear.value = _.near, p.fogFar.value = _.far) : _.isFogExp2 && (p.fogDensity.value = _.density) } function t(p, _, w, v, b) { _.isMeshBasicMaterial ? n(p, _) : _.isMeshLambertMaterial ? (n(p, _), l(p, _)) : _.isMeshToonMaterial ? (n(p, _), u(p, _)) : _.isMeshPhongMaterial ? (n(p, _), c(p, _)) : _.isMeshStandardMaterial ? (n(p, _), _.isMeshPhysicalMaterial ? f(p, _, b) : h(p, _)) : _.isMeshMatcapMaterial ? (n(p, _), d(p, _)) : _.isMeshDepthMaterial ? (n(p, _), g(p, _)) : _.isMeshDistanceMaterial ? (n(p, _), m(p, _)) : _.isMeshNormalMaterial ? (n(p, _), x(p, _)) : _.isLineBasicMaterial ? (i(p, _), _.isLineDashedMaterial && r(p, _)) : _.isPointsMaterial ? o(p, _, w, v) : _.isSpriteMaterial ? a(p, _) : _.isShadowMaterial ? (p.color.value.copy(_.color), p.opacity.value = _.opacity) : _.isShaderMaterial && (_.uniformsNeedUpdate = !1) } function n(p, _) { p.opacity.value = _.opacity, _.color && p.diffuse.value.copy(_.color), _.emissive && p.emissive.value.copy(_.emissive).multiplyScalar(_.emissiveIntensity), _.map && (p.map.value = _.map), _.alphaMap && (p.alphaMap.value = _.alphaMap), _.specularMap && (p.specularMap.value = _.specularMap), _.alphaTest > 0 && (p.alphaTest.value = _.alphaTest); let w = s.get(_).envMap; if (w) { p.envMap.value = w, p.flipEnvMap.value = w.isCubeTexture && w.isRenderTargetTexture === !1 ? -1 : 1, p.reflectivity.value = _.reflectivity, p.ior.value = _.ior, p.refractionRatio.value = _.refractionRatio; let T = s.get(w).__maxMipLevel; T !== void 0 && (p.maxMipLevel.value = T) } _.lightMap && (p.lightMap.value = _.lightMap, p.lightMapIntensity.value = _.lightMapIntensity), _.aoMap && (p.aoMap.value = _.aoMap, p.aoMapIntensity.value = _.aoMapIntensity); let v; _.map ? v = _.map : _.specularMap ? v = _.specularMap : _.displacementMap ? v = _.displacementMap : _.normalMap ? v = _.normalMap : _.bumpMap ? v = _.bumpMap : _.roughnessMap ? v = _.roughnessMap : _.metalnessMap ? v = _.metalnessMap : _.alphaMap ? v = _.alphaMap : _.emissiveMap ? v = _.emissiveMap : _.clearcoatMap ? v = _.clearcoatMap : _.clearcoatNormalMap ? v = _.clearcoatNormalMap : _.clearcoatRoughnessMap ? v = _.clearcoatRoughnessMap : _.specularIntensityMap ? v = _.specularIntensityMap : _.specularTintMap ? v = _.specularTintMap : _.transmissionMap ? v = _.transmissionMap : _.thicknessMap && (v = _.thicknessMap), v !== void 0 && (v.isWebGLRenderTarget && (v = v.texture), v.matrixAutoUpdate === !0 && v.updateMatrix(), p.uvTransform.value.copy(v.matrix)); let b; _.aoMap ? b = _.aoMap : _.lightMap && (b = _.lightMap), b !== void 0 && (b.isWebGLRenderTarget && (b = b.texture), b.matrixAutoUpdate === !0 && b.updateMatrix(), p.uv2Transform.value.copy(b.matrix)) } function i(p, _) { p.diffuse.value.copy(_.color), p.opacity.value = _.opacity } function r(p, _) { p.dashSize.value = _.dashSize, p.totalSize.value = _.dashSize + _.gapSize, p.scale.value = _.scale } function o(p, _, w, v) { p.diffuse.value.copy(_.color), p.opacity.value = _.opacity, p.size.value = _.size * w, p.scale.value = v * .5, _.map && (p.map.value = _.map), _.alphaMap && (p.alphaMap.value = _.alphaMap), _.alphaTest > 0 && (p.alphaTest.value = _.alphaTest); let b; _.map ? b = _.map : _.alphaMap && (b = _.alphaMap), b !== void 0 && (b.matrixAutoUpdate === !0 && b.updateMatrix(), p.uvTransform.value.copy(b.matrix)) } function a(p, _) { p.diffuse.value.copy(_.color), p.opacity.value = _.opacity, p.rotation.value = _.rotation, _.map && (p.map.value = _.map), _.alphaMap && (p.alphaMap.value = _.alphaMap), _.alphaTest > 0 && (p.alphaTest.value = _.alphaTest); let w; _.map ? w = _.map : _.alphaMap && (w = _.alphaMap), w !== void 0 && (w.matrixAutoUpdate === !0 && w.updateMatrix(), p.uvTransform.value.copy(w.matrix)) } function l(p, _) { _.emissiveMap && (p.emissiveMap.value = _.emissiveMap) } function c(p, _) { p.specular.value.copy(_.specular), p.shininess.value = Math.max(_.shininess, 1e-4), _.emissiveMap && (p.emissiveMap.value = _.emissiveMap), _.bumpMap && (p.bumpMap.value = _.bumpMap, p.bumpScale.value = _.bumpScale, _.side === Ke && (p.bumpScale.value *= -1)), _.normalMap && (p.normalMap.value = _.normalMap, p.normalScale.value.copy(_.normalScale), _.side === Ke && p.normalScale.value.negate()), _.displacementMap && (p.displacementMap.value = _.displacementMap, p.displacementScale.value = _.displacementScale, p.displacementBias.value = _.displacementBias) } function u(p, _) { _.gradientMap && (p.gradientMap.value = _.gradientMap), _.emissiveMap && (p.emissiveMap.value = _.emissiveMap), _.bumpMap && (p.bumpMap.value = _.bumpMap, p.bumpScale.value = _.bumpScale, _.side === Ke && (p.bumpScale.value *= -1)), _.normalMap && (p.normalMap.value = _.normalMap, p.normalScale.value.copy(_.normalScale), _.side === Ke && p.normalScale.value.negate()), _.displacementMap && (p.displacementMap.value = _.displacementMap, p.displacementScale.value = _.displacementScale, p.displacementBias.value = _.displacementBias) } function h(p, _) { p.roughness.value = _.roughness, p.metalness.value = _.metalness, _.roughnessMap && (p.roughnessMap.value = _.roughnessMap), _.metalnessMap && (p.metalnessMap.value = _.metalnessMap), _.emissiveMap && (p.emissiveMap.value = _.emissiveMap), _.bumpMap && (p.bumpMap.value = _.bumpMap, p.bumpScale.value = _.bumpScale, _.side === Ke && (p.bumpScale.value *= -1)), _.normalMap && (p.normalMap.value = _.normalMap, p.normalScale.value.copy(_.normalScale), _.side === Ke && p.normalScale.value.negate()), _.displacementMap && (p.displacementMap.value = _.displacementMap, p.displacementScale.value = _.displacementScale, p.displacementBias.value = _.displacementBias), s.get(_).envMap && (p.envMapIntensity.value = _.envMapIntensity) } function f(p, _, w) { h(p, _), p.ior.value = _.ior, _.sheenTint && p.sheenTint.value.copy(_.sheenTint), _.clearcoat > 0 && (p.clearcoat.value = _.clearcoat, p.clearcoatRoughness.value = _.clearcoatRoughness, _.clearcoatMap && (p.clearcoatMap.value = _.clearcoatMap), _.clearcoatRoughnessMap && (p.clearcoatRoughnessMap.value = _.clearcoatRoughnessMap), _.clearcoatNormalMap && (p.clearcoatNormalScale.value.copy(_.clearcoatNormalScale), p.clearcoatNormalMap.value = _.clearcoatNormalMap, _.side === Ke && p.clearcoatNormalScale.value.negate())), _.transmission > 0 && (p.transmission.value = _.transmission, p.transmissionSamplerMap.value = w.texture, p.transmissionSamplerSize.value.set(w.width, w.height), _.transmissionMap && (p.transmissionMap.value = _.transmissionMap), p.thickness.value = _.thickness, _.thicknessMap && (p.thicknessMap.value = _.thicknessMap), p.attenuationDistance.value = _.attenuationDistance, p.attenuationTint.value.copy(_.attenuationTint)), p.specularIntensity.value = _.specularIntensity, p.specularTint.value.copy(_.specularTint), _.specularIntensityMap && (p.specularIntensityMap.value = _.specularIntensityMap), _.specularTintMap && (p.specularTintMap.value = _.specularTintMap) } function d(p, _) { _.matcap && (p.matcap.value = _.matcap), _.bumpMap && (p.bumpMap.value = _.bumpMap, p.bumpScale.value = _.bumpScale, _.side === Ke && (p.bumpScale.value *= -1)), _.normalMap && (p.normalMap.value = _.normalMap, p.normalScale.value.copy(_.normalScale), _.side === Ke && p.normalScale.value.negate()), _.displacementMap && (p.displacementMap.value = _.displacementMap, p.displacementScale.value = _.displacementScale, p.displacementBias.value = _.displacementBias) } function g(p, _) { _.displacementMap && (p.displacementMap.value = _.displacementMap, p.displacementScale.value = _.displacementScale, p.displacementBias.value = _.displacementBias) } function m(p, _) { _.displacementMap && (p.displacementMap.value = _.displacementMap, p.displacementScale.value = _.displacementScale, p.displacementBias.value = _.displacementBias), p.referencePosition.value.copy(_.referencePosition), p.nearDistance.value = _.nearDistance, p.farDistance.value = _.farDistance } function x(p, _) { _.bumpMap && (p.bumpMap.value = _.bumpMap, p.bumpScale.value = _.bumpScale, _.side === Ke && (p.bumpScale.value *= -1)), _.normalMap && (p.normalMap.value = _.normalMap, p.normalScale.value.copy(_.normalScale), _.side === Ke && p.normalScale.value.negate()), _.displacementMap && (p.displacementMap.value = _.displacementMap, p.displacementScale.value = _.displacementScale, p.displacementBias.value = _.displacementBias) } return { refreshFogUniforms: e, refreshMaterialUniforms: t } } function uy() { let s = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"); return s.style.display = "block", s } function ke(s = {}) { let e = s.canvas !== void 0 ? s.canvas : uy(), t = s.context !== void 0 ? s.context : null, n = s.alpha !== void 0 ? s.alpha : !1, i = s.depth !== void 0 ? s.depth : !0, r = s.stencil !== void 0 ? s.stencil : !0, o = s.antialias !== void 0 ? s.antialias : !1, a = s.premultipliedAlpha !== void 0 ? s.premultipliedAlpha : !0, l = s.preserveDrawingBuffer !== void 0 ? s.preserveDrawingBuffer : !1, c = s.powerPreference !== void 0 ? s.powerPreference : "default", u = s.failIfMajorPerformanceCaveat !== void 0 ? s.failIfMajorPerformanceCaveat : !1, h = null, f = null, d = [], g = []; this.domElement = e, this.debug = { checkShaderErrors: !0 }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this.gammaFactor = 2, this.outputEncoding = St, this.physicallyCorrectLights = !1, this.toneMapping = gi, this.toneMappingExposure = 1; let m = this, x = !1, p = 0, _ = 0, w = null, v = -1, b = null, T = new Oe, y = new Oe, C = null, R = e.width, D = e.height, L = 1, $ = null, z = null, F = new Oe(0, 0, R, D), U = new Oe(0, 0, R, D), N = !1, k = [], Q = new Yr, oe = !1, ue = !1, ee = null, we = new xe, W = new A, j = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: !0 }; function de() { return w === null ? L : 1 } let O = t; function _e(M, B) { for (let I = 0; I < M.length; I++) { let H = M[I], Z = e.getContext(H, B); if (Z !== null) return Z } return null } try { let M = { alpha: n, depth: i, stencil: r, antialias: o, premultipliedAlpha: a, preserveDrawingBuffer: l, powerPreference: c, failIfMajorPerformanceCaveat: u }; if (e.addEventListener("webglcontextlost", mt, !1), e.addEventListener("webglcontextrestored", gt, !1), O === null) { let B = ["webgl2", "webgl", "experimental-webgl"]; if (m.isWebGL1Renderer === !0 && B.shift(), O = _e(B, M), O === null) throw _e(B) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.") } O.getShaderPrecisionFormat === void 0 && (O.getShaderPrecisionFormat = function () { return { rangeMin: 1, rangeMax: 1, precision: 1 } }) } catch (M) { throw console.error("THREE.WebGLRenderer: " + M.message), M } let Me, ce, he, Ee, V, J, K, pe, ie, E, S, G, X, ne, ae, be, ge, Te, me, P, re, q, le; function fe() { Me = new F_(O), ce = new A_(O, Me, s), Me.init(ce), q = new ay(O, Me, ce), he = new sy(O, Me, ce), k[0] = 1029, Ee = new z_(O), V = new Zx, J = new oy(O, Me, he, V, ce, q, Ee), K = new C_(m), pe = new D_(m), ie = new $m(O, ce), le = new T_(O, Me, ie, ce), E = new B_(O, ie, Ee, le), S = new H_(O, E, ie, Ee), me = new k_(O), be = new L_(V), G = new Yx(m, K, pe, Me, ce, le, be), X = new cy(V), ne = new jx(V), ae = new ny(Me, ce), Te = new S_(m, K, he, S, a), ge = new sh(m, S, ce), P = new E_(O, Me, Ee, ce), re = new N_(O, Me, Ee, ce), Ee.programs = G.programs, m.capabilities = ce, m.extensions = Me, m.properties = V, m.renderLists = ne, m.shadowMap = ge, m.state = he, m.info = Ee } fe(); let Re = new oh(m, O); this.xr = Re, this.getContext = function () { return O }, this.getContextAttributes = function () { return O.getContextAttributes() }, this.forceContextLoss = function () { let M = Me.get("WEBGL_lose_context"); M && M.loseContext() }, this.forceContextRestore = function () { let M = Me.get("WEBGL_lose_context"); M && M.restoreContext() }, this.getPixelRatio = function () { return L }, this.setPixelRatio = function (M) { M !== void 0 && (L = M, this.setSize(R, D, !1)) }, this.getSize = function (M) { return M.set(R, D) }, this.setSize = function (M, B, I) { if (Re.isPresenting) { console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."); return } R = M, D = B, e.width = Math.floor(M * L), e.height = Math.floor(B * L), I !== !1 && (e.style.width = M + "px", e.style.height = B + "px"), this.setViewport(0, 0, M, B) }, this.getDrawingBufferSize = function (M) { return M.set(R * L, D * L).floor() }, this.setDrawingBufferSize = function (M, B, I) { R = M, D = B, L = I, e.width = Math.floor(M * I), e.height = Math.floor(B * I), this.setViewport(0, 0, M, B) }, this.getCurrentViewport = function (M) { return M.copy(T) }, this.getViewport = function (M) { return M.copy(F) }, this.setViewport = function (M, B, I, H) { M.isVector4 ? F.set(M.x, M.y, M.z, M.w) : F.set(M, B, I, H), he.viewport(T.copy(F).multiplyScalar(L).floor()) }, this.getScissor = function (M) { return M.copy(U) }, this.setScissor = function (M, B, I, H) { M.isVector4 ? U.set(M.x, M.y, M.z, M.w) : U.set(M, B, I, H), he.scissor(y.copy(U).multiplyScalar(L).floor()) }, this.getScissorTest = function () { return N }, this.setScissorTest = function (M) { he.setScissorTest(N = M) }, this.setOpaqueSort = function (M) { $ = M }, this.setTransparentSort = function (M) { z = M }, this.getClearColor = function (M) { return M.copy(Te.getClearColor()) }, this.setClearColor = function () { Te.setClearColor.apply(Te, arguments) }, this.getClearAlpha = function () { return Te.getClearAlpha() }, this.setClearAlpha = function () { Te.setClearAlpha.apply(Te, arguments) }, this.clear = function (M, B, I) { let H = 0; (M === void 0 || M) && (H |= 16384), (B === void 0 || B) && (H |= 256), (I === void 0 || I) && (H |= 1024), O.clear(H) }, this.clearColor = function () { this.clear(!0, !1, !1) }, this.clearDepth = function () { this.clear(!1, !0, !1) }, this.clearStencil = function () { this.clear(!1, !1, !0) }, this.dispose = function () { e.removeEventListener("webglcontextlost", mt, !1), e.removeEventListener("webglcontextrestored", gt, !1), ne.dispose(), ae.dispose(), V.dispose(), K.dispose(), pe.dispose(), S.dispose(), le.dispose(), Re.dispose(), Re.removeEventListener("sessionstart", Cc), Re.removeEventListener("sessionend", Pc), ee && (ee.dispose(), ee = null), di.stop() }; function mt(M) { M.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), x = !0 } function gt() { console.log("THREE.WebGLRenderer: Context Restored."), x = !1; let M = Ee.autoReset, B = ge.enabled, I = ge.autoUpdate, H = ge.needsUpdate, Z = ge.type; fe(), Ee.autoReset = M, ge.enabled = B, ge.autoUpdate = I, ge.needsUpdate = H, ge.type = Z } function Bn(M) { let B = M.target; B.removeEventListener("dispose", Bn), Ze(B) } function Ze(M) { _n(M), V.remove(M) } function _n(M) { let B = V.get(M).programs; B !== void 0 && B.forEach(function (I) { G.releaseProgram(I) }) } function xn(M, B) { M.render(function (I) { m.renderBufferImmediate(I, B) }) } this.renderBufferImmediate = function (M, B) { le.initAttributes(); let I = V.get(M); M.hasPositions && !I.position && (I.position = O.createBuffer()), M.hasNormals && !I.normal && (I.normal = O.createBuffer()), M.hasUvs && !I.uv && (I.uv = O.createBuffer()), M.hasColors && !I.color && (I.color = O.createBuffer()); let H = B.getAttributes(); M.hasPositions && (O.bindBuffer(34962, I.position), O.bufferData(34962, M.positionArray, 35048), le.enableAttribute(H.position.location), O.vertexAttribPointer(H.position.location, 3, 5126, !1, 0, 0)), M.hasNormals && (O.bindBuffer(34962, I.normal), O.bufferData(34962, M.normalArray, 35048), le.enableAttribute(H.normal.location), O.vertexAttribPointer(H.normal.location, 3, 5126, !1, 0, 0)), M.hasUvs && (O.bindBuffer(34962, I.uv), O.bufferData(34962, M.uvArray, 35048), le.enableAttribute(H.uv.location), O.vertexAttribPointer(H.uv.location, 2, 5126, !1, 0, 0)), M.hasColors && (O.bindBuffer(34962, I.color), O.bufferData(34962, M.colorArray, 35048), le.enableAttribute(H.color.location), O.vertexAttribPointer(H.color.location, 3, 5126, !1, 0, 0)), le.disableUnusedAttributes(), O.drawArrays(4, 0, M.count), M.count = 0 }, this.renderBufferDirect = function (M, B, I, H, Z, Ae) { B === null && (B = j); let ve = Z.isMesh && Z.matrixWorld.determinant() < 0, ye = Fc(M, B, H, Z); he.setMaterial(H, ve); let Le = I.index, Ue = I.attributes.position; if (Le === null) { if (Ue === void 0 || Ue.count === 0) return } else if (Le.count === 0) return; let Ie = 1; H.wireframe === !0 && (Le = E.getWireframeAttribute(I), Ie = 2), (I.morphAttributes.position !== void 0 || I.morphAttributes.normal !== void 0) && me.update(Z, I, H, ye), le.setup(Z, H, ye, I, Le); let Be, Se = P; Le !== null && (Be = ie.get(Le), Se = re, Se.setIndex(Be)); let pi = Le !== null ? Le.count : Ue.count, $e = I.drawRange.start * Ie, Nn = I.drawRange.count * Ie, Jt = Ae !== null ? Ae.start * Ie : 0, mi = Ae !== null ? Ae.count * Ie : 1 / 0, zn = Math.max($e, Jt), it = Math.min(pi, $e + Nn, Jt + mi) - 1, on = Math.max(0, it - zn + 1); if (on !== 0) { if (Z.isMesh) H.wireframe === !0 ? (he.setLineWidth(H.wireframeLinewidth * de()), Se.setMode(1)) : Se.setMode(4); else if (Z.isLine) { let ct = H.linewidth; ct === void 0 && (ct = 1), he.setLineWidth(ct * de()), Z.isLineSegments ? Se.setMode(1) : Z.isLineLoop ? Se.setMode(2) : Se.setMode(3) } else Z.isPoints ? Se.setMode(0) : Z.isSprite && Se.setMode(4); if (Z.isInstancedMesh) Se.renderInstances(zn, on, Z.count); else if (I.isInstancedBufferGeometry) { let ct = Math.min(I.instanceCount, I._maxInstanceCount); Se.renderInstances(zn, on, ct) } else Se.render(zn, on) } }, this.compile = function (M, B) { f = ae.get(M), f.init(), g.push(f), M.traverseVisible(function (I) { I.isLight && I.layers.test(B.layers) && (f.pushLight(I), I.castShadow && f.pushShadow(I)) }), f.setupLights(m.physicallyCorrectLights), M.traverse(function (I) { let H = I.material; if (H) if (Array.isArray(H)) for (let Z = 0; Z < H.length; Z++) { let Ae = H[Z]; ia(Ae, M, I) } else ia(H, M, I) }), g.pop(), f = null }; let na = null; function $d(M) { na && na(M) } function Cc() { di.stop() } function Pc() { di.start() } let di = new Au; di.setAnimationLoop($d), typeof window != "undefined" && di.setContext(window), this.setAnimationLoop = function (M) { na = M, Re.setAnimationLoop(M), M === null ? di.stop() : di.start() }, Re.addEventListener("sessionstart", Cc), Re.addEventListener("sessionend", Pc), this.render = function (M, B) { if (B !== void 0 && B.isCamera !== !0) { console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera."); return } if (x === !0) return; M.autoUpdate === !0 && M.updateMatrixWorld(), B.parent === null && B.updateMatrixWorld(), Re.enabled === !0 && Re.isPresenting === !0 && (Re.cameraAutoUpdate === !0 && Re.updateCamera(B), B = Re.getCamera()), M.isScene === !0 && M.onBeforeRender(m, M, B, w), f = ae.get(M, g.length), f.init(), g.push(f), we.multiplyMatrices(B.projectionMatrix, B.matrixWorldInverse), Q.setFromProjectionMatrix(we), ue = this.localClippingEnabled, oe = be.init(this.clippingPlanes, ue, B), h = ne.get(M, d.length), h.init(), d.push(h), Rc(M, B, 0, m.sortObjects), h.finish(), m.sortObjects === !0 && h.sort($, z), oe === !0 && be.beginShadows(); let I = f.state.shadowsArray; if (ge.render(I, M, B), oe === !0 && be.endShadows(), this.info.autoReset === !0 && this.info.reset(), Te.render(h, M), f.setupLights(m.physicallyCorrectLights), B.isArrayCamera) { let H = B.cameras; for (let Z = 0, Ae = H.length; Z < Ae; Z++) { let ve = H[Z]; Ic(h, M, ve, ve.viewport) } } else Ic(h, M, B); w !== null && (J.updateMultisampleRenderTarget(w), J.updateRenderTargetMipmap(w)), M.isScene === !0 && M.onAfterRender(m, M, B), he.buffers.depth.setTest(!0), he.buffers.depth.setMask(!0), he.buffers.color.setMask(!0), he.setPolygonOffset(!1), le.resetDefaultState(), v = -1, b = null, g.pop(), g.length > 0 ? f = g[g.length - 1] : f = null, d.pop(), d.length > 0 ? h = d[d.length - 1] : h = null }; function Rc(M, B, I, H) { if (M.visible === !1) return; if (M.layers.test(B.layers)) { if (M.isGroup) I = M.renderOrder; else if (M.isLOD) M.autoUpdate === !0 && M.update(B); else if (M.isLight) f.pushLight(M), M.castShadow && f.pushShadow(M); else if (M.isSprite) { if (!M.frustumCulled || Q.intersectsSprite(M)) { H && W.setFromMatrixPosition(M.matrixWorld).applyMatrix4(we); let ve = S.update(M), ye = M.material; ye.visible && h.push(M, ve, ye, I, W.z, null) } } else if (M.isImmediateRenderObject) H && W.setFromMatrixPosition(M.matrixWorld).applyMatrix4(we), h.push(M, null, M.material, I, W.z, null); else if ((M.isMesh || M.isLine || M.isPoints) && (M.isSkinnedMesh && M.skeleton.frame !== Ee.render.frame && (M.skeleton.update(), M.skeleton.frame = Ee.render.frame), !M.frustumCulled || Q.intersectsObject(M))) { H && W.setFromMatrixPosition(M.matrixWorld).applyMatrix4(we); let ve = S.update(M), ye = M.material; if (Array.isArray(ye)) { let Le = ve.groups; for (let Ue = 0, Ie = Le.length; Ue < Ie; Ue++) { let Be = Le[Ue], Se = ye[Be.materialIndex]; Se && Se.visible && h.push(M, ve, Se, I, W.z, Be) } } else ye.visible && h.push(M, ve, ye, I, W.z, null) } } let Ae = M.children; for (let ve = 0, ye = Ae.length; ve < ye; ve++)Rc(Ae[ve], B, I, H) } function Ic(M, B, I, H) { let Z = M.opaque, Ae = M.transmissive, ve = M.transparent; f.setupLightsView(I), Ae.length > 0 && Qd(Z, B, I), H && he.viewport(T.copy(H)), Z.length > 0 && As(Z, B, I), Ae.length > 0 && As(Ae, B, I), ve.length > 0 && As(ve, B, I) } function Qd(M, B, I) { if (ee === null) { let ve = o === !0 && ce.isWebGL2 === !0 ? wa : $t; ee = new ve(1024, 1024, { generateMipmaps: !0, type: q.convert(Oi) !== null ? Oi : zi, minFilter: Ds, magFilter: rt, wrapS: Rt, wrapT: Rt }) } let H = m.getRenderTarget(); m.setRenderTarget(ee), m.clear(); let Z = m.toneMapping; m.toneMapping = gi, As(M, B, I), m.toneMapping = Z, J.updateMultisampleRenderTarget(ee), J.updateRenderTargetMipmap(ee), m.setRenderTarget(H) } function As(M, B, I) { let H = B.isScene === !0 ? B.overrideMaterial : null; for (let Z = 0, Ae = M.length; Z < Ae; Z++) { let ve = M[Z], ye = ve.object, Le = ve.geometry, Ue = H === null ? ve.material : H, Ie = ve.group; ye.layers.test(I.layers) && Kd(ye, B, I, Le, Ue, Ie) } } function Kd(M, B, I, H, Z, Ae) { if (M.onBeforeRender(m, B, I, H, Z, Ae), M.modelViewMatrix.multiplyMatrices(I.matrixWorldInverse, M.matrixWorld), M.normalMatrix.getNormalMatrix(M.modelViewMatrix), M.isImmediateRenderObject) { let ve = Fc(I, B, Z, M); he.setMaterial(Z), le.reset(), xn(M, ve) } else Z.transparent === !0 && Z.side === Bi ? (Z.side = Ke, Z.needsUpdate = !0, m.renderBufferDirect(I, B, H, Z, M, Ae), Z.side = zr, Z.needsUpdate = !0, m.renderBufferDirect(I, B, H, Z, M, Ae), Z.side = Bi) : m.renderBufferDirect(I, B, H, Z, M, Ae); M.onAfterRender(m, B, I, H, Z, Ae) } function ia(M, B, I) { B.isScene !== !0 && (B = j); let H = V.get(M), Z = f.state.lights, Ae = f.state.shadowsArray, ve = Z.state.version, ye = G.getParameters(M, Z.state, Ae, B, I), Le = G.getProgramCacheKey(ye), Ue = H.programs; H.environment = M.isMeshStandardMaterial ? B.environment : null, H.fog = B.fog, H.envMap = (M.isMeshStandardMaterial ? pe : K).get(M.envMap || H.environment), Ue === void 0 && (M.addEventListener("dispose", Bn), Ue = new Map, H.programs = Ue); let Ie = Ue.get(Le); if (Ie !== void 0) { if (H.currentProgram === Ie && H.lightsStateVersion === ve) return Dc(M, ye), Ie } else ye.uniforms = G.getUniforms(M), M.onBuild(ye, m), M.onBeforeCompile(ye, m), Ie = G.acquireProgram(ye, Le), Ue.set(Le, Ie), H.uniforms = ye.uniforms; let Be = H.uniforms; (!M.isShaderMaterial && !M.isRawShaderMaterial || M.clipping === !0) && (Be.clippingPlanes = be.uniform), Dc(M, ye), H.needsLights = tp(M), H.lightsStateVersion = ve, H.needsLights && (Be.ambientLightColor.value = Z.state.ambient, Be.lightProbe.value = Z.state.probe, Be.directionalLights.value = Z.state.directional, Be.directionalLightShadows.value = Z.state.directionalShadow, Be.spotLights.value = Z.state.spot, Be.spotLightShadows.value = Z.state.spotShadow, Be.rectAreaLights.value = Z.state.rectArea, Be.ltc_1.value = Z.state.rectAreaLTC1, Be.ltc_2.value = Z.state.rectAreaLTC2, Be.pointLights.value = Z.state.point, Be.pointLightShadows.value = Z.state.pointShadow, Be.hemisphereLights.value = Z.state.hemi, Be.directionalShadowMap.value = Z.state.directionalShadowMap, Be.directionalShadowMatrix.value = Z.state.directionalShadowMatrix, Be.spotShadowMap.value = Z.state.spotShadowMap, Be.spotShadowMatrix.value = Z.state.spotShadowMatrix, Be.pointShadowMap.value = Z.state.pointShadowMap, Be.pointShadowMatrix.value = Z.state.pointShadowMatrix); let Se = Ie.getUniforms(), pi = $n.seqWithValue(Se.seq, Be); return H.currentProgram = Ie, H.uniformsList = pi, Ie } function Dc(M, B) { let I = V.get(M); I.outputEncoding = B.outputEncoding, I.instancing = B.instancing, I.skinning = B.skinning, I.morphTargets = B.morphTargets, I.morphNormals = B.morphNormals, I.numClippingPlanes = B.numClippingPlanes, I.numIntersection = B.numClipIntersection, I.vertexAlphas = B.vertexAlphas, I.vertexTangents = B.vertexTangents } function Fc(M, B, I, H) { B.isScene !== !0 && (B = j), J.resetTextureUnits(); let Z = B.fog, Ae = I.isMeshStandardMaterial ? B.environment : null, ve = w === null ? m.outputEncoding : w.texture.encoding, ye = (I.isMeshStandardMaterial ? pe : K).get(I.envMap || Ae), Le = I.vertexColors === !0 && !!H.geometry && !!H.geometry.attributes.color && H.geometry.attributes.color.itemSize === 4, Ue = !!H.geometry && !!H.geometry.attributes.tangent, Ie = !!H.geometry && !!H.geometry.morphAttributes.position, Be = !!H.geometry && !!H.geometry.morphAttributes.normal, Se = V.get(I), pi = f.state.lights; if (oe === !0 && (ue === !0 || M !== b)) { let ct = M === b && I.id === v; be.setState(I, M, ct) } let $e = !1; I.version === Se.__version ? (Se.needsLights && Se.lightsStateVersion !== pi.state.version || Se.outputEncoding !== ve || H.isInstancedMesh && Se.instancing === !1 || !H.isInstancedMesh && Se.instancing === !0 || H.isSkinnedMesh && Se.skinning === !1 || !H.isSkinnedMesh && Se.skinning === !0 || Se.envMap !== ye || I.fog && Se.fog !== Z || Se.numClippingPlanes !== void 0 && (Se.numClippingPlanes !== be.numPlanes || Se.numIntersection !== be.numIntersection) || Se.vertexAlphas !== Le || Se.vertexTangents !== Ue || Se.morphTargets !== Ie || Se.morphNormals !== Be) && ($e = !0) : ($e = !0, Se.__version = I.version); let Nn = Se.currentProgram; $e === !0 && (Nn = ia(I, B, H)); let Jt = !1, mi = !1, zn = !1, it = Nn.getUniforms(), on = Se.uniforms; if (he.useProgram(Nn.program) && (Jt = !0, mi = !0, zn = !0), I.id !== v && (v = I.id, mi = !0), Jt || b !== M) { if (it.setValue(O, "projectionMatrix", M.projectionMatrix), ce.logarithmicDepthBuffer && it.setValue(O, "logDepthBufFC", 2 / (Math.log(M.far + 1) / Math.LN2)), b !== M && (b = M, mi = !0, zn = !0), I.isShaderMaterial || I.isMeshPhongMaterial || I.isMeshToonMaterial || I.isMeshStandardMaterial || I.envMap) { let ct = it.map.cameraPosition; ct !== void 0 && ct.setValue(O, W.setFromMatrixPosition(M.matrixWorld)) } (I.isMeshPhongMaterial || I.isMeshToonMaterial || I.isMeshLambertMaterial || I.isMeshBasicMaterial || I.isMeshStandardMaterial || I.isShaderMaterial) && it.setValue(O, "isOrthographic", M.isOrthographicCamera === !0), (I.isMeshPhongMaterial || I.isMeshToonMaterial || I.isMeshLambertMaterial || I.isMeshBasicMaterial || I.isMeshStandardMaterial || I.isShaderMaterial || I.isShadowMaterial || H.isSkinnedMesh) && it.setValue(O, "viewMatrix", M.matrixWorldInverse) } if (H.isSkinnedMesh) { it.setOptional(O, H, "bindMatrix"), it.setOptional(O, H, "bindMatrixInverse"); let ct = H.skeleton; ct && (ce.floatVertexTextures ? (ct.boneTexture === null && ct.computeBoneTexture(), it.setValue(O, "boneTexture", ct.boneTexture, J), it.setValue(O, "boneTextureSize", ct.boneTextureSize)) : it.setOptional(O, ct, "boneMatrices")) } return (mi || Se.receiveShadow !== H.receiveShadow) && (Se.receiveShadow = H.receiveShadow, it.setValue(O, "receiveShadow", H.receiveShadow)), mi && (it.setValue(O, "toneMappingExposure", m.toneMappingExposure), Se.needsLights && ep(on, zn), Z && I.fog && X.refreshFogUniforms(on, Z), X.refreshMaterialUniforms(on, I, L, D, ee), $n.upload(O, Se.uniformsList, on, J)), I.isShaderMaterial && I.uniformsNeedUpdate === !0 && ($n.upload(O, Se.uniformsList, on, J), I.uniformsNeedUpdate = !1), I.isSpriteMaterial && it.setValue(O, "center", H.center), it.setValue(O, "modelViewMatrix", H.modelViewMatrix), it.setValue(O, "normalMatrix", H.normalMatrix), it.setValue(O, "modelMatrix", H.matrixWorld), Nn } function ep(M, B) { M.ambientLightColor.needsUpdate = B, M.lightProbe.needsUpdate = B, M.directionalLights.needsUpdate = B, M.directionalLightShadows.needsUpdate = B, M.pointLights.needsUpdate = B, M.pointLightShadows.needsUpdate = B, M.spotLights.needsUpdate = B, M.spotLightShadows.needsUpdate = B, M.rectAreaLights.needsUpdate = B, M.hemisphereLights.needsUpdate = B } function tp(M) { return M.isMeshLambertMaterial || M.isMeshToonMaterial || M.isMeshPhongMaterial || M.isMeshStandardMaterial || M.isShadowMaterial || M.isShaderMaterial && M.lights === !0 } this.getActiveCubeFace = function () { return p }, this.getActiveMipmapLevel = function () { return _ }, this.getRenderTarget = function () { return w }, this.setRenderTarget = function (M, B = 0, I = 0) { w = M, p = B, _ = I, M && V.get(M).__webglFramebuffer === void 0 && J.setupRenderTarget(M); let H = null, Z = !1, Ae = !1; if (M) { let ye = M.texture; (ye.isDataTexture3D || ye.isDataTexture2DArray) && (Ae = !0); let Le = V.get(M).__webglFramebuffer; M.isWebGLCubeRenderTarget ? (H = Le[B], Z = !0) : M.isWebGLMultisampleRenderTarget ? H = V.get(M).__webglMultisampledFramebuffer : H = Le, T.copy(M.viewport), y.copy(M.scissor), C = M.scissorTest } else T.copy(F).multiplyScalar(L).floor(), y.copy(U).multiplyScalar(L).floor(), C = N; if (he.bindFramebuffer(36160, H) && ce.drawBuffers) { let ye = !1; if (M) if (M.isWebGLMultipleRenderTargets) { let Le = M.texture; if (k.length !== Le.length || k[0] !== 36064) { for (let Ue = 0, Ie = Le.length; Ue < Ie; Ue++)k[Ue] = 36064 + Ue; k.length = Le.length, ye = !0 } } else (k.length !== 1 || k[0] !== 36064) && (k[0] = 36064, k.length = 1, ye = !0); else (k.length !== 1 || k[0] !== 1029) && (k[0] = 1029, k.length = 1, ye = !0); ye && (ce.isWebGL2 ? O.drawBuffers(k) : Me.get("WEBGL_draw_buffers").drawBuffersWEBGL(k)) } if (he.viewport(T), he.scissor(y), he.setScissorTest(C), Z) { let ye = V.get(M.texture); O.framebufferTexture2D(36160, 36064, 34069 + B, ye.__webglTexture, I) } else if (Ae) { let ye = V.get(M.texture), Le = B || 0; O.framebufferTextureLayer(36160, 36064, ye.__webglTexture, I || 0, Le) } v = -1 }, this.readRenderTargetPixels = function (M, B, I, H, Z, Ae, ve) { if (!(M && M.isWebGLRenderTarget)) { console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget."); return } let ye = V.get(M).__webglFramebuffer; if (M.isWebGLCubeRenderTarget && ve !== void 0 && (ye = ye[ve]), ye) { he.bindFramebuffer(36160, ye); try { let Le = M.texture, Ue = Le.format, Ie = Le.type; if (Ue !== It && q.convert(Ue) !== O.getParameter(35739)) { console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format."); return } let Be = Ie === Oi && (Me.has("EXT_color_buffer_half_float") || ce.isWebGL2 && Me.has("EXT_color_buffer_float")); if (Ie !== zi && q.convert(Ie) !== O.getParameter(35738) && !(Ie === _i && (ce.isWebGL2 || Me.has("OES_texture_float") || Me.has("WEBGL_color_buffer_float"))) && !Be) { console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type."); return } O.checkFramebufferStatus(36160) === 36053 ? B >= 0 && B <= M.width - H && I >= 0 && I <= M.height - Z && O.readPixels(B, I, H, Z, q.convert(Ue), q.convert(Ie), Ae) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.") } finally { let Le = w !== null ? V.get(w).__webglFramebuffer : null; he.bindFramebuffer(36160, Le) } } }, this.copyFramebufferToTexture = function (M, B, I = 0) { let H = Math.pow(2, -I), Z = Math.floor(B.image.width * H), Ae = Math.floor(B.image.height * H), ve = q.convert(B.format); ce.isWebGL2 && (ve === 6407 && (ve = 32849), ve === 6408 && (ve = 32856)), J.setTexture2D(B, 0), O.copyTexImage2D(3553, I, ve, M.x, M.y, Z, Ae, 0), he.unbindTexture() }, this.copyTextureToTexture = function (M, B, I, H = 0) { let Z = B.image.width, Ae = B.image.height, ve = q.convert(I.format), ye = q.convert(I.type); J.setTexture2D(I, 0), O.pixelStorei(37440, I.flipY), O.pixelStorei(37441, I.premultiplyAlpha), O.pixelStorei(3317, I.unpackAlignment), B.isDataTexture ? O.texSubImage2D(3553, H, M.x, M.y, Z, Ae, ve, ye, B.image.data) : B.isCompressedTexture ? O.compressedTexSubImage2D(3553, H, M.x, M.y, B.mipmaps[0].width, B.mipmaps[0].height, ve, B.mipmaps[0].data) : O.texSubImage2D(3553, H, M.x, M.y, ve, ye, B.image), H === 0 && I.generateMipmaps && O.generateMipmap(3553), he.unbindTexture() }, this.copyTextureToTexture3D = function (M, B, I, H, Z = 0) { if (m.isWebGL1Renderer) { console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2."); return } let Ae = M.max.x - M.min.x + 1, ve = M.max.y - M.min.y + 1, ye = M.max.z - M.min.z + 1, Le = q.convert(H.format), Ue = q.convert(H.type), Ie; if (H.isDataTexture3D) J.setTexture3D(H, 0), Ie = 32879; else if (H.isDataTexture2DArray) J.setTexture2DArray(H, 0), Ie = 35866; else { console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray."); return } O.pixelStorei(37440, H.flipY), O.pixelStorei(37441, H.premultiplyAlpha), O.pixelStorei(3317, H.unpackAlignment); let Be = O.getParameter(3314), Se = O.getParameter(32878), pi = O.getParameter(3316), $e = O.getParameter(3315), Nn = O.getParameter(32877), Jt = I.isCompressedTexture ? I.mipmaps[0] : I.image; O.pixelStorei(3314, Jt.width), O.pixelStorei(32878, Jt.height), O.pixelStorei(3316, M.min.x), O.pixelStorei(3315, M.min.y), O.pixelStorei(32877, M.min.z), I.isDataTexture || I.isDataTexture3D ? O.texSubImage3D(Ie, Z, B.x, B.y, B.z, Ae, ve, ye, Le, Ue, Jt.data) : I.isCompressedTexture ? (console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."), O.compressedTexSubImage3D(Ie, Z, B.x, B.y, B.z, Ae, ve, ye, Le, Jt.data)) : O.texSubImage3D(Ie, Z, B.x, B.y, B.z, Ae, ve, ye, Le, Ue, Jt), O.pixelStorei(3314, Be), O.pixelStorei(32878, Se), O.pixelStorei(3316, pi), O.pixelStorei(3315, $e), O.pixelStorei(32877, Nn), Z === 0 && H.generateMipmaps && O.generateMipmap(Ie), he.unbindTexture() }, this.initTexture = function (M) { J.setTexture2D(M, 0), he.unbindTexture() }, this.resetState = function () { p = 0, _ = 0, w = null, he.reset(), le.reset() }, typeof __THREE_DEVTOOLS__ != "undefined" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this })) } var ah = class extends ke { }; ah.prototype.isWebGL1Renderer = !0; var uo = class { constructor(e, t = 25e-5) { this.name = "", this.color = new se(e), this.density = t } clone() { return new uo(this.color, this.density) } toJSON() { return { type: "FogExp2", color: this.color.getHex(), density: this.density } } }; uo.prototype.isFogExp2 = !0; var ho = class { constructor(e, t = 1, n = 1e3) { this.name = "", this.color = new se(e), this.near = t, this.far = n } clone() { return new ho(this.color, this.near, this.far) } toJSON() { return { type: "Fog", color: this.color.getHex(), near: this.near, far: this.far } } }; ho.prototype.isFog = !0; var $r = class extends Ne { constructor() { super(); this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.overrideMaterial = null, this.autoUpdate = !0, typeof __THREE_DEVTOOLS__ != "undefined" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this })) } copy(e, t) { return super.copy(e, t), e.background !== null && (this.background = e.background.clone()), e.environment !== null && (this.environment = e.environment.clone()), e.fog !== null && (this.fog = e.fog.clone()), e.overrideMaterial !== null && (this.overrideMaterial = e.overrideMaterial.clone()), this.autoUpdate = e.autoUpdate, this.matrixAutoUpdate = e.matrixAutoUpdate, this } toJSON(e) { let t = super.toJSON(e); return this.fog !== null && (t.object.fog = this.fog.toJSON()), t } }; $r.prototype.isScene = !0; var ur = class { constructor(e, t) { this.array = e, this.stride = t, this.count = e !== void 0 ? e.length / t : 0, this.usage = Hr, this.updateRange = { offset: 0, count: -1 }, this.version = 0, this.uuid = jt() } onUploadCallback() { } set needsUpdate(e) { e === !0 && this.version++ } setUsage(e) { return this.usage = e, this } copy(e) { return this.array = new e.array.constructor(e.array), this.count = e.count, this.stride = e.stride, this.usage = e.usage, this } copyAt(e, t, n) { e *= this.stride, n *= t.stride; for (let i = 0, r = this.stride; i < r; i++)this.array[e + i] = t.array[n + i]; return this } set(e, t = 0) { return this.array.set(e, t), this } clone(e) { e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = jt()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer); let t = new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]), n = new this.constructor(t, this.stride); return n.setUsage(this.usage), n } onUpload(e) { return this.onUploadCallback = e, this } toJSON(e) { return e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = jt()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer))), { uuid: this.uuid, buffer: this.array.buffer._uuid, type: this.array.constructor.name, stride: this.stride } } }; ur.prototype.isInterleavedBuffer = !0; var je = new A, hr = class { constructor(e, t, n, i = !1) { this.name = "", this.data = e, this.itemSize = t, this.offset = n, this.normalized = i === !0 } get count() { return this.data.count } get array() { return this.data.array } set needsUpdate(e) { this.data.needsUpdate = e } applyMatrix4(e) { for (let t = 0, n = this.data.count; t < n; t++)je.x = this.getX(t), je.y = this.getY(t), je.z = this.getZ(t), je.applyMatrix4(e), this.setXYZ(t, je.x, je.y, je.z); return this } applyNormalMatrix(e) { for (let t = 0, n = this.count; t < n; t++)je.x = this.getX(t), je.y = this.getY(t), je.z = this.getZ(t), je.applyNormalMatrix(e), this.setXYZ(t, je.x, je.y, je.z); return this } transformDirection(e) { for (let t = 0, n = this.count; t < n; t++)je.x = this.getX(t), je.y = this.getY(t), je.z = this.getZ(t), je.transformDirection(e), this.setXYZ(t, je.x, je.y, je.z); return this } setX(e, t) { return this.data.array[e * this.data.stride + this.offset] = t, this } setY(e, t) { return this.data.array[e * this.data.stride + this.offset + 1] = t, this } setZ(e, t) { return this.data.array[e * this.data.stride + this.offset + 2] = t, this } setW(e, t) { return this.data.array[e * this.data.stride + this.offset + 3] = t, this } getX(e) { return this.data.array[e * this.data.stride + this.offset] } getY(e) { return this.data.array[e * this.data.stride + this.offset + 1] } getZ(e) { return this.data.array[e * this.data.stride + this.offset + 2] } getW(e) { return this.data.array[e * this.data.stride + this.offset + 3] } setXY(e, t, n) { return e = e * this.data.stride + this.offset, this.data.array[e + 0] = t, this.data.array[e + 1] = n, this } setXYZ(e, t, n, i) { return e = e * this.data.stride + this.offset, this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = i, this } setXYZW(e, t, n, i, r) { return e = e * this.data.stride + this.offset, this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = i, this.data.array[e + 3] = r, this } clone(e) { if (e === void 0) { console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data."); let t = []; for (let n = 0; n < this.count; n++) { let i = n * this.data.stride + this.offset; for (let r = 0; r < this.itemSize; r++)t.push(this.data.array[i + r]) } return new Qe(new this.array.constructor(t), this.itemSize, this.normalized) } else return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.clone(e)), new hr(e.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized) } toJSON(e) { if (e === void 0) { console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data."); let t = []; for (let n = 0; n < this.count; n++) { let i = n * this.data.stride + this.offset; for (let r = 0; r < this.itemSize; r++)t.push(this.data.array[i + r]) } return { itemSize: this.itemSize, type: this.array.constructor.name, array: t, normalized: this.normalized } } else return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.toJSON(e)), { isInterleavedBufferAttribute: !0, itemSize: this.itemSize, data: this.data.uuid, offset: this.offset, normalized: this.normalized } } }; hr.prototype.isInterleavedBufferAttribute = !0; var sl = class extends ht { constructor(e) { super(); this.type = "SpriteMaterial", this.color = new se(16777215), this.map = null, this.alphaMap = null, this.rotation = 0, this.sizeAttenuation = !0, this.transparent = !0, this.setValues(e) } copy(e) { return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.rotation = e.rotation, this.sizeAttenuation = e.sizeAttenuation, this } }; sl.prototype.isSpriteMaterial = !0; var fr, Qr = new A, dr = new A, pr = new A, mr = new Y, Kr = new Y, lh = new xe, fo = new A, es = new A, po = new A, ch = new Y, ol = new Y, uh = new Y, hh = class extends Ne { constructor(e) { super(); if (this.type = "Sprite", fr === void 0) { fr = new We; let t = new Float32Array([-.5, -.5, 0, 0, 0, .5, -.5, 0, 1, 0, .5, .5, 0, 1, 1, -.5, .5, 0, 0, 1]), n = new ur(t, 5); fr.setIndex([0, 1, 2, 0, 2, 3]), fr.setAttribute("position", new hr(n, 3, 0, !1)), fr.setAttribute("uv", new hr(n, 2, 3, !1)) } this.geometry = fr, this.material = e !== void 0 ? e : new sl, this.center = new Y(.5, .5) } raycast(e, t) { e.camera === null && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), dr.setFromMatrixScale(this.matrixWorld), lh.copy(e.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse, this.matrixWorld), pr.setFromMatrixPosition(this.modelViewMatrix), e.camera.isPerspectiveCamera && this.material.sizeAttenuation === !1 && dr.multiplyScalar(-pr.z); let n = this.material.rotation, i, r; n !== 0 && (r = Math.cos(n), i = Math.sin(n)); let o = this.center; mo(fo.set(-.5, -.5, 0), pr, o, dr, i, r), mo(es.set(.5, -.5, 0), pr, o, dr, i, r), mo(po.set(.5, .5, 0), pr, o, dr, i, r), ch.set(0, 0), ol.set(1, 0), uh.set(1, 1); let a = e.ray.intersectTriangle(fo, es, po, !1, Qr); if (a === null && (mo(es.set(-.5, .5, 0), pr, o, dr, i, r), ol.set(0, 1), a = e.ray.intersectTriangle(fo, po, es, !1, Qr), a === null)) return; let l = e.ray.origin.distanceTo(Qr); l < e.near || l > e.far || t.push({ distance: l, point: Qr.clone(), uv: Je.getUV(Qr, fo, es, po, ch, ol, uh, new Y), face: null, object: this }) } copy(e) { return super.copy(e), e.center !== void 0 && this.center.copy(e.center), this.material = e.material, this } }; hh.prototype.isSprite = !0; function mo(s, e, t, n, i, r) { mr.subVectors(s, t).addScalar(.5).multiply(n), i !== void 0 ? (Kr.x = r * mr.x - i * mr.y, Kr.y = i * mr.x + r * mr.y) : Kr.copy(mr), s.copy(e), s.x += Kr.x, s.y += Kr.y, s.applyMatrix4(lh) } var fh = new A, dh = new Oe, ph = new Oe, hy = new A, mh = new xe, al = class extends tt { constructor(e, t) { super(e, t); this.type = "SkinnedMesh", this.bindMode = "attached", this.bindMatrix = new xe, this.bindMatrixInverse = new xe } copy(e) { return super.copy(e), this.bindMode = e.bindMode, this.bindMatrix.copy(e.bindMatrix), this.bindMatrixInverse.copy(e.bindMatrixInverse), this.skeleton = e.skeleton, this } bind(e, t) { this.skeleton = e, t === void 0 && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), t = this.matrixWorld), this.bindMatrix.copy(t), this.bindMatrixInverse.copy(t).invert() } pose() { this.skeleton.pose() } normalizeSkinWeights() { let e = new Oe, t = this.geometry.attributes.skinWeight; for (let n = 0, i = t.count; n < i; n++) { e.x = t.getX(n), e.y = t.getY(n), e.z = t.getZ(n), e.w = t.getW(n); let r = 1 / e.manhattanLength(); r !== 1 / 0 ? e.multiplyScalar(r) : e.set(1, 0, 0, 0), t.setXYZW(n, e.x, e.y, e.z, e.w) } } updateMatrixWorld(e) { super.updateMatrixWorld(e), this.bindMode === "attached" ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : this.bindMode === "detached" ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode) } boneTransform(e, t) { let n = this.skeleton, i = this.geometry; dh.fromBufferAttribute(i.attributes.skinIndex, e), ph.fromBufferAttribute(i.attributes.skinWeight, e), fh.fromBufferAttribute(i.attributes.position, e).applyMatrix4(this.bindMatrix), t.set(0, 0, 0); for (let r = 0; r < 4; r++) { let o = ph.getComponent(r); if (o !== 0) { let a = dh.getComponent(r); mh.multiplyMatrices(n.bones[a].matrixWorld, n.boneInverses[a]), t.addScaledVector(hy.copy(fh).applyMatrix4(mh), o) } } return t.applyMatrix4(this.bindMatrixInverse) } }; al.prototype.isSkinnedMesh = !0; var gh = class extends Ne { constructor() { super(); this.type = "Bone" } }; gh.prototype.isBone = !0; var _h = class extends ot { constructor(e = null, t = 1, n = 1, i, r, o, a, l, c = rt, u = rt, h, f) { super(null, o, a, l, c, u, i, r, h, f); this.image = { data: e, width: t, height: n }, this.magFilter = c, this.minFilter = u, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1, this.needsUpdate = !0 } }; _h.prototype.isDataTexture = !0; var go = class extends Qe { constructor(e, t, n, i = 1) { typeof n == "number" && (i = n, n = !1, console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")); super(e, t, n); this.meshPerAttribute = i } copy(e) { return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this } toJSON() { let e = super.toJSON(); return e.meshPerAttribute = this.meshPerAttribute, e.isInstancedBufferAttribute = !0, e } }; go.prototype.isInstancedBufferAttribute = !0; var xh = new xe, yh = new xe, _o = [], ts = new tt, vh = class extends tt { constructor(e, t, n) { super(e, t); this.instanceMatrix = new go(new Float32Array(n * 16), 16), this.instanceColor = null, this.count = n, this.frustumCulled = !1 } copy(e) { return super.copy(e), this.instanceMatrix.copy(e.instanceMatrix), e.instanceColor !== null && (this.instanceColor = e.instanceColor.clone()), this.count = e.count, this } getColorAt(e, t) { t.fromArray(this.instanceColor.array, e * 3) } getMatrixAt(e, t) { t.fromArray(this.instanceMatrix.array, e * 16) } raycast(e, t) { let n = this.matrixWorld, i = this.count; if (ts.geometry = this.geometry, ts.material = this.material, ts.material !== void 0) for (let r = 0; r < i; r++) { this.getMatrixAt(r, xh), yh.multiplyMatrices(n, xh), ts.matrixWorld = yh, ts.raycast(e, _o); for (let o = 0, a = _o.length; o < a; o++) { let l = _o[o]; l.instanceId = r, l.object = this, t.push(l) } _o.length = 0 } } setColorAt(e, t) { this.instanceColor === null && (this.instanceColor = new go(new Float32Array(this.instanceMatrix.count * 3), 3)), t.toArray(this.instanceColor.array, e * 3) } setMatrixAt(e, t) { t.toArray(this.instanceMatrix.array, e * 16) } updateMorphTargets() { } dispose() { this.dispatchEvent({ type: "dispose" }) } }; vh.prototype.isInstancedMesh = !0; var gr = class extends ht { constructor(e) { super(); this.type = "LineBasicMaterial", this.color = new se(16777215), this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.setValues(e) } copy(e) { return super.copy(e), this.color.copy(e.color), this.linewidth = e.linewidth, this.linecap = e.linecap, this.linejoin = e.linejoin, this } }; gr.prototype.isLineBasicMaterial = !0; var wh = new A, bh = new A, Mh = new xe, ll = new Wn, xo = new wi, yo = class extends Ne { constructor(e = new We, t = new gr) { super(); this.type = "Line", this.geometry = e, this.material = t, this.updateMorphTargets() } copy(e) { return super.copy(e), this.material = e.material, this.geometry = e.geometry, this } computeLineDistances() { let e = this.geometry; if (e.isBufferGeometry) if (e.index === null) { let t = e.attributes.position, n = [0]; for (let i = 1, r = t.count; i < r; i++)wh.fromBufferAttribute(t, i - 1), bh.fromBufferAttribute(t, i), n[i] = n[i - 1], n[i] += wh.distanceTo(bh); e.setAttribute("lineDistance", new et(n, 1)) } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry."); else e.isGeometry && console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead."); return this } raycast(e, t) { let n = this.geometry, i = this.matrixWorld, r = e.params.Line.threshold, o = n.drawRange; if (n.boundingSphere === null && n.computeBoundingSphere(), xo.copy(n.boundingSphere), xo.applyMatrix4(i), xo.radius += r, e.ray.intersectsSphere(xo) === !1) return; Mh.copy(i).invert(), ll.copy(e.ray).applyMatrix4(Mh); let a = r / ((this.scale.x + this.scale.y + this.scale.z) / 3), l = a * a, c = new A, u = new A, h = new A, f = new A, d = this.isLineSegments ? 2 : 1; if (n.isBufferGeometry) { let g = n.index, x = n.attributes.position; if (g !== null) { let p = Math.max(0, o.start), _ = Math.min(g.count, o.start + o.count); for (let w = p, v = _ - 1; w < v; w += d) { let b = g.getX(w), T = g.getX(w + 1); if (c.fromBufferAttribute(x, b), u.fromBufferAttribute(x, T), ll.distanceSqToSegment(c, u, f, h) > l) continue; f.applyMatrix4(this.matrixWorld); let C = e.ray.origin.distanceTo(f); C < e.near || C > e.far || t.push({ distance: C, point: h.clone().applyMatrix4(this.matrixWorld), index: w, face: null, faceIndex: null, object: this }) } } else { let p = Math.max(0, o.start), _ = Math.min(x.count, o.start + o.count); for (let w = p, v = _ - 1; w < v; w += d) { if (c.fromBufferAttribute(x, w), u.fromBufferAttribute(x, w + 1), ll.distanceSqToSegment(c, u, f, h) > l) continue; f.applyMatrix4(this.matrixWorld); let T = e.ray.origin.distanceTo(f); T < e.near || T > e.far || t.push({ distance: T, point: h.clone().applyMatrix4(this.matrixWorld), index: w, face: null, faceIndex: null, object: this }) } } } else n.isGeometry && console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.") } updateMorphTargets() { let e = this.geometry; if (e.isBufferGeometry) { let t = e.morphAttributes, n = Object.keys(t); if (n.length > 0) { let i = t[n[0]]; if (i !== void 0) { this.morphTargetInfluences = [], this.morphTargetDictionary = {}; for (let r = 0, o = i.length; r < o; r++) { let a = i[r].name || String(r); this.morphTargetInfluences.push(0), this.morphTargetDictionary[a] = r } } } } else { let t = e.morphTargets; t !== void 0 && t.length > 0 && console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.") } } }; yo.prototype.isLine = !0; var Sh = new A, Th = new A, vo = class extends yo { constructor(e, t) { super(e, t); this.type = "LineSegments" } computeLineDistances() { let e = this.geometry; if (e.isBufferGeometry) if (e.index === null) { let t = e.attributes.position, n = []; for (let i = 0, r = t.count; i < r; i += 2)Sh.fromBufferAttribute(t, i), Th.fromBufferAttribute(t, i + 1), n[i] = i === 0 ? 0 : n[i - 1], n[i + 1] = n[i] + Sh.distanceTo(Th); e.setAttribute("lineDistance", new et(n, 1)) } else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry."); else e.isGeometry && console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead."); return this } }; vo.prototype.isLineSegments = !0; var Eh = class extends yo { constructor(e, t) { super(e, t); this.type = "LineLoop" } }; Eh.prototype.isLineLoop = !0; var cl = class extends ht { constructor(e) { super(); this.type = "PointsMaterial", this.color = new se(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = !0, this.setValues(e) } copy(e) { return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.size = e.size, this.sizeAttenuation = e.sizeAttenuation, this } }; cl.prototype.isPointsMaterial = !0; var Ah = new xe, ul = new Wn, wo = new wi, bo = new A, Lh = class extends Ne { constructor(e = new We, t = new cl) { super(); this.type = "Points", this.geometry = e, this.material = t, this.updateMorphTargets() } copy(e) { return super.copy(e), this.material = e.material, this.geometry = e.geometry, this } raycast(e, t) { let n = this.geometry, i = this.matrixWorld, r = e.params.Points.threshold, o = n.drawRange; if (n.boundingSphere === null && n.computeBoundingSphere(), wo.copy(n.boundingSphere), wo.applyMatrix4(i), wo.radius += r, e.ray.intersectsSphere(wo) === !1) return; Ah.copy(i).invert(), ul.copy(e.ray).applyMatrix4(Ah); let a = r / ((this.scale.x + this.scale.y + this.scale.z) / 3), l = a * a; if (n.isBufferGeometry) { let c = n.index, h = n.attributes.position; if (c !== null) { let f = Math.max(0, o.start), d = Math.min(c.count, o.start + o.count); for (let g = f, m = d; g < m; g++) { let x = c.getX(g); bo.fromBufferAttribute(h, x), Ch(bo, x, l, i, e, t, this) } } else { let f = Math.max(0, o.start), d = Math.min(h.count, o.start + o.count); for (let g = f, m = d; g < m; g++)bo.fromBufferAttribute(h, g), Ch(bo, g, l, i, e, t, this) } } else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.") } updateMorphTargets() { let e = this.geometry; if (e.isBufferGeometry) { let t = e.morphAttributes, n = Object.keys(t); if (n.length > 0) { let i = t[n[0]]; if (i !== void 0) { this.morphTargetInfluences = [], this.morphTargetDictionary = {}; for (let r = 0, o = i.length; r < o; r++) { let a = i[r].name || String(r); this.morphTargetInfluences.push(0), this.morphTargetDictionary[a] = r } } } } else { let t = e.morphTargets; t !== void 0 && t.length > 0 && console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.") } } }; Lh.prototype.isPoints = !0; function Ch(s, e, t, n, i, r, o) { let a = ul.distanceSqToPoint(s); if (a < t) { let l = new A; ul.closestPointToPoint(s, l), l.applyMatrix4(n); let c = i.ray.origin.distanceTo(l); if (c < i.near || c > i.far) return; r.push({ distance: c, distanceToRay: Math.sqrt(a), point: l, index: e, face: null, object: o }) } } var Ph = class extends ot { constructor(e, t, n, i, r, o, a, l, c) { super(e, t, n, i, r, o, a, l, c); this.format = a !== void 0 ? a : Un, this.minFilter = o !== void 0 ? o : Ut, this.magFilter = r !== void 0 ? r : Ut, this.generateMipmaps = !1; let u = this; function h() { u.needsUpdate = !0, e.requestVideoFrameCallback(h) } "requestVideoFrameCallback" in e && e.requestVideoFrameCallback(h) } clone() { return new this.constructor(this.image).copy(this) } update() { let e = this.image; "requestVideoFrameCallback" in e === !1 && e.readyState >= e.HAVE_CURRENT_DATA && (this.needsUpdate = !0) } }; Ph.prototype.isVideoTexture = !0; var Rh = class extends ot { constructor(e, t, n, i, r, o, a, l, c, u, h, f) { super(null, o, a, l, c, u, i, r, h, f); this.image = { width: t, height: n }, this.mipmaps = e, this.flipY = !1, this.generateMipmaps = !1 } }; Rh.prototype.isCompressedTexture = !0; var Ih = class extends ot { constructor(e, t, n, i, r, o, a, l, c) { super(e, t, n, i, r, o, a, l, c); this.needsUpdate = !0 } }; Ih.prototype.isCanvasTexture = !0; var Dh = class extends ot { constructor(e, t, n, i, r, o, a, l, c, u) { if (u = u !== void 0 ? u : Ui, u !== Ui && u !== kr) throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat"); n === void 0 && u === Ui && (n = Fs), n === void 0 && u === kr && (n = Ur); super(null, i, r, o, a, l, u, n, c); this.image = { width: e, height: t }, this.magFilter = a !== void 0 ? a : rt, this.minFilter = l !== void 0 ? l : rt, this.flipY = !1, this.generateMipmaps = !1 } }; Dh.prototype.isDepthTexture = !0; var eb = new A, tb = new A, nb = new A, ib = new Je; var Bt = class { constructor() { this.type = "Curve", this.arcLengthDivisions = 200 } getPoint() { return console.warn("THREE.Curve: .getPoint() not implemented."), null } getPointAt(e, t) { let n = this.getUtoTmapping(e); return this.getPoint(n, t) } getPoints(e = 5) { let t = []; for (let n = 0; n <= e; n++)t.push(this.getPoint(n / e)); return t } getSpacedPoints(e = 5) { let t = []; for (let n = 0; n <= e; n++)t.push(this.getPointAt(n / e)); return t } getLength() { let e = this.getLengths(); return e[e.length - 1] } getLengths(e = this.arcLengthDivisions) { if (this.cacheArcLengths && this.cacheArcLengths.length === e + 1 && !this.needsUpdate) return this.cacheArcLengths; this.needsUpdate = !1; let t = [], n, i = this.getPoint(0), r = 0; t.push(0); for (let o = 1; o <= e; o++)n = this.getPoint(o / e), r += n.distanceTo(i), t.push(r), i = n; return this.cacheArcLengths = t, t } updateArcLengths() { this.needsUpdate = !0, this.getLengths() } getUtoTmapping(e, t) { let n = this.getLengths(), i = 0, r = n.length, o; t ? o = t : o = e * n[r - 1]; let a = 0, l = r - 1, c; for (; a <= l;)if (i = Math.floor(a + (l - a) / 2), c = n[i] - o, c < 0) a = i + 1; else if (c > 0) l = i - 1; else { l = i; break } if (i = l, n[i] === o) return i / (r - 1); let u = n[i], f = n[i + 1] - u, d = (o - u) / f; return (i + d) / (r - 1) } getTangent(e, t) { let n = 1e-4, i = e - n, r = e + n; i < 0 && (i = 0), r > 1 && (r = 1); let o = this.getPoint(i), a = this.getPoint(r), l = t || (o.isVector2 ? new Y : new A); return l.copy(a).sub(o).normalize(), l } getTangentAt(e, t) { let n = this.getUtoTmapping(e); return this.getTangent(n, t) } computeFrenetFrames(e, t) { let n = new A, i = [], r = [], o = [], a = new A, l = new xe; for (let d = 0; d <= e; d++) { let g = d / e; i[d] = this.getTangentAt(g, new A), i[d].normalize() } r[0] = new A, o[0] = new A; let c = Number.MAX_VALUE, u = Math.abs(i[0].x), h = Math.abs(i[0].y), f = Math.abs(i[0].z); u <= c && (c = u, n.set(1, 0, 0)), h <= c && (c = h, n.set(0, 1, 0)), f <= c && n.set(0, 0, 1), a.crossVectors(i[0], n).normalize(), r[0].crossVectors(i[0], a), o[0].crossVectors(i[0], r[0]); for (let d = 1; d <= e; d++) { if (r[d] = r[d - 1].clone(), o[d] = o[d - 1].clone(), a.crossVectors(i[d - 1], i[d]), a.length() > Number.EPSILON) { a.normalize(); let g = Math.acos(Tt(i[d - 1].dot(i[d]), -1, 1)); r[d].applyMatrix4(l.makeRotationAxis(a, g)) } o[d].crossVectors(i[d], r[d]) } if (t === !0) { let d = Math.acos(Tt(r[0].dot(r[e]), -1, 1)); d /= e, i[0].dot(a.crossVectors(r[0], r[e])) > 0 && (d = -d); for (let g = 1; g <= e; g++)r[g].applyMatrix4(l.makeRotationAxis(i[g], d * g)), o[g].crossVectors(i[g], r[g]) } return { tangents: i, normals: r, binormals: o } } clone() { return new this.constructor().copy(this) } copy(e) { return this.arcLengthDivisions = e.arcLengthDivisions, this } toJSON() { let e = { metadata: { version: 4.5, type: "Curve", generator: "Curve.toJSON" } }; return e.arcLengthDivisions = this.arcLengthDivisions, e.type = this.type, e } fromJSON(e) { return this.arcLengthDivisions = e.arcLengthDivisions, this } }, ns = class extends Bt { constructor(e = 0, t = 0, n = 1, i = 1, r = 0, o = Math.PI * 2, a = !1, l = 0) { super(); this.type = "EllipseCurve", this.aX = e, this.aY = t, this.xRadius = n, this.yRadius = i, this.aStartAngle = r, this.aEndAngle = o, this.aClockwise = a, this.aRotation = l } getPoint(e, t) { let n = t || new Y, i = Math.PI * 2, r = this.aEndAngle - this.aStartAngle, o = Math.abs(r) < Number.EPSILON; for (; r < 0;)r += i; for (; r > i;)r -= i; r < Number.EPSILON && (o ? r = 0 : r = i), this.aClockwise === !0 && !o && (r === i ? r = -i : r = r - i); let a = this.aStartAngle + e * r, l = this.aX + this.xRadius * Math.cos(a), c = this.aY + this.yRadius * Math.sin(a); if (this.aRotation !== 0) { let u = Math.cos(this.aRotation), h = Math.sin(this.aRotation), f = l - this.aX, d = c - this.aY; l = f * u - d * h + this.aX, c = f * h + d * u + this.aY } return n.set(l, c) } copy(e) { return super.copy(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this } toJSON() { let e = super.toJSON(); return e.aX = this.aX, e.aY = this.aY, e.xRadius = this.xRadius, e.yRadius = this.yRadius, e.aStartAngle = this.aStartAngle, e.aEndAngle = this.aEndAngle, e.aClockwise = this.aClockwise, e.aRotation = this.aRotation, e } fromJSON(e) { return super.fromJSON(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this } }; ns.prototype.isEllipseCurve = !0; var hl = class extends ns { constructor(e, t, n, i, r, o) { super(e, t, n, n, i, r, o); this.type = "ArcCurve" } }; hl.prototype.isArcCurve = !0; function fl() { let s = 0, e = 0, t = 0, n = 0; function i(r, o, a, l) { s = r, e = a, t = -3 * r + 3 * o - 2 * a - l, n = 2 * r - 2 * o + a + l } return { initCatmullRom: function (r, o, a, l, c) { i(o, a, c * (a - r), c * (l - o)) }, initNonuniformCatmullRom: function (r, o, a, l, c, u, h) { let f = (o - r) / c - (a - r) / (c + u) + (a - o) / u, d = (a - o) / u - (l - o) / (u + h) + (l - a) / h; f *= u, d *= u, i(o, a, f, d) }, calc: function (r) { let o = r * r, a = o * r; return s + e * r + t * o + n * a } } } var Mo = new A, dl = new fl, pl = new fl, ml = new fl, gl = class extends Bt { constructor(e = [], t = !1, n = "centripetal", i = .5) { super(); this.type = "CatmullRomCurve3", this.points = e, this.closed = t, this.curveType = n, this.tension = i } getPoint(e, t = new A) { let n = t, i = this.points, r = i.length, o = (r - (this.closed ? 0 : 1)) * e, a = Math.floor(o), l = o - a; this.closed ? a += a > 0 ? 0 : (Math.floor(Math.abs(a) / r) + 1) * r : l === 0 && a === r - 1 && (a = r - 2, l = 1); let c, u; this.closed || a > 0 ? c = i[(a - 1) % r] : (Mo.subVectors(i[0], i[1]).add(i[0]), c = Mo); let h = i[a % r], f = i[(a + 1) % r]; if (this.closed || a + 2 < r ? u = i[(a + 2) % r] : (Mo.subVectors(i[r - 1], i[r - 2]).add(i[r - 1]), u = Mo), this.curveType === "centripetal" || this.curveType === "chordal") { let d = this.curveType === "chordal" ? .5 : .25, g = Math.pow(c.distanceToSquared(h), d), m = Math.pow(h.distanceToSquared(f), d), x = Math.pow(f.distanceToSquared(u), d); m < 1e-4 && (m = 1), g < 1e-4 && (g = m), x < 1e-4 && (x = m), dl.initNonuniformCatmullRom(c.x, h.x, f.x, u.x, g, m, x), pl.initNonuniformCatmullRom(c.y, h.y, f.y, u.y, g, m, x), ml.initNonuniformCatmullRom(c.z, h.z, f.z, u.z, g, m, x) } else this.curveType === "catmullrom" && (dl.initCatmullRom(c.x, h.x, f.x, u.x, this.tension), pl.initCatmullRom(c.y, h.y, f.y, u.y, this.tension), ml.initCatmullRom(c.z, h.z, f.z, u.z, this.tension)); return n.set(dl.calc(l), pl.calc(l), ml.calc(l)), n } copy(e) { super.copy(e), this.points = []; for (let t = 0, n = e.points.length; t < n; t++) { let i = e.points[t]; this.points.push(i.clone()) } return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this } toJSON() { let e = super.toJSON(); e.points = []; for (let t = 0, n = this.points.length; t < n; t++) { let i = this.points[t]; e.points.push(i.toArray()) } return e.closed = this.closed, e.curveType = this.curveType, e.tension = this.tension, e } fromJSON(e) { super.fromJSON(e), this.points = []; for (let t = 0, n = e.points.length; t < n; t++) { let i = e.points[t]; this.points.push(new A().fromArray(i)) } return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this } }; gl.prototype.isCatmullRomCurve3 = !0; function Fh(s, e, t, n, i) { let r = (n - e) * .5, o = (i - t) * .5, a = s * s, l = s * a; return (2 * t - 2 * n + r + o) * l + (-3 * t + 3 * n - 2 * r - o) * a + r * s + t } function fy(s, e) { let t = 1 - s; return t * t * e } function dy(s, e) { return 2 * (1 - s) * s * e } function py(s, e) { return s * s * e } function is(s, e, t, n) { return fy(s, e) + dy(s, t) + py(s, n) } function my(s, e) { let t = 1 - s; return t * t * t * e } function gy(s, e) { let t = 1 - s; return 3 * t * t * s * e } function _y(s, e) { return 3 * (1 - s) * s * s * e } function xy(s, e) { return s * s * s * e } function rs(s, e, t, n, i) { return my(s, e) + gy(s, t) + _y(s, n) + xy(s, i) } var So = class extends Bt { constructor(e = new Y, t = new Y, n = new Y, i = new Y) { super(); this.type = "CubicBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = i } getPoint(e, t = new Y) { let n = t, i = this.v0, r = this.v1, o = this.v2, a = this.v3; return n.set(rs(e, i.x, r.x, o.x, a.x), rs(e, i.y, r.y, o.y, a.y)), n } copy(e) { return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this } toJSON() { let e = super.toJSON(); return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e } fromJSON(e) { return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this } }; So.prototype.isCubicBezierCurve = !0; var _l = class extends Bt { constructor(e = new A, t = new A, n = new A, i = new A) { super(); this.type = "CubicBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = i } getPoint(e, t = new A) { let n = t, i = this.v0, r = this.v1, o = this.v2, a = this.v3; return n.set(rs(e, i.x, r.x, o.x, a.x), rs(e, i.y, r.y, o.y, a.y), rs(e, i.z, r.z, o.z, a.z)), n } copy(e) { return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this } toJSON() { let e = super.toJSON(); return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e } fromJSON(e) { return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this } }; _l.prototype.isCubicBezierCurve3 = !0; var ss = class extends Bt { constructor(e = new Y, t = new Y) { super(); this.type = "LineCurve", this.v1 = e, this.v2 = t } getPoint(e, t = new Y) { let n = t; return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n } getPointAt(e, t) { return this.getPoint(e, t) } getTangent(e, t) { let n = t || new Y; return n.copy(this.v2).sub(this.v1).normalize(), n } copy(e) { return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this } toJSON() { let e = super.toJSON(); return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e } fromJSON(e) { return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this } }; ss.prototype.isLineCurve = !0; var Bh = class extends Bt { constructor(e = new A, t = new A) { super(); this.type = "LineCurve3", this.isLineCurve3 = !0, this.v1 = e, this.v2 = t } getPoint(e, t = new A) { let n = t; return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n } getPointAt(e, t) { return this.getPoint(e, t) } copy(e) { return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this } toJSON() { let e = super.toJSON(); return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e } fromJSON(e) { return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this } }, To = class extends Bt { constructor(e = new Y, t = new Y, n = new Y) { super(); this.type = "QuadraticBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n } getPoint(e, t = new Y) { let n = t, i = this.v0, r = this.v1, o = this.v2; return n.set(is(e, i.x, r.x, o.x), is(e, i.y, r.y, o.y)), n } copy(e) { return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this } toJSON() { let e = super.toJSON(); return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e } fromJSON(e) { return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this } }; To.prototype.isQuadraticBezierCurve = !0; var xl = class extends Bt { constructor(e = new A, t = new A, n = new A) { super(); this.type = "QuadraticBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n } getPoint(e, t = new A) { let n = t, i = this.v0, r = this.v1, o = this.v2; return n.set(is(e, i.x, r.x, o.x), is(e, i.y, r.y, o.y), is(e, i.z, r.z, o.z)), n } copy(e) { return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this } toJSON() { let e = super.toJSON(); return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e } fromJSON(e) { return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this } }; xl.prototype.isQuadraticBezierCurve3 = !0; var Eo = class extends Bt { constructor(e = []) { super(); this.type = "SplineCurve", this.points = e } getPoint(e, t = new Y) { let n = t, i = this.points, r = (i.length - 1) * e, o = Math.floor(r), a = r - o, l = i[o === 0 ? o : o - 1], c = i[o], u = i[o > i.length - 2 ? i.length - 1 : o + 1], h = i[o > i.length - 3 ? i.length - 1 : o + 2]; return n.set(Fh(a, l.x, c.x, u.x, h.x), Fh(a, l.y, c.y, u.y, h.y)), n } copy(e) { super.copy(e), this.points = []; for (let t = 0, n = e.points.length; t < n; t++) { let i = e.points[t]; this.points.push(i.clone()) } return this } toJSON() { let e = super.toJSON(); e.points = []; for (let t = 0, n = this.points.length; t < n; t++) { let i = this.points[t]; e.points.push(i.toArray()) } return e } fromJSON(e) { super.fromJSON(e), this.points = []; for (let t = 0, n = e.points.length; t < n; t++) { let i = e.points[t]; this.points.push(new Y().fromArray(i)) } return this } }; Eo.prototype.isSplineCurve = !0; var Nh = Object.freeze({ __proto__: null, ArcCurve: hl, CatmullRomCurve3: gl, CubicBezierCurve: So, CubicBezierCurve3: _l, EllipseCurve: ns, LineCurve: ss, LineCurve3: Bh, QuadraticBezierCurve: To, QuadraticBezierCurve3: xl, SplineCurve: Eo }), yy = { triangulate: function (s, e, t = 2) { let n = e && e.length, i = n ? e[0] * t : s.length, r = zh(s, 0, i, t, !0), o = []; if (!r || r.next === r.prev) return o; let a, l, c, u, h, f, d; if (n && (r = Sy(s, e, r, t)), s.length > 80 * t) { a = c = s[0], l = u = s[1]; for (let g = t; g < i; g += t)h = s[g], f = s[g + 1], h < a && (a = h), f < l && (l = f), h > c && (c = h), f > u && (u = f); d = Math.max(c - a, u - l), d = d !== 0 ? 1 / d : 0 } return os(r, o, t, a, l, d), o } }; function zh(s, e, t, n, i) { let r, o; if (i === By(s, e, t, n) > 0) for (r = e; r < t; r += n)o = kh(r, s[r], s[r + 1], o); else for (r = t - n; r >= e; r -= n)o = kh(r, s[r], s[r + 1], o); return o && Ao(o, o.next) && (ls(o), o = o.next), o } function Kn(s, e) { if (!s) return s; e || (e = s); let t = s, n; do if (n = !1, !t.steiner && (Ao(t, t.next) || Xe(t.prev, t, t.next) === 0)) { if (ls(t), t = e = t.prev, t === t.next) break; n = !0 } else t = t.next; while (n || t !== e); return e } function os(s, e, t, n, i, r, o) { if (!s) return; !o && r && Cy(s, n, i, r); let a = s, l, c; for (; s.prev !== s.next;) { if (l = s.prev, c = s.next, r ? wy(s, n, i, r) : vy(s)) { e.push(l.i / t), e.push(s.i / t), e.push(c.i / t), ls(s), s = c.next, a = c.next; continue } if (s = c, s === a) { o ? o === 1 ? (s = by(Kn(s), e, t), os(s, e, t, n, i, r, 2)) : o === 2 && My(s, e, t, n, i, r) : os(Kn(s), e, t, n, i, r, 1); break } } } function vy(s) { let e = s.prev, t = s, n = s.next; if (Xe(e, t, n) >= 0) return !1; let i = s.next.next; for (; i !== s.prev;) { if (_r(e.x, e.y, t.x, t.y, n.x, n.y, i.x, i.y) && Xe(i.prev, i, i.next) >= 0) return !1; i = i.next } return !0 } function wy(s, e, t, n) { let i = s.prev, r = s, o = s.next; if (Xe(i, r, o) >= 0) return !1; let a = i.x < r.x ? i.x < o.x ? i.x : o.x : r.x < o.x ? r.x : o.x, l = i.y < r.y ? i.y < o.y ? i.y : o.y : r.y < o.y ? r.y : o.y, c = i.x > r.x ? i.x > o.x ? i.x : o.x : r.x > o.x ? r.x : o.x, u = i.y > r.y ? i.y > o.y ? i.y : o.y : r.y > o.y ? r.y : o.y, h = yl(a, l, e, t, n), f = yl(c, u, e, t, n), d = s.prevZ, g = s.nextZ; for (; d && d.z >= h && g && g.z <= f;) { if (d !== s.prev && d !== s.next && _r(i.x, i.y, r.x, r.y, o.x, o.y, d.x, d.y) && Xe(d.prev, d, d.next) >= 0 || (d = d.prevZ, g !== s.prev && g !== s.next && _r(i.x, i.y, r.x, r.y, o.x, o.y, g.x, g.y) && Xe(g.prev, g, g.next) >= 0)) return !1; g = g.nextZ } for (; d && d.z >= h;) { if (d !== s.prev && d !== s.next && _r(i.x, i.y, r.x, r.y, o.x, o.y, d.x, d.y) && Xe(d.prev, d, d.next) >= 0) return !1; d = d.prevZ } for (; g && g.z <= f;) { if (g !== s.prev && g !== s.next && _r(i.x, i.y, r.x, r.y, o.x, o.y, g.x, g.y) && Xe(g.prev, g, g.next) >= 0) return !1; g = g.nextZ } return !0 } function by(s, e, t) { let n = s; do { let i = n.prev, r = n.next.next; !Ao(i, r) && Oh(i, n, n.next, r) && as(i, r) && as(r, i) && (e.push(i.i / t), e.push(n.i / t), e.push(r.i / t), ls(n), ls(n.next), n = s = r), n = n.next } while (n !== s); return Kn(n) } function My(s, e, t, n, i, r) { let o = s; do { let a = o.next.next; for (; a !== o.prev;) { if (o.i !== a.i && Iy(o, a)) { let l = Uh(o, a); o = Kn(o, o.next), l = Kn(l, l.next), os(o, e, t, n, i, r), os(l, e, t, n, i, r); return } a = a.next } o = o.next } while (o !== s) } function Sy(s, e, t, n) { let i = [], r, o, a, l, c; for (r = 0, o = e.length; r < o; r++)a = e[r] * n, l = r < o - 1 ? e[r + 1] * n : s.length, c = zh(s, a, l, n, !1), c === c.next && (c.steiner = !0), i.push(Ry(c)); for (i.sort(Ty), r = 0; r < i.length; r++)Ey(i[r], t), t = Kn(t, t.next); return t } function Ty(s, e) { return s.x - e.x } function Ey(s, e) { if (e = Ay(s, e), e) { let t = Uh(e, s); Kn(e, e.next), Kn(t, t.next) } } function Ay(s, e) { let t = e, n = s.x, i = s.y, r = -1 / 0, o; do { if (i <= t.y && i >= t.next.y && t.next.y !== t.y) { let f = t.x + (i - t.y) * (t.next.x - t.x) / (t.next.y - t.y); if (f <= n && f > r) { if (r = f, f === n) { if (i === t.y) return t; if (i === t.next.y) return t.next } o = t.x < t.next.x ? t : t.next } } t = t.next } while (t !== e); if (!o) return null; if (n === r) return o; let a = o, l = o.x, c = o.y, u = 1 / 0, h; t = o; do n >= t.x && t.x >= l && n !== t.x && _r(i < c ? n : r, i, l, c, i < c ? r : n, i, t.x, t.y) && (h = Math.abs(i - t.y) / (n - t.x), as(t, s) && (h < u || h === u && (t.x > o.x || t.x === o.x && Ly(o, t))) && (o = t, u = h)), t = t.next; while (t !== a); return o } function Ly(s, e) { return Xe(s.prev, s, e.prev) < 0 && Xe(e.next, s, s.next) < 0 } function Cy(s, e, t, n) { let i = s; do i.z === null && (i.z = yl(i.x, i.y, e, t, n)), i.prevZ = i.prev, i.nextZ = i.next, i = i.next; while (i !== s); i.prevZ.nextZ = null, i.prevZ = null, Py(i) } function Py(s) { let e, t, n, i, r, o, a, l, c = 1; do { for (t = s, s = null, r = null, o = 0; t;) { for (o++, n = t, a = 0, e = 0; e < c && (a++, n = n.nextZ, !!n); e++); for (l = c; a > 0 || l > 0 && n;)a !== 0 && (l === 0 || !n || t.z <= n.z) ? (i = t, t = t.nextZ, a--) : (i = n, n = n.nextZ, l--), r ? r.nextZ = i : s = i, i.prevZ = r, r = i; t = n } r.nextZ = null, c *= 2 } while (o > 1); return s } function yl(s, e, t, n, i) { return s = 32767 * (s - t) * i, e = 32767 * (e - n) * i, s = (s | s << 8) & 16711935, s = (s | s << 4) & 252645135, s = (s | s << 2) & 858993459, s = (s | s << 1) & 1431655765, e = (e | e << 8) & 16711935, e = (e | e << 4) & 252645135, e = (e | e << 2) & 858993459, e = (e | e << 1) & 1431655765, s | e << 1 } function Ry(s) { let e = s, t = s; do (e.x < t.x || e.x === t.x && e.y < t.y) && (t = e), e = e.next; while (e !== s); return t } function _r(s, e, t, n, i, r, o, a) { return (i - o) * (e - a) - (s - o) * (r - a) >= 0 && (s - o) * (n - a) - (t - o) * (e - a) >= 0 && (t - o) * (r - a) - (i - o) * (n - a) >= 0 } function Iy(s, e) { return s.next.i !== e.i && s.prev.i !== e.i && !Dy(s, e) && (as(s, e) && as(e, s) && Fy(s, e) && (Xe(s.prev, s, e.prev) || Xe(s, e.prev, e)) || Ao(s, e) && Xe(s.prev, s, s.next) > 0 && Xe(e.prev, e, e.next) > 0) } function Xe(s, e, t) { return (e.y - s.y) * (t.x - e.x) - (e.x - s.x) * (t.y - e.y) } function Ao(s, e) { return s.x === e.x && s.y === e.y } function Oh(s, e, t, n) { let i = Co(Xe(s, e, t)), r = Co(Xe(s, e, n)), o = Co(Xe(t, n, s)), a = Co(Xe(t, n, e)); return !!(i !== r && o !== a || i === 0 && Lo(s, t, e) || r === 0 && Lo(s, n, e) || o === 0 && Lo(t, s, n) || a === 0 && Lo(t, e, n)) } function Lo(s, e, t) { return e.x <= Math.max(s.x, t.x) && e.x >= Math.min(s.x, t.x) && e.y <= Math.max(s.y, t.y) && e.y >= Math.min(s.y, t.y) } function Co(s) { return s > 0 ? 1 : s < 0 ? -1 : 0 } function Dy(s, e) { let t = s; do { if (t.i !== s.i && t.next.i !== s.i && t.i !== e.i && t.next.i !== e.i && Oh(t, t.next, s, e)) return !0; t = t.next } while (t !== s); return !1 } function as(s, e) { return Xe(s.prev, s, s.next) < 0 ? Xe(s, e, s.next) >= 0 && Xe(s, s.prev, e) >= 0 : Xe(s, e, s.prev) < 0 || Xe(s, s.next, e) < 0 } function Fy(s, e) { let t = s, n = !1, i = (s.x + e.x) / 2, r = (s.y + e.y) / 2; do t.y > r != t.next.y > r && t.next.y !== t.y && i < (t.next.x - t.x) * (r - t.y) / (t.next.y - t.y) + t.x && (n = !n), t = t.next; while (t !== s); return n } function Uh(s, e) { let t = new vl(s.i, s.x, s.y), n = new vl(e.i, e.x, e.y), i = s.next, r = e.prev; return s.next = e, e.prev = s, t.next = i, i.prev = t, n.next = t, t.prev = n, r.next = n, n.prev = r, n } function kh(s, e, t, n) { let i = new vl(s, e, t); return n ? (i.next = n.next, i.prev = n, n.next.prev = i, n.next = i) : (i.prev = i, i.next = i), i } function ls(s) { s.next.prev = s.prev, s.prev.next = s.next, s.prevZ && (s.prevZ.nextZ = s.nextZ), s.nextZ && (s.nextZ.prevZ = s.prevZ) } function vl(s, e, t) { this.i = s, this.x = e, this.y = t, this.prev = null, this.next = null, this.z = null, this.prevZ = null, this.nextZ = null, this.steiner = !1 } function By(s, e, t, n) { let i = 0; for (let r = e, o = t - n; r < t; r += n)i += (s[o] - s[r]) * (s[r + 1] + s[o + 1]), o = r; return i } var hn = class { static area(e) { let t = e.length, n = 0; for (let i = t - 1, r = 0; r < t; i = r++)n += e[i].x * e[r].y - e[r].x * e[i].y; return n * .5 } static isClockWise(e) { return hn.area(e) < 0 } static triangulateShape(e, t) { let n = [], i = [], r = []; Hh(e), Gh(n, e); let o = e.length; t.forEach(Hh); for (let l = 0; l < t.length; l++)i.push(o), o += t[l].length, Gh(n, t[l]); let a = yy.triangulate(n, i); for (let l = 0; l < a.length; l += 3)r.push(a.slice(l, l + 3)); return r } }; function Hh(s) { let e = s.length; e > 2 && s[e - 1].equals(s[0]) && s.pop() } function Gh(s, e) { for (let t = 0; t < e.length; t++)s.push(e[t].x), s.push(e[t].y) } var Mi = class extends We { constructor(e, t) { super(); this.type = "ExtrudeGeometry", this.parameters = { shapes: e, options: t }, e = Array.isArray(e) ? e : [e]; let n = this, i = [], r = []; for (let a = 0, l = e.length; a < l; a++) { let c = e[a]; o(c) } this.setAttribute("position", new et(i, 3)), this.setAttribute("uv", new et(r, 2)), this.computeVertexNormals(); function o(a) { let l = [], c = t.curveSegments !== void 0 ? t.curveSegments : 12, u = t.steps !== void 0 ? t.steps : 1, h = t.depth !== void 0 ? t.depth : 100, f = t.bevelEnabled !== void 0 ? t.bevelEnabled : !0, d = t.bevelThickness !== void 0 ? t.bevelThickness : 6, g = t.bevelSize !== void 0 ? t.bevelSize : d - 2, m = t.bevelOffset !== void 0 ? t.bevelOffset : 0, x = t.bevelSegments !== void 0 ? t.bevelSegments : 3, p = t.extrudePath, _ = t.UVGenerator !== void 0 ? t.UVGenerator : Ny; t.amount !== void 0 && (console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."), h = t.amount); let w, v = !1, b, T, y, C; p && (w = p.getSpacedPoints(u), v = !0, f = !1, b = p.computeFrenetFrames(u, !1), T = new A, y = new A, C = new A), f || (x = 0, d = 0, g = 0, m = 0); let R = a.extractPoints(c), D = R.shape, L = R.holes; if (!hn.isClockWise(D)) { D = D.reverse(); for (let V = 0, J = L.length; V < J; V++) { let K = L[V]; hn.isClockWise(K) && (L[V] = K.reverse()) } } let z = hn.triangulateShape(D, L), F = D; for (let V = 0, J = L.length; V < J; V++) { let K = L[V]; D = D.concat(K) } function U(V, J, K) { return J || console.error("THREE.ExtrudeGeometry: vec does not exist"), J.clone().multiplyScalar(K).add(V) } let N = D.length, k = z.length; function Q(V, J, K) { let pe, ie, E, S = V.x - J.x, G = V.y - J.y, X = K.x - V.x, ne = K.y - V.y, ae = S * S + G * G, be = S * ne - G * X; if (Math.abs(be) > Number.EPSILON) { let ge = Math.sqrt(ae), Te = Math.sqrt(X * X + ne * ne), me = J.x - G / ge, P = J.y + S / ge, re = K.x - ne / Te, q = K.y + X / Te, le = ((re - me) * ne - (q - P) * X) / (S * ne - G * X); pe = me + S * le - V.x, ie = P + G * le - V.y; let fe = pe * pe + ie * ie; if (fe <= 2) return new Y(pe, ie); E = Math.sqrt(fe / 2) } else { let ge = !1; S > Number.EPSILON ? X > Number.EPSILON && (ge = !0) : S < -Number.EPSILON ? X < -Number.EPSILON && (ge = !0) : Math.sign(G) === Math.sign(ne) && (ge = !0), ge ? (pe = -G, ie = S, E = Math.sqrt(ae)) : (pe = S, ie = G, E = Math.sqrt(ae / 2)) } return new Y(pe / E, ie / E) } let oe = []; for (let V = 0, J = F.length, K = J - 1, pe = V + 1; V < J; V++, K++, pe++)K === J && (K = 0), pe === J && (pe = 0), oe[V] = Q(F[V], F[K], F[pe]); let ue = [], ee, we = oe.concat(); for (let V = 0, J = L.length; V < J; V++) { let K = L[V]; ee = []; for (let pe = 0, ie = K.length, E = ie - 1, S = pe + 1; pe < ie; pe++, E++, S++)E === ie && (E = 0), S === ie && (S = 0), ee[pe] = Q(K[pe], K[E], K[S]); ue.push(ee), we = we.concat(ee) } for (let V = 0; V < x; V++) { let J = V / x, K = d * Math.cos(J * Math.PI / 2), pe = g * Math.sin(J * Math.PI / 2) + m; for (let ie = 0, E = F.length; ie < E; ie++) { let S = U(F[ie], oe[ie], pe); _e(S.x, S.y, -K) } for (let ie = 0, E = L.length; ie < E; ie++) { let S = L[ie]; ee = ue[ie]; for (let G = 0, X = S.length; G < X; G++) { let ne = U(S[G], ee[G], pe); _e(ne.x, ne.y, -K) } } } let W = g + m; for (let V = 0; V < N; V++) { let J = f ? U(D[V], we[V], W) : D[V]; v ? (y.copy(b.normals[0]).multiplyScalar(J.x), T.copy(b.binormals[0]).multiplyScalar(J.y), C.copy(w[0]).add(y).add(T), _e(C.x, C.y, C.z)) : _e(J.x, J.y, 0) } for (let V = 1; V <= u; V++)for (let J = 0; J < N; J++) { let K = f ? U(D[J], we[J], W) : D[J]; v ? (y.copy(b.normals[V]).multiplyScalar(K.x), T.copy(b.binormals[V]).multiplyScalar(K.y), C.copy(w[V]).add(y).add(T), _e(C.x, C.y, C.z)) : _e(K.x, K.y, h / u * V) } for (let V = x - 1; V >= 0; V--) { let J = V / x, K = d * Math.cos(J * Math.PI / 2), pe = g * Math.sin(J * Math.PI / 2) + m; for (let ie = 0, E = F.length; ie < E; ie++) { let S = U(F[ie], oe[ie], pe); _e(S.x, S.y, h + K) } for (let ie = 0, E = L.length; ie < E; ie++) { let S = L[ie]; ee = ue[ie]; for (let G = 0, X = S.length; G < X; G++) { let ne = U(S[G], ee[G], pe); v ? _e(ne.x, ne.y + w[u - 1].y, w[u - 1].x + K) : _e(ne.x, ne.y, h + K) } } } j(), de(); function j() { let V = i.length / 3; if (f) { let J = 0, K = N * J; for (let pe = 0; pe < k; pe++) { let ie = z[pe]; Me(ie[2] + K, ie[1] + K, ie[0] + K) } J = u + x * 2, K = N * J; for (let pe = 0; pe < k; pe++) { let ie = z[pe]; Me(ie[0] + K, ie[1] + K, ie[2] + K) } } else { for (let J = 0; J < k; J++) { let K = z[J]; Me(K[2], K[1], K[0]) } for (let J = 0; J < k; J++) { let K = z[J]; Me(K[0] + N * u, K[1] + N * u, K[2] + N * u) } } n.addGroup(V, i.length / 3 - V, 0) } function de() { let V = i.length / 3, J = 0; O(F, J), J += F.length; for (let K = 0, pe = L.length; K < pe; K++) { let ie = L[K]; O(ie, J), J += ie.length } n.addGroup(V, i.length / 3 - V, 1) } function O(V, J) { let K = V.length; for (; --K >= 0;) { let pe = K, ie = K - 1; ie < 0 && (ie = V.length - 1); for (let E = 0, S = u + x * 2; E < S; E++) { let G = N * E, X = N * (E + 1), ne = J + pe + G, ae = J + ie + G, be = J + ie + X, ge = J + pe + X; ce(ne, ae, be, ge) } } } function _e(V, J, K) { l.push(V), l.push(J), l.push(K) } function Me(V, J, K) { he(V), he(J), he(K); let pe = i.length / 3, ie = _.generateTopUV(n, i, pe - 3, pe - 2, pe - 1); Ee(ie[0]), Ee(ie[1]), Ee(ie[2]) } function ce(V, J, K, pe) { he(V), he(J), he(pe), he(J), he(K), he(pe); let ie = i.length / 3, E = _.generateSideWallUV(n, i, ie - 6, ie - 3, ie - 2, ie - 1); Ee(E[0]), Ee(E[1]), Ee(E[3]), Ee(E[1]), Ee(E[2]), Ee(E[3]) } function he(V) { i.push(l[V * 3 + 0]), i.push(l[V * 3 + 1]), i.push(l[V * 3 + 2]) } function Ee(V) { r.push(V.x), r.push(V.y) } } } toJSON() { let e = super.toJSON(), t = this.parameters.shapes, n = this.parameters.options; return zy(t, n, e) } static fromJSON(e, t) { let n = []; for (let r = 0, o = e.shapes.length; r < o; r++) { let a = t[e.shapes[r]]; n.push(a) } let i = e.options.extrudePath; return i !== void 0 && (e.options.extrudePath = new Nh[i.type]().fromJSON(i)), new Mi(n, e.options) } }, Ny = { generateTopUV: function (s, e, t, n, i) { let r = e[t * 3], o = e[t * 3 + 1], a = e[n * 3], l = e[n * 3 + 1], c = e[i * 3], u = e[i * 3 + 1]; return [new Y(r, o), new Y(a, l), new Y(c, u)] }, generateSideWallUV: function (s, e, t, n, i, r) { let o = e[t * 3], a = e[t * 3 + 1], l = e[t * 3 + 2], c = e[n * 3], u = e[n * 3 + 1], h = e[n * 3 + 2], f = e[i * 3], d = e[i * 3 + 1], g = e[i * 3 + 2], m = e[r * 3], x = e[r * 3 + 1], p = e[r * 3 + 2]; return Math.abs(a - u) < Math.abs(o - c) ? [new Y(o, 1 - l), new Y(c, 1 - h), new Y(f, 1 - g), new Y(m, 1 - p)] : [new Y(a, 1 - l), new Y(u, 1 - h), new Y(d, 1 - g), new Y(x, 1 - p)] } }; function zy(s, e, t) { if (t.shapes = [], Array.isArray(s)) for (let n = 0, i = s.length; n < i; n++) { let r = s[n]; t.shapes.push(r.uuid) } else t.shapes.push(s.uuid); return e.extrudePath !== void 0 && (t.options.extrudePath = e.extrudePath.toJSON()), t } var Po = class extends We { constructor(e, t = 12) { super(); this.type = "ShapeGeometry", this.parameters = { shapes: e, curveSegments: t }; let n = [], i = [], r = [], o = [], a = 0, l = 0; if (Array.isArray(e) === !1) c(e); else for (let u = 0; u < e.length; u++)c(e[u]), this.addGroup(a, l, u), a += l, l = 0; this.setIndex(n), this.setAttribute("position", new et(i, 3)), this.setAttribute("normal", new et(r, 3)), this.setAttribute("uv", new et(o, 2)); function c(u) { let h = i.length / 3, f = u.extractPoints(t), d = f.shape, g = f.holes; hn.isClockWise(d) === !1 && (d = d.reverse()); for (let x = 0, p = g.length; x < p; x++) { let _ = g[x]; hn.isClockWise(_) === !0 && (g[x] = _.reverse()) } let m = hn.triangulateShape(d, g); for (let x = 0, p = g.length; x < p; x++) { let _ = g[x]; d = d.concat(_) } for (let x = 0, p = d.length; x < p; x++) { let _ = d[x]; i.push(_.x, _.y, 0), r.push(0, 0, 1), o.push(_.x, _.y) } for (let x = 0, p = m.length; x < p; x++) { let _ = m[x], w = _[0] + h, v = _[1] + h, b = _[2] + h; n.push(w, v, b), l += 3 } } } toJSON() { let e = super.toJSON(), t = this.parameters.shapes; return Oy(t, e) } static fromJSON(e, t) { let n = []; for (let i = 0, r = e.shapes.length; i < r; i++) { let o = t[e.shapes[i]]; n.push(o) } return new Po(n, e.curveSegments) } }; function Oy(s, e) { if (e.shapes = [], Array.isArray(s)) for (let t = 0, n = s.length; t < n; t++) { let i = s[t]; e.shapes.push(i.uuid) } else e.shapes.push(s.uuid); return e } var Vh = class extends ht { constructor(e) { super(); this.type = "ShadowMaterial", this.color = new se(0), this.transparent = !0, this.setValues(e) } copy(e) { return super.copy(e), this.color.copy(e.color), this } }; Vh.prototype.isShadowMaterial = !0; var wl = class extends ht { constructor(e) { super(); this.defines = { STANDARD: "" }, this.type = "MeshStandardMaterial", this.color = new se(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new se(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Vi, this.normalScale = new Y(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapIntensity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.setValues(e) } copy(e) { return super.copy(e), this.defines = { STANDARD: "" }, this.color.copy(e.color), this.roughness = e.roughness, this.metalness = e.metalness, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.roughnessMap = e.roughnessMap, this.metalnessMap = e.metalnessMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapIntensity = e.envMapIntensity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this } }; wl.prototype.isMeshStandardMaterial = !0; var Wh = class extends wl { constructor(e) { super(); this.defines = { STANDARD: "", PHYSICAL: "" }, this.type = "MeshPhysicalMaterial", this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new Y(1, 1), this.clearcoatNormalMap = null, this.ior = 1.5, Object.defineProperty(this, "reflectivity", { get: function () { return Tt(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1) }, set: function (t) { this.ior = (1 + .4 * t) / (1 - .4 * t) } }), this.sheenTint = new se(0), this.transmission = 0, this.transmissionMap = null, this.thickness = .01, this.thicknessMap = null, this.attenuationDistance = 0, this.attenuationTint = new se(1, 1, 1), this.specularIntensity = 1, this.specularIntensityMap = null, this.specularTint = new se(1, 1, 1), this.specularTintMap = null, this._clearcoat = 0, this._transmission = 0, this.setValues(e) } get clearcoat() { return this._clearcoat } set clearcoat(e) { this._clearcoat > 0 != e > 0 && this.version++, this._clearcoat = e } get transmission() { return this._transmission } set transmission(e) { this._transmission > 0 != e > 0 && this.version++, this._transmission = e } copy(e) { return super.copy(e), this.defines = { STANDARD: "", PHYSICAL: "" }, this.clearcoat = e.clearcoat, this.clearcoatMap = e.clearcoatMap, this.clearcoatRoughness = e.clearcoatRoughness, this.clearcoatRoughnessMap = e.clearcoatRoughnessMap, this.clearcoatNormalMap = e.clearcoatNormalMap, this.clearcoatNormalScale.copy(e.clearcoatNormalScale), this.ior = e.ior, this.sheenTint.copy(e.sheenTint), this.transmission = e.transmission, this.transmissionMap = e.transmissionMap, this.thickness = e.thickness, this.thicknessMap = e.thicknessMap, this.attenuationDistance = e.attenuationDistance, this.attenuationTint.copy(e.attenuationTint), this.specularIntensity = e.specularIntensity, this.specularIntensityMap = e.specularIntensityMap, this.specularTint.copy(e.specularTint), this.specularTintMap = e.specularTintMap, this } }; Wh.prototype.isMeshPhysicalMaterial = !0; var qh = class extends ht { constructor(e) { super(); this.type = "MeshPhongMaterial", this.color = new se(16777215), this.specular = new se(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new se(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Vi, this.normalScale = new Y(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = Cs, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.setValues(e) } copy(e) { return super.copy(e), this.color.copy(e.color), this.specular.copy(e.specular), this.shininess = e.shininess, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this } }; qh.prototype.isMeshPhongMaterial = !0; var Xh = class extends ht { constructor(e) { super(); this.defines = { TOON: "" }, this.type = "MeshToonMaterial", this.color = new se(16777215), this.map = null, this.gradientMap = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new se(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Vi, this.normalScale = new Y(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.setValues(e) } copy(e) { return super.copy(e), this.color.copy(e.color), this.map = e.map, this.gradientMap = e.gradientMap, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this } }; Xh.prototype.isMeshToonMaterial = !0; var Yh = class extends ht { constructor(e) { super(); this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Vi, this.normalScale = new Y(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.flatShading = !1, this.setValues(e) } copy(e) { return super.copy(e), this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.flatShading = e.flatShading, this } }; Yh.prototype.isMeshNormalMaterial = !0; var Zh = class extends ht { constructor(e) { super(); this.type = "MeshLambertMaterial", this.color = new se(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new se(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = Cs, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.setValues(e) } copy(e) { return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this } }; Zh.prototype.isMeshLambertMaterial = !0; var Jh = class extends ht { constructor(e) { super(); this.defines = { MATCAP: "" }, this.type = "MeshMatcapMaterial", this.color = new se(16777215), this.matcap = null, this.map = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Vi, this.normalScale = new Y(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.flatShading = !1, this.setValues(e) } copy(e) { return super.copy(e), this.defines = { MATCAP: "" }, this.color.copy(e.color), this.matcap = e.matcap, this.map = e.map, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.flatShading = e.flatShading, this } }; Jh.prototype.isMeshMatcapMaterial = !0; var jh = class extends gr { constructor(e) { super(); this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(e) } copy(e) { return super.copy(e), this.scale = e.scale, this.dashSize = e.dashSize, this.gapSize = e.gapSize, this } }; jh.prototype.isLineDashedMaterial = !0; var qe = { arraySlice: function (s, e, t) { return qe.isTypedArray(s) ? new s.constructor(s.subarray(e, t !== void 0 ? t : s.length)) : s.slice(e, t) }, convertArray: function (s, e, t) { return !s || !t && s.constructor === e ? s : typeof e.BYTES_PER_ELEMENT == "number" ? new e(s) : Array.prototype.slice.call(s) }, isTypedArray: function (s) { return ArrayBuffer.isView(s) && !(s instanceof DataView) }, getKeyframeOrder: function (s) { function e(i, r) { return s[i] - s[r] } let t = s.length, n = new Array(t); for (let i = 0; i !== t; ++i)n[i] = i; return n.sort(e), n }, sortedArray: function (s, e, t) { let n = s.length, i = new s.constructor(n); for (let r = 0, o = 0; o !== n; ++r) { let a = t[r] * e; for (let l = 0; l !== e; ++l)i[o++] = s[a + l] } return i }, flattenJSON: function (s, e, t, n) { let i = 1, r = s[0]; for (; r !== void 0 && r[n] === void 0;)r = s[i++]; if (r === void 0) return; let o = r[n]; if (o !== void 0) if (Array.isArray(o)) do o = r[n], o !== void 0 && (e.push(r.time), t.push.apply(t, o)), r = s[i++]; while (r !== void 0); else if (o.toArray !== void 0) do o = r[n], o !== void 0 && (e.push(r.time), o.toArray(t, t.length)), r = s[i++]; while (r !== void 0); else do o = r[n], o !== void 0 && (e.push(r.time), t.push(o)), r = s[i++]; while (r !== void 0) }, subclip: function (s, e, t, n, i = 30) { let r = s.clone(); r.name = e; let o = []; for (let l = 0; l < r.tracks.length; ++l) { let c = r.tracks[l], u = c.getValueSize(), h = [], f = []; for (let d = 0; d < c.times.length; ++d) { let g = c.times[d] * i; if (!(g < t || g >= n)) { h.push(c.times[d]); for (let m = 0; m < u; ++m)f.push(c.values[d * u + m]) } } h.length !== 0 && (c.times = qe.convertArray(h, c.times.constructor), c.values = qe.convertArray(f, c.values.constructor), o.push(c)) } r.tracks = o; let a = 1 / 0; for (let l = 0; l < r.tracks.length; ++l)a > r.tracks[l].times[0] && (a = r.tracks[l].times[0]); for (let l = 0; l < r.tracks.length; ++l)r.tracks[l].shift(-1 * a); return r.resetDuration(), r }, makeClipAdditive: function (s, e = 0, t = s, n = 30) { n <= 0 && (n = 30); let i = t.tracks.length, r = e / n; for (let o = 0; o < i; ++o) { let a = t.tracks[o], l = a.ValueTypeName; if (l === "bool" || l === "string") continue; let c = s.tracks.find(function (p) { return p.name === a.name && p.ValueTypeName === l }); if (c === void 0) continue; let u = 0, h = a.getValueSize(); a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (u = h / 3); let f = 0, d = c.getValueSize(); c.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (f = d / 3); let g = a.times.length - 1, m; if (r <= a.times[0]) { let p = u, _ = h - u; m = qe.arraySlice(a.values, p, _) } else if (r >= a.times[g]) { let p = g * h + u, _ = p + h - u; m = qe.arraySlice(a.values, p, _) } else { let p = a.createInterpolant(), _ = u, w = h - u; p.evaluate(r), m = qe.arraySlice(p.resultBuffer, _, w) } l === "quaternion" && new vt().fromArray(m).normalize().conjugate().toArray(m); let x = c.times.length; for (let p = 0; p < x; ++p) { let _ = p * d + f; if (l === "quaternion") vt.multiplyQuaternionsFlat(c.values, _, m, 0, c.values, _); else { let w = d - f * 2; for (let v = 0; v < w; ++v)c.values[_ + v] -= m[v] } } } return s.blendMode = ou, s } }, Tn = class { constructor(e, t, n, i) { this.parameterPositions = e, this._cachedIndex = 0, this.resultBuffer = i !== void 0 ? i : new t.constructor(n), this.sampleValues = t, this.valueSize = n, this.settings = null, this.DefaultSettings_ = {} } evaluate(e) { let t = this.parameterPositions, n = this._cachedIndex, i = t[n], r = t[n - 1]; e: { t: { let o; n: { i: if (!(e < i)) { for (let a = n + 2; ;) { if (i === void 0) { if (e < r) break i; return n = t.length, this._cachedIndex = n, this.afterEnd_(n - 1, e, r) } if (n === a) break; if (r = i, i = t[++n], e < i) break t } o = t.length; break n } if (!(e >= r)) { let a = t[1]; e < a && (n = 2, r = a); for (let l = n - 2; ;) { if (r === void 0) return this._cachedIndex = 0, this.beforeStart_(0, e, i); if (n === l) break; if (i = r, r = t[--n - 1], e >= r) break t } o = n, n = 0; break n } break e } for (; n < o;) { let a = n + o >>> 1; e < t[a] ? o = a : n = a + 1 } if (i = t[n], r = t[n - 1], r === void 0) return this._cachedIndex = 0, this.beforeStart_(0, e, i); if (i === void 0) return n = t.length, this._cachedIndex = n, this.afterEnd_(n - 1, r, e) } this._cachedIndex = n, this.intervalChanged_(n, r, i) } return this.interpolate_(n, r, e, i) } getSettings_() { return this.settings || this.DefaultSettings_ } copySampleValue_(e) { let t = this.resultBuffer, n = this.sampleValues, i = this.valueSize, r = e * i; for (let o = 0; o !== i; ++o)t[o] = n[r + o]; return t } interpolate_() { throw new Error("call to abstract method") } intervalChanged_() { } }; Tn.prototype.beforeStart_ = Tn.prototype.copySampleValue_; Tn.prototype.afterEnd_ = Tn.prototype.copySampleValue_; var $h = class extends Tn { constructor(e, t, n, i) { super(e, t, n, i); this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0, this.DefaultSettings_ = { endingStart: ki, endingEnd: ki } } intervalChanged_(e, t, n) { let i = this.parameterPositions, r = e - 2, o = e + 1, a = i[r], l = i[o]; if (a === void 0) switch (this.getSettings_().endingStart) { case Hi: r = e, a = 2 * t - n; break; case Os: r = i.length - 2, a = t + i[r] - i[r + 1]; break; default: r = e, a = n }if (l === void 0) switch (this.getSettings_().endingEnd) { case Hi: o = e, l = 2 * n - t; break; case Os: o = 1, l = n + i[1] - i[0]; break; default: o = e - 1, l = t }let c = (n - t) * .5, u = this.valueSize; this._weightPrev = c / (t - a), this._weightNext = c / (l - n), this._offsetPrev = r * u, this._offsetNext = o * u } interpolate_(e, t, n, i) { let r = this.resultBuffer, o = this.sampleValues, a = this.valueSize, l = e * a, c = l - a, u = this._offsetPrev, h = this._offsetNext, f = this._weightPrev, d = this._weightNext, g = (n - t) / (i - t), m = g * g, x = m * g, p = -f * x + 2 * f * m - f * g, _ = (1 + f) * x + (-1.5 - 2 * f) * m + (-.5 + f) * g + 1, w = (-1 - d) * x + (1.5 + d) * m + .5 * g, v = d * x - d * m; for (let b = 0; b !== a; ++b)r[b] = p * o[u + b] + _ * o[c + b] + w * o[l + b] + v * o[h + b]; return r } }, bl = class extends Tn { constructor(e, t, n, i) { super(e, t, n, i) } interpolate_(e, t, n, i) { let r = this.resultBuffer, o = this.sampleValues, a = this.valueSize, l = e * a, c = l - a, u = (n - t) / (i - t), h = 1 - u; for (let f = 0; f !== a; ++f)r[f] = o[c + f] * h + o[l + f] * u; return r } }, Qh = class extends Tn { constructor(e, t, n, i) { super(e, t, n, i) } interpolate_(e) { return this.copySampleValue_(e - 1) } }, tn = class { constructor(e, t, n, i) { if (e === void 0) throw new Error("THREE.KeyframeTrack: track name is undefined"); if (t === void 0 || t.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + e); this.name = e, this.times = qe.convertArray(t, this.TimeBufferType), this.values = qe.convertArray(n, this.ValueBufferType), this.setInterpolation(i || this.DefaultInterpolation) } static toJSON(e) { let t = e.constructor, n; if (t.toJSON !== this.toJSON) n = t.toJSON(e); else { n = { name: e.name, times: qe.convertArray(e.times, Array), values: qe.convertArray(e.values, Array) }; let i = e.getInterpolation(); i !== e.DefaultInterpolation && (n.interpolation = i) } return n.type = e.ValueTypeName, n } InterpolantFactoryMethodDiscrete(e) { return new Qh(this.times, this.values, this.getValueSize(), e) } InterpolantFactoryMethodLinear(e) { return new bl(this.times, this.values, this.getValueSize(), e) } InterpolantFactoryMethodSmooth(e) { return new $h(this.times, this.values, this.getValueSize(), e) } setInterpolation(e) { let t; switch (e) { case Ns: t = this.InterpolantFactoryMethodDiscrete; break; case zs: t = this.InterpolantFactoryMethodLinear; break; case fa: t = this.InterpolantFactoryMethodSmooth; break }if (t === void 0) { let n = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name; if (this.createInterpolant === void 0) if (e !== this.DefaultInterpolation) this.setInterpolation(this.DefaultInterpolation); else throw new Error(n); return console.warn("THREE.KeyframeTrack:", n), this } return this.createInterpolant = t, this } getInterpolation() { switch (this.createInterpolant) { case this.InterpolantFactoryMethodDiscrete: return Ns; case this.InterpolantFactoryMethodLinear: return zs; case this.InterpolantFactoryMethodSmooth: return fa } } getValueSize() { return this.values.length / this.times.length } shift(e) { if (e !== 0) { let t = this.times; for (let n = 0, i = t.length; n !== i; ++n)t[n] += e } return this } scale(e) { if (e !== 1) { let t = this.times; for (let n = 0, i = t.length; n !== i; ++n)t[n] *= e } return this } trim(e, t) { let n = this.times, i = n.length, r = 0, o = i - 1; for (; r !== i && n[r] < e;)++r; for (; o !== -1 && n[o] > t;)--o; if (++o, r !== 0 || o !== i) { r >= o && (o = Math.max(o, 1), r = o - 1); let a = this.getValueSize(); this.times = qe.arraySlice(n, r, o), this.values = qe.arraySlice(this.values, r * a, o * a) } return this } validate() { let e = !0, t = this.getValueSize(); t - Math.floor(t) != 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), e = !1); let n = this.times, i = this.values, r = n.length; r === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), e = !1); let o = null; for (let a = 0; a !== r; a++) { let l = n[a]; if (typeof l == "number" && isNaN(l)) { console.error("THREE.KeyframeTrack: Time is not a valid number.", this, a, l), e = !1; break } if (o !== null && o > l) { console.error("THREE.KeyframeTrack: Out of order keys.", this, a, l, o), e = !1; break } o = l } if (i !== void 0 && qe.isTypedArray(i)) for (let a = 0, l = i.length; a !== l; ++a) { let c = i[a]; if (isNaN(c)) { console.error("THREE.KeyframeTrack: Value is not a valid number.", this, a, c), e = !1; break } } return e } optimize() { let e = qe.arraySlice(this.times), t = qe.arraySlice(this.values), n = this.getValueSize(), i = this.getInterpolation() === fa, r = e.length - 1, o = 1; for (let a = 1; a < r; ++a) { let l = !1, c = e[a], u = e[a + 1]; if (c !== u && (a !== 1 || c !== e[0])) if (i) l = !0; else { let h = a * n, f = h - n, d = h + n; for (let g = 0; g !== n; ++g) { let m = t[h + g]; if (m !== t[f + g] || m !== t[d + g]) { l = !0; break } } } if (l) { if (a !== o) { e[o] = e[a]; let h = a * n, f = o * n; for (let d = 0; d !== n; ++d)t[f + d] = t[h + d] } ++o } } if (r > 0) { e[o] = e[r]; for (let a = r * n, l = o * n, c = 0; c !== n; ++c)t[l + c] = t[a + c]; ++o } return o !== e.length ? (this.times = qe.arraySlice(e, 0, o), this.values = qe.arraySlice(t, 0, o * n)) : (this.times = e, this.values = t), this } clone() { let e = qe.arraySlice(this.times, 0), t = qe.arraySlice(this.values, 0), n = this.constructor, i = new n(this.name, e, t); return i.createInterpolant = this.createInterpolant, i } }; tn.prototype.TimeBufferType = Float32Array; tn.prototype.ValueBufferType = Float32Array; tn.prototype.DefaultInterpolation = zs; var Si = class extends tn { }; Si.prototype.ValueTypeName = "bool"; Si.prototype.ValueBufferType = Array; Si.prototype.DefaultInterpolation = Ns; Si.prototype.InterpolantFactoryMethodLinear = void 0; Si.prototype.InterpolantFactoryMethodSmooth = void 0; var Ml = class extends tn { }; Ml.prototype.ValueTypeName = "color"; var cs = class extends tn { }; cs.prototype.ValueTypeName = "number"; var Kh = class extends Tn { constructor(e, t, n, i) { super(e, t, n, i) } interpolate_(e, t, n, i) { let r = this.resultBuffer, o = this.sampleValues, a = this.valueSize, l = (n - t) / (i - t), c = e * a; for (let u = c + a; c !== u; c += 4)vt.slerpFlat(r, 0, o, c - a, o, c, l); return r } }, xr = class extends tn { InterpolantFactoryMethodLinear(e) { return new Kh(this.times, this.values, this.getValueSize(), e) } }; xr.prototype.ValueTypeName = "quaternion"; xr.prototype.DefaultInterpolation = zs; xr.prototype.InterpolantFactoryMethodSmooth = void 0; var Ti = class extends tn { }; Ti.prototype.ValueTypeName = "string"; Ti.prototype.ValueBufferType = Array; Ti.prototype.DefaultInterpolation = Ns; Ti.prototype.InterpolantFactoryMethodLinear = void 0; Ti.prototype.InterpolantFactoryMethodSmooth = void 0; var us = class extends tn { }; us.prototype.ValueTypeName = "vector"; var Sl = class { constructor(e, t = -1, n, i = da) { this.name = e, this.tracks = n, this.duration = t, this.blendMode = i, this.uuid = jt(), this.duration < 0 && this.resetDuration() } static parse(e) { let t = [], n = e.tracks, i = 1 / (e.fps || 1); for (let o = 0, a = n.length; o !== a; ++o)t.push(ky(n[o]).scale(i)); let r = new this(e.name, e.duration, t, e.blendMode); return r.uuid = e.uuid, r } static toJSON(e) { let t = [], n = e.tracks, i = { name: e.name, duration: e.duration, tracks: t, uuid: e.uuid, blendMode: e.blendMode }; for (let r = 0, o = n.length; r !== o; ++r)t.push(tn.toJSON(n[r])); return i } static CreateFromMorphTargetSequence(e, t, n, i) { let r = t.length, o = []; for (let a = 0; a < r; a++) { let l = [], c = []; l.push((a + r - 1) % r, a, (a + 1) % r), c.push(0, 1, 0); let u = qe.getKeyframeOrder(l); l = qe.sortedArray(l, 1, u), c = qe.sortedArray(c, 1, u), !i && l[0] === 0 && (l.push(r), c.push(c[0])), o.push(new cs(".morphTargetInfluences[" + t[a].name + "]", l, c).scale(1 / n)) } return new this(e, -1, o) } static findByName(e, t) { let n = e; if (!Array.isArray(e)) { let i = e; n = i.geometry && i.geometry.animations || i.animations } for (let i = 0; i < n.length; i++)if (n[i].name === t) return n[i]; return null } static CreateClipsFromMorphTargetSequences(e, t, n) { let i = {}, r = /^([\w-]*?)([\d]+)$/; for (let a = 0, l = e.length; a < l; a++) { let c = e[a], u = c.name.match(r); if (u && u.length > 1) { let h = u[1], f = i[h]; f || (i[h] = f = []), f.push(c) } } let o = []; for (let a in i) o.push(this.CreateFromMorphTargetSequence(a, i[a], t, n)); return o } static parseAnimation(e, t) { if (!e) return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null; let n = function (h, f, d, g, m) { if (d.length !== 0) { let x = [], p = []; qe.flattenJSON(d, x, p, g), x.length !== 0 && m.push(new h(f, x, p)) } }, i = [], r = e.name || "default", o = e.fps || 30, a = e.blendMode, l = e.length || -1, c = e.hierarchy || []; for (let h = 0; h < c.length; h++) { let f = c[h].keys; if (!(!f || f.length === 0)) if (f[0].morphTargets) { let d = {}, g; for (g = 0; g < f.length; g++)if (f[g].morphTargets) for (let m = 0; m < f[g].morphTargets.length; m++)d[f[g].morphTargets[m]] = -1; for (let m in d) { let x = [], p = []; for (let _ = 0; _ !== f[g].morphTargets.length; ++_) { let w = f[g]; x.push(w.time), p.push(w.morphTarget === m ? 1 : 0) } i.push(new cs(".morphTargetInfluence[" + m + "]", x, p)) } l = d.length * (o || 1) } else { let d = ".bones[" + t[h].name + "]"; n(us, d + ".position", f, "pos", i), n(xr, d + ".quaternion", f, "rot", i), n(us, d + ".scale", f, "scl", i) } } return i.length === 0 ? null : new this(r, l, i, a) } resetDuration() { let e = this.tracks, t = 0; for (let n = 0, i = e.length; n !== i; ++n) { let r = this.tracks[n]; t = Math.max(t, r.times[r.times.length - 1]) } return this.duration = t, this } trim() { for (let e = 0; e < this.tracks.length; e++)this.tracks[e].trim(0, this.duration); return this } validate() { let e = !0; for (let t = 0; t < this.tracks.length; t++)e = e && this.tracks[t].validate(); return e } optimize() { for (let e = 0; e < this.tracks.length; e++)this.tracks[e].optimize(); return this } clone() { let e = []; for (let t = 0; t < this.tracks.length; t++)e.push(this.tracks[t].clone()); return new this.constructor(this.name, this.duration, e, this.blendMode) } toJSON() { return this.constructor.toJSON(this) } }; function Uy(s) { switch (s.toLowerCase()) { case "scalar": case "double": case "float": case "number": case "integer": return cs; case "vector": case "vector2": case "vector3": case "vector4": return us; case "color": return Ml; case "quaternion": return xr; case "bool": case "boolean": return Si; case "string": return Ti }throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + s) } function ky(s) { if (s.type === void 0) throw new Error("THREE.KeyframeTrack: track type undefined, can not parse"); let e = Uy(s.type); if (s.times === void 0) { let t = [], n = []; qe.flattenJSON(s.keys, t, n, "value"), s.times = t, s.values = n } return e.parse !== void 0 ? e.parse(s) : new e(s.name, s.times, s.values, s.interpolation) } var yr = { enabled: !1, files: {}, add: function (s, e) { this.enabled !== !1 && (this.files[s] = e) }, get: function (s) { if (this.enabled !== !1) return this.files[s] }, remove: function (s) { delete this.files[s] }, clear: function () { this.files = {} } }, ef = class { constructor(e, t, n) { let i = this, r = !1, o = 0, a = 0, l, c = []; this.onStart = void 0, this.onLoad = e, this.onProgress = t, this.onError = n, this.itemStart = function (u) { a++, r === !1 && i.onStart !== void 0 && i.onStart(u, o, a), r = !0 }, this.itemEnd = function (u) { o++, i.onProgress !== void 0 && i.onProgress(u, o, a), o === a && (r = !1, i.onLoad !== void 0 && i.onLoad()) }, this.itemError = function (u) { i.onError !== void 0 && i.onError(u) }, this.resolveURL = function (u) { return l ? l(u) : u }, this.setURLModifier = function (u) { return l = u, this }, this.addHandler = function (u, h) { return c.push(u, h), this }, this.removeHandler = function (u) { let h = c.indexOf(u); return h !== -1 && c.splice(h, 2), this }, this.getHandler = function (u) { for (let h = 0, f = c.length; h < f; h += 2) { let d = c[h], g = c[h + 1]; if (d.global && (d.lastIndex = 0), d.test(u)) return g } return null } } }, Hy = new ef, En = class { constructor(e) { this.manager = e !== void 0 ? e : Hy, this.crossOrigin = "anonymous", this.withCredentials = !1, this.path = "", this.resourcePath = "", this.requestHeader = {} } load() { } loadAsync(e, t) { let n = this; return new Promise(function (i, r) { n.load(e, i, t, r) }) } parse() { } setCrossOrigin(e) { return this.crossOrigin = e, this } setWithCredentials(e) { return this.withCredentials = e, this } setPath(e) { return this.path = e, this } setResourcePath(e) { return this.resourcePath = e, this } setRequestHeader(e) { return this.requestHeader = e, this } }, nn = {}, tf = class extends En { constructor(e) { super(e) } load(e, t, n, i) { e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e); let r = this, o = yr.get(e); if (o !== void 0) return r.manager.itemStart(e), setTimeout(function () { t && t(o), r.manager.itemEnd(e) }, 0), o; if (nn[e] !== void 0) { nn[e].push({ onLoad: t, onProgress: n, onError: i }); return } let a = /^data:(.*?)(;base64)?,(.*)$/, l = e.match(a), c; if (l) { let u = l[1], h = !!l[2], f = l[3]; f = decodeURIComponent(f), h && (f = atob(f)); try { let d, g = (this.responseType || "").toLowerCase(); switch (g) { case "arraybuffer": case "blob": let m = new Uint8Array(f.length); for (let p = 0; p < f.length; p++)m[p] = f.charCodeAt(p); g === "blob" ? d = new Blob([m.buffer], { type: u }) : d = m.buffer; break; case "document": d = new DOMParser().parseFromString(f, u); break; case "json": d = JSON.parse(f); break; default: d = f; break }setTimeout(function () { t && t(d), r.manager.itemEnd(e) }, 0) } catch (d) { setTimeout(function () { i && i(d), r.manager.itemError(e), r.manager.itemEnd(e) }, 0) } } else { nn[e] = [], nn[e].push({ onLoad: t, onProgress: n, onError: i }), c = new XMLHttpRequest, c.open("GET", e, !0), c.addEventListener("load", function (u) { let h = this.response, f = nn[e]; if (delete nn[e], this.status === 200 || this.status === 0) { this.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."), yr.add(e, h); for (let d = 0, g = f.length; d < g; d++) { let m = f[d]; m.onLoad && m.onLoad(h) } r.manager.itemEnd(e) } else { for (let d = 0, g = f.length; d < g; d++) { let m = f[d]; m.onError && m.onError(u) } r.manager.itemError(e), r.manager.itemEnd(e) } }, !1), c.addEventListener("progress", function (u) { let h = nn[e]; for (let f = 0, d = h.length; f < d; f++) { let g = h[f]; g.onProgress && g.onProgress(u) } }, !1), c.addEventListener("error", function (u) { let h = nn[e]; delete nn[e]; for (let f = 0, d = h.length; f < d; f++) { let g = h[f]; g.onError && g.onError(u) } r.manager.itemError(e), r.manager.itemEnd(e) }, !1), c.addEventListener("abort", function (u) { let h = nn[e]; delete nn[e]; for (let f = 0, d = h.length; f < d; f++) { let g = h[f]; g.onError && g.onError(u) } r.manager.itemError(e), r.manager.itemEnd(e) }, !1), this.responseType !== void 0 && (c.responseType = this.responseType), this.withCredentials !== void 0 && (c.withCredentials = this.withCredentials), c.overrideMimeType && c.overrideMimeType(this.mimeType !== void 0 ? this.mimeType : "text/plain"); for (let u in this.requestHeader) c.setRequestHeader(u, this.requestHeader[u]); c.send(null) } return r.manager.itemStart(e), c } setResponseType(e) { return this.responseType = e, this } setMimeType(e) { return this.mimeType = e, this } }; var Tl = class extends En { constructor(e) { super(e) } load(e, t, n, i) { this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e); let r = this, o = yr.get(e); if (o !== void 0) return r.manager.itemStart(e), setTimeout(function () { t && t(o), r.manager.itemEnd(e) }, 0), o; let a = document.createElementNS("http://www.w3.org/1999/xhtml", "img"); function l() { a.removeEventListener("load", l, !1), a.removeEventListener("error", c, !1), yr.add(e, this), t && t(this), r.manager.itemEnd(e) } function c(u) { a.removeEventListener("load", l, !1), a.removeEventListener("error", c, !1), i && i(u), r.manager.itemError(e), r.manager.itemEnd(e) } return a.addEventListener("load", l, !1), a.addEventListener("error", c, !1), e.substr(0, 5) !== "data:" && this.crossOrigin !== void 0 && (a.crossOrigin = this.crossOrigin), r.manager.itemStart(e), a.src = e, a } }, nf = class extends En { constructor(e) { super(e) } load(e, t, n, i) { let r = new Xr, o = new Tl(this.manager); o.setCrossOrigin(this.crossOrigin), o.setPath(this.path); let a = 0; function l(c) { o.load(e[c], function (u) { r.images[c] = u, a++, a === 6 && (r.needsUpdate = !0, t && t(r)) }, void 0, i) } for (let c = 0; c < e.length; ++c)l(c); return r } }; var Ro = class extends En { constructor(e) { super(e) } load(e, t, n, i) { let r = new ot, o = new Tl(this.manager); return o.setCrossOrigin(this.crossOrigin), o.setPath(this.path), o.load(e, function (a) { r.image = a; let l = e.search(/\.jpe?g($|\?)/i) > 0 || e.search(/^data\:image\/jpeg/) === 0; r.format = l ? Un : It, r.needsUpdate = !0, t !== void 0 && t(r) }, n, i), r } }, rf = class extends Bt { constructor() { super(); this.type = "CurvePath", this.curves = [], this.autoClose = !1 } add(e) { this.curves.push(e) } closePath() { let e = this.curves[0].getPoint(0), t = this.curves[this.curves.length - 1].getPoint(1); e.equals(t) || this.curves.push(new ss(t, e)) } getPoint(e) { let t = e * this.getLength(), n = this.getCurveLengths(), i = 0; for (; i < n.length;) { if (n[i] >= t) { let r = n[i] - t, o = this.curves[i], a = o.getLength(), l = a === 0 ? 0 : 1 - r / a; return o.getPointAt(l) } i++ } return null } getLength() { let e = this.getCurveLengths(); return e[e.length - 1] } updateArcLengths() { this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths() } getCurveLengths() { if (this.cacheLengths && this.cacheLengths.length === this.curves.length) return this.cacheLengths; let e = [], t = 0; for (let n = 0, i = this.curves.length; n < i; n++)t += this.curves[n].getLength(), e.push(t); return this.cacheLengths = e, e } getSpacedPoints(e = 40) { let t = []; for (let n = 0; n <= e; n++)t.push(this.getPoint(n / e)); return this.autoClose && t.push(t[0]), t } getPoints(e = 12) { let t = [], n; for (let i = 0, r = this.curves; i < r.length; i++) { let o = r[i], a = o && o.isEllipseCurve ? e * 2 : o && (o.isLineCurve || o.isLineCurve3) ? 1 : o && o.isSplineCurve ? e * o.points.length : e, l = o.getPoints(a); for (let c = 0; c < l.length; c++) { let u = l[c]; n && n.equals(u) || (t.push(u), n = u) } } return this.autoClose && t.length > 1 && !t[t.length - 1].equals(t[0]) && t.push(t[0]), t } copy(e) { super.copy(e), this.curves = []; for (let t = 0, n = e.curves.length; t < n; t++) { let i = e.curves[t]; this.curves.push(i.clone()) } return this.autoClose = e.autoClose, this } toJSON() { let e = super.toJSON(); e.autoClose = this.autoClose, e.curves = []; for (let t = 0, n = this.curves.length; t < n; t++) { let i = this.curves[t]; e.curves.push(i.toJSON()) } return e } fromJSON(e) { super.fromJSON(e), this.autoClose = e.autoClose, this.curves = []; for (let t = 0, n = e.curves.length; t < n; t++) { let i = e.curves[t]; this.curves.push(new Nh[i.type]().fromJSON(i)) } return this } }, hs = class extends rf { constructor(e) { super(); this.type = "Path", this.currentPoint = new Y, e && this.setFromPoints(e) } setFromPoints(e) { this.moveTo(e[0].x, e[0].y); for (let t = 1, n = e.length; t < n; t++)this.lineTo(e[t].x, e[t].y); return this } moveTo(e, t) { return this.currentPoint.set(e, t), this } lineTo(e, t) { let n = new ss(this.currentPoint.clone(), new Y(e, t)); return this.curves.push(n), this.currentPoint.set(e, t), this } quadraticCurveTo(e, t, n, i) { let r = new To(this.currentPoint.clone(), new Y(e, t), new Y(n, i)); return this.curves.push(r), this.currentPoint.set(n, i), this } bezierCurveTo(e, t, n, i, r, o) { let a = new So(this.currentPoint.clone(), new Y(e, t), new Y(n, i), new Y(r, o)); return this.curves.push(a), this.currentPoint.set(r, o), this } splineThru(e) { let t = [this.currentPoint.clone()].concat(e), n = new Eo(t); return this.curves.push(n), this.currentPoint.copy(e[e.length - 1]), this } arc(e, t, n, i, r, o) { let a = this.currentPoint.x, l = this.currentPoint.y; return this.absarc(e + a, t + l, n, i, r, o), this } absarc(e, t, n, i, r, o) { return this.absellipse(e, t, n, n, i, r, o), this } ellipse(e, t, n, i, r, o, a, l) { let c = this.currentPoint.x, u = this.currentPoint.y; return this.absellipse(e + c, t + u, n, i, r, o, a, l), this } absellipse(e, t, n, i, r, o, a, l) { let c = new ns(e, t, n, i, r, o, a, l); if (this.curves.length > 0) { let h = c.getPoint(0); h.equals(this.currentPoint) || this.lineTo(h.x, h.y) } this.curves.push(c); let u = c.getPoint(1); return this.currentPoint.copy(u), this } copy(e) { return super.copy(e), this.currentPoint.copy(e.currentPoint), this } toJSON() { let e = super.toJSON(); return e.currentPoint = this.currentPoint.toArray(), e } fromJSON(e) { return super.fromJSON(e), this.currentPoint.fromArray(e.currentPoint), this } }, Ei = class extends hs { constructor(e) { super(e); this.uuid = jt(), this.type = "Shape", this.holes = [] } getPointsHoles(e) { let t = []; for (let n = 0, i = this.holes.length; n < i; n++)t[n] = this.holes[n].getPoints(e); return t } extractPoints(e) { return { shape: this.getPoints(e), holes: this.getPointsHoles(e) } } copy(e) { super.copy(e), this.holes = []; for (let t = 0, n = e.holes.length; t < n; t++) { let i = e.holes[t]; this.holes.push(i.clone()) } return this } toJSON() { let e = super.toJSON(); e.uuid = this.uuid, e.holes = []; for (let t = 0, n = this.holes.length; t < n; t++) { let i = this.holes[t]; e.holes.push(i.toJSON()) } return e } fromJSON(e) { super.fromJSON(e), this.uuid = e.uuid, this.holes = []; for (let t = 0, n = e.holes.length; t < n; t++) { let i = e.holes[t]; this.holes.push(new hs().fromJSON(i)) } return this } }, rn = class extends Ne { constructor(e, t = 1) { super(); this.type = "Light", this.color = new se(e), this.intensity = t } dispose() { } copy(e) { return super.copy(e), this.color.copy(e.color), this.intensity = e.intensity, this } toJSON(e) { let t = super.toJSON(e); return t.object.color = this.color.getHex(), t.object.intensity = this.intensity, this.groundColor !== void 0 && (t.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (t.object.distance = this.distance), this.angle !== void 0 && (t.object.angle = this.angle), this.decay !== void 0 && (t.object.decay = this.decay), this.penumbra !== void 0 && (t.object.penumbra = this.penumbra), this.shadow !== void 0 && (t.object.shadow = this.shadow.toJSON()), t } }; rn.prototype.isLight = !0; var sf = class extends rn { constructor(e, t, n) { super(e, n); this.type = "HemisphereLight", this.position.copy(Ne.DefaultUp), this.updateMatrix(), this.groundColor = new se(t) } copy(e) { return rn.prototype.copy.call(this, e), this.groundColor.copy(e.groundColor), this } }; sf.prototype.isHemisphereLight = !0; var of = new xe, af = new A, lf = new A, Io = class { constructor(e) { this.camera = e, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new Y(512, 512), this.map = null, this.mapPass = null, this.matrix = new xe, this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new Yr, this._frameExtents = new Y(1, 1), this._viewportCount = 1, this._viewports = [new Oe(0, 0, 1, 1)] } getViewportCount() { return this._viewportCount } getFrustum() { return this._frustum } updateMatrices(e) { let t = this.camera, n = this.matrix; af.setFromMatrixPosition(e.matrixWorld), t.position.copy(af), lf.setFromMatrixPosition(e.target.matrixWorld), t.lookAt(lf), t.updateMatrixWorld(), of.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse), this._frustum.setFromProjectionMatrix(of), n.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), n.multiply(t.projectionMatrix), n.multiply(t.matrixWorldInverse) } getViewport(e) { return this._viewports[e] } getFrameExtents() { return this._frameExtents } dispose() { this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose() } copy(e) { return this.camera = e.camera.clone(), this.bias = e.bias, this.radius = e.radius, this.mapSize.copy(e.mapSize), this } clone() { return new this.constructor().copy(this) } toJSON() { let e = {}; return this.bias !== 0 && (e.bias = this.bias), this.normalBias !== 0 && (e.normalBias = this.normalBias), this.radius !== 1 && (e.radius = this.radius), (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (e.mapSize = this.mapSize.toArray()), e.camera = this.camera.toJSON(!1).object, delete e.camera.matrix, e } }, El = class extends Io { constructor() { super(new ft(50, 1, .5, 500)); this.focus = 1 } updateMatrices(e) { let t = this.camera, n = xa * 2 * e.angle * this.focus, i = this.mapSize.width / this.mapSize.height, r = e.distance || t.far; (n !== t.fov || i !== t.aspect || r !== t.far) && (t.fov = n, t.aspect = i, t.far = r, t.updateProjectionMatrix()), super.updateMatrices(e) } copy(e) { return super.copy(e), this.focus = e.focus, this } }; El.prototype.isSpotLightShadow = !0; var cf = class extends rn { constructor(e, t, n = 0, i = Math.PI / 3, r = 0, o = 1) { super(e, t); this.type = "SpotLight", this.position.copy(Ne.DefaultUp), this.updateMatrix(), this.target = new Ne, this.distance = n, this.angle = i, this.penumbra = r, this.decay = o, this.shadow = new El } get power() { return this.intensity * Math.PI } set power(e) { this.intensity = e / Math.PI } dispose() { this.shadow.dispose() } copy(e) { return super.copy(e), this.distance = e.distance, this.angle = e.angle, this.penumbra = e.penumbra, this.decay = e.decay, this.target = e.target.clone(), this.shadow = e.shadow.clone(), this } }; cf.prototype.isSpotLight = !0; var uf = new xe, fs = new A, Al = new A, Ll = class extends Io { constructor() { super(new ft(90, 1, .5, 500)); this._frameExtents = new Y(4, 2), this._viewportCount = 6, this._viewports = [new Oe(2, 1, 1, 1), new Oe(0, 1, 1, 1), new Oe(3, 1, 1, 1), new Oe(1, 1, 1, 1), new Oe(3, 0, 1, 1), new Oe(1, 0, 1, 1)], this._cubeDirections = [new A(1, 0, 0), new A(-1, 0, 0), new A(0, 0, 1), new A(0, 0, -1), new A(0, 1, 0), new A(0, -1, 0)], this._cubeUps = [new A(0, 1, 0), new A(0, 1, 0), new A(0, 1, 0), new A(0, 1, 0), new A(0, 0, 1), new A(0, 0, -1)] } updateMatrices(e, t = 0) { let n = this.camera, i = this.matrix, r = e.distance || n.far; r !== n.far && (n.far = r, n.updateProjectionMatrix()), fs.setFromMatrixPosition(e.matrixWorld), n.position.copy(fs), Al.copy(n.position), Al.add(this._cubeDirections[t]), n.up.copy(this._cubeUps[t]), n.lookAt(Al), n.updateMatrixWorld(), i.makeTranslation(-fs.x, -fs.y, -fs.z), uf.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse), this._frustum.setFromProjectionMatrix(uf) } }; Ll.prototype.isPointLightShadow = !0; var hf = class extends rn { constructor(e, t, n = 0, i = 1) { super(e, t); this.type = "PointLight", this.distance = n, this.decay = i, this.shadow = new Ll } get power() { return this.intensity * 4 * Math.PI } set power(e) { this.intensity = e / (4 * Math.PI) } dispose() { this.shadow.dispose() } copy(e) { return super.copy(e), this.distance = e.distance, this.decay = e.decay, this.shadow = e.shadow.clone(), this } }; hf.prototype.isPointLight = !0; var Cl = class extends Io { constructor() { super(new oo(-5, 5, 5, -5, .5, 500)) } }; Cl.prototype.isDirectionalLightShadow = !0; var ff = class extends rn { constructor(e, t) { super(e, t); this.type = "DirectionalLight", this.position.copy(Ne.DefaultUp), this.updateMatrix(), this.target = new Ne, this.shadow = new Cl } dispose() { this.shadow.dispose() } copy(e) { return super.copy(e), this.target = e.target.clone(), this.shadow = e.shadow.clone(), this } }; ff.prototype.isDirectionalLight = !0; var df = class extends rn { constructor(e, t) { super(e, t); this.type = "AmbientLight" } }; df.prototype.isAmbientLight = !0; var pf = class extends rn { constructor(e, t, n = 10, i = 10) { super(e, t); this.type = "RectAreaLight", this.width = n, this.height = i } get power() { return this.intensity * this.width * this.height * Math.PI } set power(e) { this.intensity = e / (this.width * this.height * Math.PI) } copy(e) { return super.copy(e), this.width = e.width, this.height = e.height, this } toJSON(e) { let t = super.toJSON(e); return t.object.width = this.width, t.object.height = this.height, t } }; pf.prototype.isRectAreaLight = !0; var Pl = class { constructor() { this.coefficients = []; for (let e = 0; e < 9; e++)this.coefficients.push(new A) } set(e) { for (let t = 0; t < 9; t++)this.coefficients[t].copy(e[t]); return this } zero() { for (let e = 0; e < 9; e++)this.coefficients[e].set(0, 0, 0); return this } getAt(e, t) { let n = e.x, i = e.y, r = e.z, o = this.coefficients; return t.copy(o[0]).multiplyScalar(.282095), t.addScaledVector(o[1], .488603 * i), t.addScaledVector(o[2], .488603 * r), t.addScaledVector(o[3], .488603 * n), t.addScaledVector(o[4], 1.092548 * (n * i)), t.addScaledVector(o[5], 1.092548 * (i * r)), t.addScaledVector(o[6], .315392 * (3 * r * r - 1)), t.addScaledVector(o[7], 1.092548 * (n * r)), t.addScaledVector(o[8], .546274 * (n * n - i * i)), t } getIrradianceAt(e, t) { let n = e.x, i = e.y, r = e.z, o = this.coefficients; return t.copy(o[0]).multiplyScalar(.886227), t.addScaledVector(o[1], 2 * .511664 * i), t.addScaledVector(o[2], 2 * .511664 * r), t.addScaledVector(o[3], 2 * .511664 * n), t.addScaledVector(o[4], 2 * .429043 * n * i), t.addScaledVector(o[5], 2 * .429043 * i * r), t.addScaledVector(o[6], .743125 * r * r - .247708), t.addScaledVector(o[7], 2 * .429043 * n * r), t.addScaledVector(o[8], .429043 * (n * n - i * i)), t } add(e) { for (let t = 0; t < 9; t++)this.coefficients[t].add(e.coefficients[t]); return this } addScaledSH(e, t) { for (let n = 0; n < 9; n++)this.coefficients[n].addScaledVector(e.coefficients[n], t); return this } scale(e) { for (let t = 0; t < 9; t++)this.coefficients[t].multiplyScalar(e); return this } lerp(e, t) { for (let n = 0; n < 9; n++)this.coefficients[n].lerp(e.coefficients[n], t); return this } equals(e) { for (let t = 0; t < 9; t++)if (!this.coefficients[t].equals(e.coefficients[t])) return !1; return !0 } copy(e) { return this.set(e.coefficients) } clone() { return new this.constructor().copy(this) } fromArray(e, t = 0) { let n = this.coefficients; for (let i = 0; i < 9; i++)n[i].fromArray(e, t + i * 3); return this } toArray(e = [], t = 0) { let n = this.coefficients; for (let i = 0; i < 9; i++)n[i].toArray(e, t + i * 3); return e } static getBasisAt(e, t) { let n = e.x, i = e.y, r = e.z; t[0] = .282095, t[1] = .488603 * i, t[2] = .488603 * r, t[3] = .488603 * n, t[4] = 1.092548 * n * i, t[5] = 1.092548 * i * r, t[6] = .315392 * (3 * r * r - 1), t[7] = 1.092548 * n * r, t[8] = .546274 * (n * n - i * i) } }; Pl.prototype.isSphericalHarmonics3 = !0; var Do = class extends rn { constructor(e = new Pl, t = 1) { super(void 0, t); this.sh = e } copy(e) { return super.copy(e), this.sh.copy(e.sh), this } fromJSON(e) { return this.intensity = e.intensity, this.sh.fromArray(e.sh), this } toJSON(e) { let t = super.toJSON(e); return t.object.sh = this.sh.toArray(), t } }; Do.prototype.isLightProbe = !0; var mf = class { static decodeText(e) { if (typeof TextDecoder != "undefined") return new TextDecoder().decode(e); let t = ""; for (let n = 0, i = e.length; n < i; n++)t += String.fromCharCode(e[n]); try { return decodeURIComponent(escape(t)) } catch (n) { return t } } static extractUrlBase(e) { let t = e.lastIndexOf("/"); return t === -1 ? "./" : e.substr(0, t + 1) } }, gf = class extends We { constructor() { super(); this.type = "InstancedBufferGeometry", this.instanceCount = 1 / 0 } copy(e) { return super.copy(e), this.instanceCount = e.instanceCount, this } clone() { return new this.constructor().copy(this) } toJSON() { let e = super.toJSON(this); return e.instanceCount = this.instanceCount, e.isInstancedBufferGeometry = !0, e } }; gf.prototype.isInstancedBufferGeometry = !0; var _f = class extends En { constructor(e) { super(e); typeof createImageBitmap == "undefined" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), typeof fetch == "undefined" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.options = { premultiplyAlpha: "none" } } setOptions(e) { return this.options = e, this } load(e, t, n, i) { e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e); let r = this, o = yr.get(e); if (o !== void 0) return r.manager.itemStart(e), setTimeout(function () { t && t(o), r.manager.itemEnd(e) }, 0), o; let a = {}; a.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include", a.headers = this.requestHeader, fetch(e, a).then(function (l) { return l.blob() }).then(function (l) { return createImageBitmap(l, Object.assign(r.options, { colorSpaceConversion: "none" })) }).then(function (l) { yr.add(e, l), t && t(l), r.manager.itemEnd(e) }).catch(function (l) { i && i(l), r.manager.itemError(e), r.manager.itemEnd(e) }), r.manager.itemStart(e) } }; _f.prototype.isImageBitmapLoader = !0; var xf = class { constructor() { this.type = "ShapePath", this.color = new se, this.subPaths = [], this.currentPath = null } moveTo(e, t) { return this.currentPath = new hs, this.subPaths.push(this.currentPath), this.currentPath.moveTo(e, t), this } lineTo(e, t) { return this.currentPath.lineTo(e, t), this } quadraticCurveTo(e, t, n, i) { return this.currentPath.quadraticCurveTo(e, t, n, i), this } bezierCurveTo(e, t, n, i, r, o) { return this.currentPath.bezierCurveTo(e, t, n, i, r, o), this } splineThru(e) { return this.currentPath.splineThru(e), this } toShapes(e, t) { function n(_) { let w = []; for (let v = 0, b = _.length; v < b; v++) { let T = _[v], y = new Ei; y.curves = T.curves, w.push(y) } return w } function i(_, w) { let v = w.length, b = !1; for (let T = v - 1, y = 0; y < v; T = y++) { let C = w[T], R = w[y], D = R.x - C.x, L = R.y - C.y; if (Math.abs(L) > Number.EPSILON) { if (L < 0 && (C = w[y], D = -D, R = w[T], L = -L), _.y < C.y || _.y > R.y) continue; if (_.y === C.y) { if (_.x === C.x) return !0 } else { let $ = L * (_.x - C.x) - D * (_.y - C.y); if ($ === 0) return !0; if ($ < 0) continue; b = !b } } else { if (_.y !== C.y) continue; if (R.x <= _.x && _.x <= C.x || C.x <= _.x && _.x <= R.x) return !0 } } return b } let r = hn.isClockWise, o = this.subPaths; if (o.length === 0) return []; if (t === !0) return n(o); let a, l, c, u = []; if (o.length === 1) return l = o[0], c = new Ei, c.curves = l.curves, u.push(c), u; let h = !r(o[0].getPoints()); h = e ? !h : h; let f = [], d = [], g = [], m = 0, x; d[m] = void 0, g[m] = []; for (let _ = 0, w = o.length; _ < w; _++)l = o[_], x = l.getPoints(), a = r(x), a = e ? !a : a, a ? (!h && d[m] && m++, d[m] = { s: new Ei, p: x }, d[m].s.curves = l.curves, h && m++, g[m] = []) : g[m].push({ h: l, p: x[0] }); if (!d[0]) return n(o); if (d.length > 1) { let _ = !1, w = []; for (let v = 0, b = d.length; v < b; v++)f[v] = []; for (let v = 0, b = d.length; v < b; v++) { let T = g[v]; for (let y = 0; y < T.length; y++) { let C = T[y], R = !0; for (let D = 0; D < d.length; D++)i(C.p, d[D].p) && (v !== D && w.push({ froms: v, tos: D, hole: y }), R ? (R = !1, f[D].push(C)) : _ = !0); R && f[v].push(C) } } w.length > 0 && (_ || (g = f)) } let p; for (let _ = 0, w = d.length; _ < w; _++) { c = d[_].s, u.push(c), p = g[_]; for (let v = 0, b = p.length; v < b; v++)c.holes.push(p[v].h) } return u } }, yf = class { constructor(e) { this.type = "Font", this.data = e } generateShapes(e, t = 100) { let n = [], i = Gy(e, t, this.data); for (let r = 0, o = i.length; r < o; r++)Array.prototype.push.apply(n, i[r].toShapes()); return n } }; function Gy(s, e, t) {
		let n = Array.from(s), i = e / t.resolution, r = (t.boundingBox.yMax - t.boundingBox.yMin + t.underlineThickness) * i, o = [], a = 0, l = 0; for (let c = 0; c < n.length; c++) {
			let u = n[c]; if (u === `
`) a = 0, l -= r; else { let h = Vy(u, i, a, l, t); a += h.offsetX, o.push(h.path) }
		} return o
	} function Vy(s, e, t, n, i) { let r = i.glyphs[s] || i.glyphs["?"]; if (!r) { console.error('THREE.Font: character "' + s + '" does not exists in font family ' + i.familyName + "."); return } let o = new xf, a, l, c, u, h, f, d, g; if (r.o) { let m = r._cachedOutline || (r._cachedOutline = r.o.split(" ")); for (let x = 0, p = m.length; x < p;)switch (m[x++]) { case "m": a = m[x++] * e + t, l = m[x++] * e + n, o.moveTo(a, l); break; case "l": a = m[x++] * e + t, l = m[x++] * e + n, o.lineTo(a, l); break; case "q": c = m[x++] * e + t, u = m[x++] * e + n, h = m[x++] * e + t, f = m[x++] * e + n, o.quadraticCurveTo(h, f, c, u); break; case "b": c = m[x++] * e + t, u = m[x++] * e + n, h = m[x++] * e + t, f = m[x++] * e + n, d = m[x++] * e + t, g = m[x++] * e + n, o.bezierCurveTo(h, f, d, g, c, u); break } } return { offsetX: r.ha * e, path: o } } yf.prototype.isFont = !0; var Fo, Wy = { getContext: function () { return Fo === void 0 && (Fo = new (window.AudioContext || window.webkitAudioContext)), Fo }, setContext: function (s) { Fo = s } }, vf = class extends En { constructor(e) { super(e) } load(e, t, n, i) { let r = this, o = new tf(this.manager); o.setResponseType("arraybuffer"), o.setPath(this.path), o.setRequestHeader(this.requestHeader), o.setWithCredentials(this.withCredentials), o.load(e, function (a) { try { let l = a.slice(0); Wy.getContext().decodeAudioData(l, function (u) { t(u) }) } catch (l) { i ? i(l) : console.error(l), r.manager.itemError(e) } }, n, i) } }, wf = class extends Do { constructor(e, t, n = 1) { super(void 0, n); let i = new se().set(e), r = new se().set(t), o = new A(i.r, i.g, i.b), a = new A(r.r, r.g, r.b), l = Math.sqrt(Math.PI), c = l * Math.sqrt(.75); this.sh.coefficients[0].copy(o).add(a).multiplyScalar(l), this.sh.coefficients[1].copy(o).sub(a).multiplyScalar(c) } }; wf.prototype.isHemisphereLightProbe = !0; var bf = class extends Do { constructor(e, t = 1) { super(void 0, t); let n = new se().set(e); this.sh.coefficients[0].set(n.r, n.g, n.b).multiplyScalar(2 * Math.sqrt(Math.PI)) } }; bf.prototype.isAmbientLightProbe = !0; var Mf = class extends Ne { constructor(e) { super(); this.type = "Audio", this.listener = e, this.context = e.context, this.gain = this.context.createGain(), this.gain.connect(e.getInput()), this.autoplay = !1, this.buffer = null, this.detune = 0, this.loop = !1, this.loopStart = 0, this.loopEnd = 0, this.offset = 0, this.duration = void 0, this.playbackRate = 1, this.isPlaying = !1, this.hasPlaybackControl = !0, this.source = null, this.sourceType = "empty", this._startedAt = 0, this._progress = 0, this._connected = !1, this.filters = [] } getOutput() { return this.gain } setNodeSource(e) { return this.hasPlaybackControl = !1, this.sourceType = "audioNode", this.source = e, this.connect(), this } setMediaElementSource(e) { return this.hasPlaybackControl = !1, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(e), this.connect(), this } setMediaStreamSource(e) { return this.hasPlaybackControl = !1, this.sourceType = "mediaStreamNode", this.source = this.context.createMediaStreamSource(e), this.connect(), this } setBuffer(e) { return this.buffer = e, this.sourceType = "buffer", this.autoplay && this.play(), this } play(e = 0) { if (this.isPlaying === !0) { console.warn("THREE.Audio: Audio is already playing."); return } if (this.hasPlaybackControl === !1) { console.warn("THREE.Audio: this Audio has no playback control."); return } this._startedAt = this.context.currentTime + e; let t = this.context.createBufferSource(); return t.buffer = this.buffer, t.loop = this.loop, t.loopStart = this.loopStart, t.loopEnd = this.loopEnd, t.onended = this.onEnded.bind(this), t.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = t, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect() } pause() { if (this.hasPlaybackControl === !1) { console.warn("THREE.Audio: this Audio has no playback control."); return } return this.isPlaying === !0 && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, this.loop === !0 && (this._progress = this._progress % (this.duration || this.buffer.duration)), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this } stop() { if (this.hasPlaybackControl === !1) { console.warn("THREE.Audio: this Audio has no playback control."); return } return this._progress = 0, this.source.stop(), this.source.onended = null, this.isPlaying = !1, this } connect() { if (this.filters.length > 0) { this.source.connect(this.filters[0]); for (let e = 1, t = this.filters.length; e < t; e++)this.filters[e - 1].connect(this.filters[e]); this.filters[this.filters.length - 1].connect(this.getOutput()) } else this.source.connect(this.getOutput()); return this._connected = !0, this } disconnect() { if (this.filters.length > 0) { this.source.disconnect(this.filters[0]); for (let e = 1, t = this.filters.length; e < t; e++)this.filters[e - 1].disconnect(this.filters[e]); this.filters[this.filters.length - 1].disconnect(this.getOutput()) } else this.source.disconnect(this.getOutput()); return this._connected = !1, this } getFilters() { return this.filters } setFilters(e) { return e || (e = []), this._connected === !0 ? (this.disconnect(), this.filters = e.slice(), this.connect()) : this.filters = e.slice(), this } setDetune(e) { if (this.detune = e, this.source.detune !== void 0) return this.isPlaying === !0 && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, .01), this } getDetune() { return this.detune } getFilter() { return this.getFilters()[0] } setFilter(e) { return this.setFilters(e ? [e] : []) } setPlaybackRate(e) { if (this.hasPlaybackControl === !1) { console.warn("THREE.Audio: this Audio has no playback control."); return } return this.playbackRate = e, this.isPlaying === !0 && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, .01), this } getPlaybackRate() { return this.playbackRate } onEnded() { this.isPlaying = !1 } getLoop() { return this.hasPlaybackControl === !1 ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop } setLoop(e) { if (this.hasPlaybackControl === !1) { console.warn("THREE.Audio: this Audio has no playback control."); return } return this.loop = e, this.isPlaying === !0 && (this.source.loop = this.loop), this } setLoopStart(e) { return this.loopStart = e, this } setLoopEnd(e) { return this.loopEnd = e, this } getVolume() { return this.gain.gain.value } setVolume(e) { return this.gain.gain.setTargetAtTime(e, this.context.currentTime, .01), this } }; var Sf = class { constructor(e, t = 2048) { this.analyser = e.context.createAnalyser(), this.analyser.fftSize = t, this.data = new Uint8Array(this.analyser.frequencyBinCount), e.getOutput().connect(this.analyser) } getFrequencyData() { return this.analyser.getByteFrequencyData(this.data), this.data } getAverageFrequency() { let e = 0, t = this.getFrequencyData(); for (let n = 0; n < t.length; n++)e += t[n]; return e / t.length } }, Tf = class { constructor(e, t, n) { this.binding = e, this.valueSize = n; let i, r, o; switch (t) { case "quaternion": i = this._slerp, r = this._slerpAdditive, o = this._setAdditiveIdentityQuaternion, this.buffer = new Float64Array(n * 6), this._workIndex = 5; break; case "string": case "bool": i = this._select, r = this._select, o = this._setAdditiveIdentityOther, this.buffer = new Array(n * 5); break; default: i = this._lerp, r = this._lerpAdditive, o = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(n * 5) }this._mixBufferRegion = i, this._mixBufferRegionAdditive = r, this._setIdentity = o, this._origIndex = 3, this._addIndex = 4, this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, this.useCount = 0, this.referenceCount = 0 } accumulate(e, t) { let n = this.buffer, i = this.valueSize, r = e * i + i, o = this.cumulativeWeight; if (o === 0) { for (let a = 0; a !== i; ++a)n[r + a] = n[a]; o = t } else { o += t; let a = t / o; this._mixBufferRegion(n, r, 0, a, i) } this.cumulativeWeight = o } accumulateAdditive(e) { let t = this.buffer, n = this.valueSize, i = n * this._addIndex; this.cumulativeWeightAdditive === 0 && this._setIdentity(), this._mixBufferRegionAdditive(t, i, 0, e, n), this.cumulativeWeightAdditive += e } apply(e) { let t = this.valueSize, n = this.buffer, i = e * t + t, r = this.cumulativeWeight, o = this.cumulativeWeightAdditive, a = this.binding; if (this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, r < 1) { let l = t * this._origIndex; this._mixBufferRegion(n, i, l, 1 - r, t) } o > 0 && this._mixBufferRegionAdditive(n, i, this._addIndex * t, 1, t); for (let l = t, c = t + t; l !== c; ++l)if (n[l] !== n[l + t]) { a.setValue(n, i); break } } saveOriginalState() { let e = this.binding, t = this.buffer, n = this.valueSize, i = n * this._origIndex; e.getValue(t, i); for (let r = n, o = i; r !== o; ++r)t[r] = t[i + r % n]; this._setIdentity(), this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0 } restoreOriginalState() { let e = this.valueSize * 3; this.binding.setValue(this.buffer, e) } _setAdditiveIdentityNumeric() { let e = this._addIndex * this.valueSize, t = e + this.valueSize; for (let n = e; n < t; n++)this.buffer[n] = 0 } _setAdditiveIdentityQuaternion() { this._setAdditiveIdentityNumeric(), this.buffer[this._addIndex * this.valueSize + 3] = 1 } _setAdditiveIdentityOther() { let e = this._origIndex * this.valueSize, t = this._addIndex * this.valueSize; for (let n = 0; n < this.valueSize; n++)this.buffer[t + n] = this.buffer[e + n] } _select(e, t, n, i, r) { if (i >= .5) for (let o = 0; o !== r; ++o)e[t + o] = e[n + o] } _slerp(e, t, n, i) { vt.slerpFlat(e, t, e, t, e, n, i) } _slerpAdditive(e, t, n, i, r) { let o = this._workIndex * r; vt.multiplyQuaternionsFlat(e, o, e, t, e, n), vt.slerpFlat(e, t, e, t, e, o, i) } _lerp(e, t, n, i, r) { let o = 1 - i; for (let a = 0; a !== r; ++a) { let l = t + a; e[l] = e[l] * o + e[n + a] * i } } _lerpAdditive(e, t, n, i, r) { for (let o = 0; o !== r; ++o) { let a = t + o; e[a] = e[a] + e[n + o] * i } } }, Rl = "\\[\\]\\.:\\/", qy = new RegExp("[" + Rl + "]", "g"), Il = "[^" + Rl + "]", Xy = "[^" + Rl.replace("\\.", "") + "]", Yy = /((?:WC+[\/:])*)/.source.replace("WC", Il), Zy = /(WCOD+)?/.source.replace("WCOD", Xy), Jy = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", Il), jy = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", Il), $y = new RegExp("^" + Yy + Zy + Jy + jy + "$"), Qy = ["material", "materials", "bones"], Ef = class { constructor(e, t, n) { let i = n || Fe.parseTrackName(t); this._targetGroup = e, this._bindings = e.subscribe_(t, i) } getValue(e, t) { this.bind(); let n = this._targetGroup.nCachedObjects_, i = this._bindings[n]; i !== void 0 && i.getValue(e, t) } setValue(e, t) { let n = this._bindings; for (let i = this._targetGroup.nCachedObjects_, r = n.length; i !== r; ++i)n[i].setValue(e, t) } bind() { let e = this._bindings; for (let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)e[t].bind() } unbind() { let e = this._bindings; for (let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)e[t].unbind() } }, Fe = class { constructor(e, t, n) { this.path = t, this.parsedPath = n || Fe.parseTrackName(t), this.node = Fe.findNode(e, this.parsedPath.nodeName) || e, this.rootNode = e, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound } static create(e, t, n) { return e && e.isAnimationObjectGroup ? new Fe.Composite(e, t, n) : new Fe(e, t, n) } static sanitizeNodeName(e) { return e.replace(/\s/g, "_").replace(qy, "") } static parseTrackName(e) { let t = $y.exec(e); if (!t) throw new Error("PropertyBinding: Cannot parse trackName: " + e); let n = { nodeName: t[2], objectName: t[3], objectIndex: t[4], propertyName: t[5], propertyIndex: t[6] }, i = n.nodeName && n.nodeName.lastIndexOf("."); if (i !== void 0 && i !== -1) { let r = n.nodeName.substring(i + 1); Qy.indexOf(r) !== -1 && (n.nodeName = n.nodeName.substring(0, i), n.objectName = r) } if (n.propertyName === null || n.propertyName.length === 0) throw new Error("PropertyBinding: can not parse propertyName from trackName: " + e); return n } static findNode(e, t) { if (!t || t === "" || t === "." || t === -1 || t === e.name || t === e.uuid) return e; if (e.skeleton) { let n = e.skeleton.getBoneByName(t); if (n !== void 0) return n } if (e.children) { let n = function (r) { for (let o = 0; o < r.length; o++) { let a = r[o]; if (a.name === t || a.uuid === t) return a; let l = n(a.children); if (l) return l } return null }, i = n(e.children); if (i) return i } return null } _getValue_unavailable() { } _setValue_unavailable() { } _getValue_direct(e, t) { e[t] = this.targetObject[this.propertyName] } _getValue_array(e, t) { let n = this.resolvedProperty; for (let i = 0, r = n.length; i !== r; ++i)e[t++] = n[i] } _getValue_arrayElement(e, t) { e[t] = this.resolvedProperty[this.propertyIndex] } _getValue_toArray(e, t) { this.resolvedProperty.toArray(e, t) } _setValue_direct(e, t) { this.targetObject[this.propertyName] = e[t] } _setValue_direct_setNeedsUpdate(e, t) { this.targetObject[this.propertyName] = e[t], this.targetObject.needsUpdate = !0 } _setValue_direct_setMatrixWorldNeedsUpdate(e, t) { this.targetObject[this.propertyName] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0 } _setValue_array(e, t) { let n = this.resolvedProperty; for (let i = 0, r = n.length; i !== r; ++i)n[i] = e[t++] } _setValue_array_setNeedsUpdate(e, t) { let n = this.resolvedProperty; for (let i = 0, r = n.length; i !== r; ++i)n[i] = e[t++]; this.targetObject.needsUpdate = !0 } _setValue_array_setMatrixWorldNeedsUpdate(e, t) { let n = this.resolvedProperty; for (let i = 0, r = n.length; i !== r; ++i)n[i] = e[t++]; this.targetObject.matrixWorldNeedsUpdate = !0 } _setValue_arrayElement(e, t) { this.resolvedProperty[this.propertyIndex] = e[t] } _setValue_arrayElement_setNeedsUpdate(e, t) { this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.needsUpdate = !0 } _setValue_arrayElement_setMatrixWorldNeedsUpdate(e, t) { this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0 } _setValue_fromArray(e, t) { this.resolvedProperty.fromArray(e, t) } _setValue_fromArray_setNeedsUpdate(e, t) { this.resolvedProperty.fromArray(e, t), this.targetObject.needsUpdate = !0 } _setValue_fromArray_setMatrixWorldNeedsUpdate(e, t) { this.resolvedProperty.fromArray(e, t), this.targetObject.matrixWorldNeedsUpdate = !0 } _getValue_unbound(e, t) { this.bind(), this.getValue(e, t) } _setValue_unbound(e, t) { this.bind(), this.setValue(e, t) } bind() { let e = this.node, t = this.parsedPath, n = t.objectName, i = t.propertyName, r = t.propertyIndex; if (e || (e = Fe.findNode(this.rootNode, t.nodeName) || this.rootNode, this.node = e), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !e) { console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found."); return } if (n) { let c = t.objectIndex; switch (n) { case "materials": if (!e.material) { console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this); return } if (!e.material.materials) { console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this); return } e = e.material.materials; break; case "bones": if (!e.skeleton) { console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this); return } e = e.skeleton.bones; for (let u = 0; u < e.length; u++)if (e[u].name === c) { c = u; break } break; default: if (e[n] === void 0) { console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this); return } e = e[n] }if (c !== void 0) { if (e[c] === void 0) { console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, e); return } e = e[c] } } let o = e[i]; if (o === void 0) { let c = t.nodeName; console.error("THREE.PropertyBinding: Trying to update property for track: " + c + "." + i + " but it wasn't found.", e); return } let a = this.Versioning.None; this.targetObject = e, e.needsUpdate !== void 0 ? a = this.Versioning.NeedsUpdate : e.matrixWorldNeedsUpdate !== void 0 && (a = this.Versioning.MatrixWorldNeedsUpdate); let l = this.BindingType.Direct; if (r !== void 0) { if (i === "morphTargetInfluences") { if (!e.geometry) { console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this); return } if (e.geometry.isBufferGeometry) { if (!e.geometry.morphAttributes) { console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this); return } e.morphTargetDictionary[r] !== void 0 && (r = e.morphTargetDictionary[r]) } else { console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.", this); return } } l = this.BindingType.ArrayElement, this.resolvedProperty = o, this.propertyIndex = r } else o.fromArray !== void 0 && o.toArray !== void 0 ? (l = this.BindingType.HasFromToArray, this.resolvedProperty = o) : Array.isArray(o) ? (l = this.BindingType.EntireArray, this.resolvedProperty = o) : this.propertyName = i; this.getValue = this.GetterByBindingType[l], this.setValue = this.SetterByBindingTypeAndVersioning[l][a] } unbind() { this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound } }; Fe.Composite = Ef; Fe.prototype.BindingType = { Direct: 0, EntireArray: 1, ArrayElement: 2, HasFromToArray: 3 }; Fe.prototype.Versioning = { None: 0, NeedsUpdate: 1, MatrixWorldNeedsUpdate: 2 }; Fe.prototype.GetterByBindingType = [Fe.prototype._getValue_direct, Fe.prototype._getValue_array, Fe.prototype._getValue_arrayElement, Fe.prototype._getValue_toArray]; Fe.prototype.SetterByBindingTypeAndVersioning = [[Fe.prototype._setValue_direct, Fe.prototype._setValue_direct_setNeedsUpdate, Fe.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [Fe.prototype._setValue_array, Fe.prototype._setValue_array_setNeedsUpdate, Fe.prototype._setValue_array_setMatrixWorldNeedsUpdate], [Fe.prototype._setValue_arrayElement, Fe.prototype._setValue_arrayElement_setNeedsUpdate, Fe.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [Fe.prototype._setValue_fromArray, Fe.prototype._setValue_fromArray_setNeedsUpdate, Fe.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]]; var Af = class { constructor() { this.uuid = jt(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0; let e = {}; this._indicesByUUID = e; for (let n = 0, i = arguments.length; n !== i; ++n)e[arguments[n].uuid] = n; this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {}; let t = this; this.stats = { objects: { get total() { return t._objects.length }, get inUse() { return this.total - t.nCachedObjects_ } }, get bindingsPerObject() { return t._bindings.length } } } add() { let e = this._objects, t = this._indicesByUUID, n = this._paths, i = this._parsedPaths, r = this._bindings, o = r.length, a, l = e.length, c = this.nCachedObjects_; for (let u = 0, h = arguments.length; u !== h; ++u) { let f = arguments[u], d = f.uuid, g = t[d]; if (g === void 0) { g = l++, t[d] = g, e.push(f); for (let m = 0, x = o; m !== x; ++m)r[m].push(new Fe(f, n[m], i[m])) } else if (g < c) { a = e[g]; let m = --c, x = e[m]; t[x.uuid] = g, e[g] = x, t[d] = m, e[m] = f; for (let p = 0, _ = o; p !== _; ++p) { let w = r[p], v = w[m], b = w[g]; w[g] = v, b === void 0 && (b = new Fe(f, n[p], i[p])), w[m] = b } } else e[g] !== a && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.") } this.nCachedObjects_ = c } remove() { let e = this._objects, t = this._indicesByUUID, n = this._bindings, i = n.length, r = this.nCachedObjects_; for (let o = 0, a = arguments.length; o !== a; ++o) { let l = arguments[o], c = l.uuid, u = t[c]; if (u !== void 0 && u >= r) { let h = r++, f = e[h]; t[f.uuid] = u, e[u] = f, t[c] = h, e[h] = l; for (let d = 0, g = i; d !== g; ++d) { let m = n[d], x = m[h], p = m[u]; m[u] = x, m[h] = p } } } this.nCachedObjects_ = r } uncache() { let e = this._objects, t = this._indicesByUUID, n = this._bindings, i = n.length, r = this.nCachedObjects_, o = e.length; for (let a = 0, l = arguments.length; a !== l; ++a) { let c = arguments[a], u = c.uuid, h = t[u]; if (h !== void 0) if (delete t[u], h < r) { let f = --r, d = e[f], g = --o, m = e[g]; t[d.uuid] = h, e[h] = d, t[m.uuid] = f, e[f] = m, e.pop(); for (let x = 0, p = i; x !== p; ++x) { let _ = n[x], w = _[f], v = _[g]; _[h] = w, _[f] = v, _.pop() } } else { let f = --o, d = e[f]; f > 0 && (t[d.uuid] = h), e[h] = d, e.pop(); for (let g = 0, m = i; g !== m; ++g) { let x = n[g]; x[h] = x[f], x.pop() } } } this.nCachedObjects_ = r } subscribe_(e, t) { let n = this._bindingsIndicesByPath, i = n[e], r = this._bindings; if (i !== void 0) return r[i]; let o = this._paths, a = this._parsedPaths, l = this._objects, c = l.length, u = this.nCachedObjects_, h = new Array(c); i = r.length, n[e] = i, o.push(e), a.push(t), r.push(h); for (let f = u, d = l.length; f !== d; ++f) { let g = l[f]; h[f] = new Fe(g, e, t) } return h } unsubscribe_(e) { let t = this._bindingsIndicesByPath, n = t[e]; if (n !== void 0) { let i = this._paths, r = this._parsedPaths, o = this._bindings, a = o.length - 1, l = o[a], c = e[a]; t[c] = n, o[n] = l, o.pop(), r[n] = r[a], r.pop(), i[n] = i[a], i.pop() } } }; Af.prototype.isAnimationObjectGroup = !0; var Lf = class { constructor(e, t, n = null, i = t.blendMode) { this._mixer = e, this._clip = t, this._localRoot = n, this.blendMode = i; let r = t.tracks, o = r.length, a = new Array(o), l = { endingStart: ki, endingEnd: ki }; for (let c = 0; c !== o; ++c) { let u = r[c].createInterpolant(null); a[c] = u, u.settings = l } this._interpolantSettings = l, this._interpolants = a, this._propertyBindings = new Array(o), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = Tm, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0 } play() { return this._mixer._activateAction(this), this } stop() { return this._mixer._deactivateAction(this), this.reset() } reset() { return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping() } isRunning() { return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this) } isScheduled() { return this._mixer._isActiveAction(this) } startAt(e) { return this._startTime = e, this } setLoop(e, t) { return this.loop = e, this.repetitions = t, this } setEffectiveWeight(e) { return this.weight = e, this._effectiveWeight = this.enabled ? e : 0, this.stopFading() } getEffectiveWeight() { return this._effectiveWeight } fadeIn(e) { return this._scheduleFading(e, 0, 1) } fadeOut(e) { return this._scheduleFading(e, 1, 0) } crossFadeFrom(e, t, n) { if (e.fadeOut(t), this.fadeIn(t), n) { let i = this._clip.duration, r = e._clip.duration, o = r / i, a = i / r; e.warp(1, o, t), this.warp(a, 1, t) } return this } crossFadeTo(e, t, n) { return e.crossFadeFrom(this, t, n) } stopFading() { let e = this._weightInterpolant; return e !== null && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this } setEffectiveTimeScale(e) { return this.timeScale = e, this._effectiveTimeScale = this.paused ? 0 : e, this.stopWarping() } getEffectiveTimeScale() { return this._effectiveTimeScale } setDuration(e) { return this.timeScale = this._clip.duration / e, this.stopWarping() } syncWith(e) { return this.time = e.time, this.timeScale = e.timeScale, this.stopWarping() } halt(e) { return this.warp(this._effectiveTimeScale, 0, e) } warp(e, t, n) { let i = this._mixer, r = i.time, o = this.timeScale, a = this._timeScaleInterpolant; a === null && (a = i._lendControlInterpolant(), this._timeScaleInterpolant = a); let l = a.parameterPositions, c = a.sampleValues; return l[0] = r, l[1] = r + n, c[0] = e / o, c[1] = t / o, this } stopWarping() { let e = this._timeScaleInterpolant; return e !== null && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this } getMixer() { return this._mixer } getClip() { return this._clip } getRoot() { return this._localRoot || this._mixer._root } _update(e, t, n, i) { if (!this.enabled) { this._updateWeight(e); return } let r = this._startTime; if (r !== null) { let l = (e - r) * n; if (l < 0 || n === 0) return; this._startTime = null, t = n * l } t *= this._updateTimeScale(e); let o = this._updateTime(t), a = this._updateWeight(e); if (a > 0) { let l = this._interpolants, c = this._propertyBindings; switch (this.blendMode) { case ou: for (let u = 0, h = l.length; u !== h; ++u)l[u].evaluate(o), c[u].accumulateAdditive(a); break; case da: default: for (let u = 0, h = l.length; u !== h; ++u)l[u].evaluate(o), c[u].accumulate(i, a) } } } _updateWeight(e) { let t = 0; if (this.enabled) { t = this.weight; let n = this._weightInterpolant; if (n !== null) { let i = n.evaluate(e)[0]; t *= i, e > n.parameterPositions[1] && (this.stopFading(), i === 0 && (this.enabled = !1)) } } return this._effectiveWeight = t, t } _updateTimeScale(e) { let t = 0; if (!this.paused) { t = this.timeScale; let n = this._timeScaleInterpolant; n !== null && (t *= n.evaluate(e)[0], e > n.parameterPositions[1] && (this.stopWarping(), t === 0 ? this.paused = !0 : this.timeScale = t)) } return this._effectiveTimeScale = t, t } _updateTime(e) { let t = this._clip.duration, n = this.loop, i = this.time + e, r = this._loopCount, o = n === Em; if (e === 0) return r === -1 ? i : o && (r & 1) == 1 ? t - i : i; if (n === Sm) { r === -1 && (this._loopCount = 0, this._setEndings(!0, !0, !1)); e: { if (i >= t) i = t; else if (i < 0) i = 0; else { this.time = i; break e } this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = i, this._mixer.dispatchEvent({ type: "finished", action: this, direction: e < 0 ? -1 : 1 }) } } else { if (r === -1 && (e >= 0 ? (r = 0, this._setEndings(!0, this.repetitions === 0, o)) : this._setEndings(this.repetitions === 0, !0, o)), i >= t || i < 0) { let a = Math.floor(i / t); i -= t * a, r += Math.abs(a); let l = this.repetitions - r; if (l <= 0) this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, i = e > 0 ? t : 0, this.time = i, this._mixer.dispatchEvent({ type: "finished", action: this, direction: e > 0 ? 1 : -1 }); else { if (l === 1) { let c = e < 0; this._setEndings(c, !c, o) } else this._setEndings(!1, !1, o); this._loopCount = r, this.time = i, this._mixer.dispatchEvent({ type: "loop", action: this, loopDelta: a }) } } else this.time = i; if (o && (r & 1) == 1) return t - i } return i } _setEndings(e, t, n) { let i = this._interpolantSettings; n ? (i.endingStart = Hi, i.endingEnd = Hi) : (e ? i.endingStart = this.zeroSlopeAtStart ? Hi : ki : i.endingStart = Os, t ? i.endingEnd = this.zeroSlopeAtEnd ? Hi : ki : i.endingEnd = Os) } _scheduleFading(e, t, n) { let i = this._mixer, r = i.time, o = this._weightInterpolant; o === null && (o = i._lendControlInterpolant(), this._weightInterpolant = o); let a = o.parameterPositions, l = o.sampleValues; return a[0] = r, l[0] = t, a[1] = r + e, l[1] = n, this } }, Cf = class extends kn { constructor(e) { super(); this._root = e, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1 } _bindAction(e, t) { let n = e._localRoot || this._root, i = e._clip.tracks, r = i.length, o = e._propertyBindings, a = e._interpolants, l = n.uuid, c = this._bindingsByRootAndName, u = c[l]; u === void 0 && (u = {}, c[l] = u); for (let h = 0; h !== r; ++h) { let f = i[h], d = f.name, g = u[d]; if (g !== void 0) o[h] = g; else { if (g = o[h], g !== void 0) { g._cacheIndex === null && (++g.referenceCount, this._addInactiveBinding(g, l, d)); continue } let m = t && t._propertyBindings[h].binding.parsedPath; g = new Tf(Fe.create(n, d, m), f.ValueTypeName, f.getValueSize()), ++g.referenceCount, this._addInactiveBinding(g, l, d), o[h] = g } a[h].resultBuffer = g.buffer } } _activateAction(e) { if (!this._isActiveAction(e)) { if (e._cacheIndex === null) { let n = (e._localRoot || this._root).uuid, i = e._clip.uuid, r = this._actionsByClip[i]; this._bindAction(e, r && r.knownActions[0]), this._addInactiveAction(e, i, n) } let t = e._propertyBindings; for (let n = 0, i = t.length; n !== i; ++n) { let r = t[n]; r.useCount++ == 0 && (this._lendBinding(r), r.saveOriginalState()) } this._lendAction(e) } } _deactivateAction(e) { if (this._isActiveAction(e)) { let t = e._propertyBindings; for (let n = 0, i = t.length; n !== i; ++n) { let r = t[n]; --r.useCount == 0 && (r.restoreOriginalState(), this._takeBackBinding(r)) } this._takeBackAction(e) } } _initMemoryManager() { this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0; let e = this; this.stats = { actions: { get total() { return e._actions.length }, get inUse() { return e._nActiveActions } }, bindings: { get total() { return e._bindings.length }, get inUse() { return e._nActiveBindings } }, controlInterpolants: { get total() { return e._controlInterpolants.length }, get inUse() { return e._nActiveControlInterpolants } } } } _isActiveAction(e) { let t = e._cacheIndex; return t !== null && t < this._nActiveActions } _addInactiveAction(e, t, n) { let i = this._actions, r = this._actionsByClip, o = r[t]; if (o === void 0) o = { knownActions: [e], actionByRoot: {} }, e._byClipCacheIndex = 0, r[t] = o; else { let a = o.knownActions; e._byClipCacheIndex = a.length, a.push(e) } e._cacheIndex = i.length, i.push(e), o.actionByRoot[n] = e } _removeInactiveAction(e) { let t = this._actions, n = t[t.length - 1], i = e._cacheIndex; n._cacheIndex = i, t[i] = n, t.pop(), e._cacheIndex = null; let r = e._clip.uuid, o = this._actionsByClip, a = o[r], l = a.knownActions, c = l[l.length - 1], u = e._byClipCacheIndex; c._byClipCacheIndex = u, l[u] = c, l.pop(), e._byClipCacheIndex = null; let h = a.actionByRoot, f = (e._localRoot || this._root).uuid; delete h[f], l.length === 0 && delete o[r], this._removeInactiveBindingsForAction(e) } _removeInactiveBindingsForAction(e) { let t = e._propertyBindings; for (let n = 0, i = t.length; n !== i; ++n) { let r = t[n]; --r.referenceCount == 0 && this._removeInactiveBinding(r) } } _lendAction(e) { let t = this._actions, n = e._cacheIndex, i = this._nActiveActions++, r = t[i]; e._cacheIndex = i, t[i] = e, r._cacheIndex = n, t[n] = r } _takeBackAction(e) { let t = this._actions, n = e._cacheIndex, i = --this._nActiveActions, r = t[i]; e._cacheIndex = i, t[i] = e, r._cacheIndex = n, t[n] = r } _addInactiveBinding(e, t, n) { let i = this._bindingsByRootAndName, r = this._bindings, o = i[t]; o === void 0 && (o = {}, i[t] = o), o[n] = e, e._cacheIndex = r.length, r.push(e) } _removeInactiveBinding(e) { let t = this._bindings, n = e.binding, i = n.rootNode.uuid, r = n.path, o = this._bindingsByRootAndName, a = o[i], l = t[t.length - 1], c = e._cacheIndex; l._cacheIndex = c, t[c] = l, t.pop(), delete a[r], Object.keys(a).length === 0 && delete o[i] } _lendBinding(e) { let t = this._bindings, n = e._cacheIndex, i = this._nActiveBindings++, r = t[i]; e._cacheIndex = i, t[i] = e, r._cacheIndex = n, t[n] = r } _takeBackBinding(e) { let t = this._bindings, n = e._cacheIndex, i = --this._nActiveBindings, r = t[i]; e._cacheIndex = i, t[i] = e, r._cacheIndex = n, t[n] = r } _lendControlInterpolant() { let e = this._controlInterpolants, t = this._nActiveControlInterpolants++, n = e[t]; return n === void 0 && (n = new bl(new Float32Array(2), new Float32Array(2), 1, this._controlInterpolantsResultBuffer), n.__cacheIndex = t, e[t] = n), n } _takeBackControlInterpolant(e) { let t = this._controlInterpolants, n = e.__cacheIndex, i = --this._nActiveControlInterpolants, r = t[i]; e.__cacheIndex = i, t[i] = e, r.__cacheIndex = n, t[n] = r } clipAction(e, t, n) { let i = t || this._root, r = i.uuid, o = typeof e == "string" ? Sl.findByName(i, e) : e, a = o !== null ? o.uuid : e, l = this._actionsByClip[a], c = null; if (n === void 0 && (o !== null ? n = o.blendMode : n = da), l !== void 0) { let h = l.actionByRoot[r]; if (h !== void 0 && h.blendMode === n) return h; c = l.knownActions[0], o === null && (o = c._clip) } if (o === null) return null; let u = new Lf(this, o, t, n); return this._bindAction(u, c), this._addInactiveAction(u, a, r), u } existingAction(e, t) { let n = t || this._root, i = n.uuid, r = typeof e == "string" ? Sl.findByName(n, e) : e, o = r ? r.uuid : e, a = this._actionsByClip[o]; return a !== void 0 && a.actionByRoot[i] || null } stopAllAction() { let e = this._actions, t = this._nActiveActions; for (let n = t - 1; n >= 0; --n)e[n].stop(); return this } update(e) { e *= this.timeScale; let t = this._actions, n = this._nActiveActions, i = this.time += e, r = Math.sign(e), o = this._accuIndex ^= 1; for (let c = 0; c !== n; ++c)t[c]._update(i, e, r, o); let a = this._bindings, l = this._nActiveBindings; for (let c = 0; c !== l; ++c)a[c].apply(o); return this } setTime(e) { this.time = 0; for (let t = 0; t < this._actions.length; t++)this._actions[t].time = 0; return this.update(e) } getRoot() { return this._root } uncacheClip(e) { let t = this._actions, n = e.uuid, i = this._actionsByClip, r = i[n]; if (r !== void 0) { let o = r.knownActions; for (let a = 0, l = o.length; a !== l; ++a) { let c = o[a]; this._deactivateAction(c); let u = c._cacheIndex, h = t[t.length - 1]; c._cacheIndex = null, c._byClipCacheIndex = null, h._cacheIndex = u, t[u] = h, t.pop(), this._removeInactiveBindingsForAction(c) } delete i[n] } } uncacheRoot(e) { let t = e.uuid, n = this._actionsByClip; for (let o in n) { let a = n[o].actionByRoot, l = a[t]; l !== void 0 && (this._deactivateAction(l), this._removeInactiveAction(l)) } let i = this._bindingsByRootAndName, r = i[t]; if (r !== void 0) for (let o in r) { let a = r[o]; a.restoreOriginalState(), this._removeInactiveBinding(a) } } uncacheAction(e, t) { let n = this.existingAction(e, t); n !== null && (this._deactivateAction(n), this._removeInactiveAction(n)) } }; Cf.prototype._controlInterpolantsResultBuffer = new Float32Array(1); var Bo = class { constructor(e) { typeof e == "string" && (console.warn("THREE.Uniform: Type parameter is no longer needed."), e = arguments[1]), this.value = e } clone() { return new Bo(this.value.clone === void 0 ? this.value : this.value.clone()) } }, Pf = class extends ur { constructor(e, t, n = 1) { super(e, t); this.meshPerAttribute = n } copy(e) { return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this } clone(e) { let t = super.clone(e); return t.meshPerAttribute = this.meshPerAttribute, t } toJSON(e) { let t = super.toJSON(e); return t.isInstancedInterleavedBuffer = !0, t.meshPerAttribute = this.meshPerAttribute, t } }; Pf.prototype.isInstancedInterleavedBuffer = !0; var Rf = class { constructor(e, t, n, i, r) { this.buffer = e, this.type = t, this.itemSize = n, this.elementSize = i, this.count = r, this.version = 0 } set needsUpdate(e) { e === !0 && this.version++ } setBuffer(e) { return this.buffer = e, this } setType(e, t) { return this.type = e, this.elementSize = t, this } setItemSize(e) { return this.itemSize = e, this } setCount(e) { return this.count = e, this } }; Rf.prototype.isGLBufferAttribute = !0; var Dl = class { constructor(e, t, n = 0, i = 1 / 0) { this.ray = new Wn(e, t), this.near = n, this.far = i, this.camera = null, this.layers = new Pa, this.params = { Mesh: {}, Line: { threshold: 1 }, LOD: {}, Points: { threshold: 1 }, Sprite: {} } } set(e, t) { this.ray.set(e, t) } setFromCamera(e, t) { t && t.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(t.matrixWorld), this.ray.direction.set(e.x, e.y, .5).unproject(t).sub(this.ray.origin).normalize(), this.camera = t) : t && t.isOrthographicCamera ? (this.ray.origin.set(e.x, e.y, (t.near + t.far) / (t.near - t.far)).unproject(t), this.ray.direction.set(0, 0, -1).transformDirection(t.matrixWorld), this.camera = t) : console.error("THREE.Raycaster: Unsupported camera type: " + t.type) } intersectObject(e, t = !1, n = []) { return Fl(e, this, n, t), n.sort(If), n } intersectObjects(e, t = !1, n = []) { for (let i = 0, r = e.length; i < r; i++)Fl(e[i], this, n, t); return n.sort(If), n } }; function If(s, e) { return s.distance - e.distance } function Fl(s, e, t, n) { if (s.layers.test(e.layers) && s.raycast(e, t), n === !0) { let i = s.children; for (let r = 0, o = i.length; r < o; r++)Fl(i[r], e, t, !0) } } var Df = new Y, vr = class { constructor(e = new Y(1 / 0, 1 / 0), t = new Y(-1 / 0, -1 / 0)) { this.min = e, this.max = t } set(e, t) { return this.min.copy(e), this.max.copy(t), this } setFromPoints(e) { this.makeEmpty(); for (let t = 0, n = e.length; t < n; t++)this.expandByPoint(e[t]); return this } setFromCenterAndSize(e, t) { let n = Df.copy(t).multiplyScalar(.5); return this.min.copy(e).sub(n), this.max.copy(e).add(n), this } clone() { return new this.constructor().copy(this) } copy(e) { return this.min.copy(e.min), this.max.copy(e.max), this } makeEmpty() { return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this } isEmpty() { return this.max.x < this.min.x || this.max.y < this.min.y } getCenter(e) { return this.isEmpty() ? e.set(0, 0) : e.addVectors(this.min, this.max).multiplyScalar(.5) } getSize(e) { return this.isEmpty() ? e.set(0, 0) : e.subVectors(this.max, this.min) } expandByPoint(e) { return this.min.min(e), this.max.max(e), this } expandByVector(e) { return this.min.sub(e), this.max.add(e), this } expandByScalar(e) { return this.min.addScalar(-e), this.max.addScalar(e), this } containsPoint(e) { return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y) } containsBox(e) { return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y } getParameter(e, t) { return t.set((e.x - this.min.x) / (this.max.x - this.min.x), (e.y - this.min.y) / (this.max.y - this.min.y)) } intersectsBox(e) { return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y) } clampPoint(e, t) { return t.copy(e).clamp(this.min, this.max) } distanceToPoint(e) { return Df.copy(e).clamp(this.min, this.max).sub(e).length() } intersect(e) { return this.min.max(e.min), this.max.min(e.max), this } union(e) { return this.min.min(e.min), this.max.max(e.max), this } translate(e) { return this.min.add(e), this.max.add(e), this } equals(e) { return e.min.equals(this.min) && e.max.equals(this.max) } }; vr.prototype.isBox2 = !0; var Ff = new A, No = new A, Bf = class { constructor(e = new A, t = new A) { this.start = e, this.end = t } set(e, t) { return this.start.copy(e), this.end.copy(t), this } copy(e) { return this.start.copy(e.start), this.end.copy(e.end), this } getCenter(e) { return e.addVectors(this.start, this.end).multiplyScalar(.5) } delta(e) { return e.subVectors(this.end, this.start) } distanceSq() { return this.start.distanceToSquared(this.end) } distance() { return this.start.distanceTo(this.end) } at(e, t) { return this.delta(t).multiplyScalar(e).add(this.start) } closestPointToPointParameter(e, t) { Ff.subVectors(e, this.start), No.subVectors(this.end, this.start); let n = No.dot(No), r = No.dot(Ff) / n; return t && (r = Tt(r, 0, 1)), r } closestPointToPoint(e, t, n) { let i = this.closestPointToPointParameter(e, t); return this.delta(n).multiplyScalar(i).add(this.start) } applyMatrix4(e) { return this.start.applyMatrix4(e), this.end.applyMatrix4(e), this } equals(e) { return e.start.equals(this.start) && e.end.equals(this.end) } clone() { return new this.constructor().copy(this) } }, Nf = class extends Ne { constructor(e) { super(); this.material = e, this.render = function () { }, this.hasPositions = !1, this.hasNormals = !1, this.hasColors = !1, this.hasUvs = !1, this.positionArray = null, this.normalArray = null, this.colorArray = null, this.uvArray = null, this.count = 0 } }; Nf.prototype.isImmediateRenderObject = !0; var ei = new A, zo = new xe, Bl = new xe, zf = class extends vo { constructor(e) { let t = Of(e), n = new We, i = [], r = [], o = new se(0, 0, 1), a = new se(0, 1, 0); for (let c = 0; c < t.length; c++) { let u = t[c]; u.parent && u.parent.isBone && (i.push(0, 0, 0), i.push(0, 0, 0), r.push(o.r, o.g, o.b), r.push(a.r, a.g, a.b)) } n.setAttribute("position", new et(i, 3)), n.setAttribute("color", new et(r, 3)); let l = new gr({ vertexColors: !0, depthTest: !1, depthWrite: !1, toneMapped: !1, transparent: !0 }); super(n, l); this.type = "SkeletonHelper", this.isSkeletonHelper = !0, this.root = e, this.bones = t, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1 } updateMatrixWorld(e) { let t = this.bones, n = this.geometry, i = n.getAttribute("position"); Bl.copy(this.root.matrixWorld).invert(); for (let r = 0, o = 0; r < t.length; r++) { let a = t[r]; a.parent && a.parent.isBone && (zo.multiplyMatrices(Bl, a.matrixWorld), ei.setFromMatrixPosition(zo), i.setXYZ(o, ei.x, ei.y, ei.z), zo.multiplyMatrices(Bl, a.parent.matrixWorld), ei.setFromMatrixPosition(zo), i.setXYZ(o + 1, ei.x, ei.y, ei.z), o += 2) } n.getAttribute("position").needsUpdate = !0, super.updateMatrixWorld(e) } }; function Of(s) { let e = []; s && s.isBone && e.push(s); for (let t = 0; t < s.children.length; t++)e.push.apply(e, Of(s.children[t])); return e } var Uf = class extends vo { constructor(e = 10, t = 10, n = 4473924, i = 8947848) { n = new se(n), i = new se(i); let r = t / 2, o = e / t, a = e / 2, l = [], c = []; for (let f = 0, d = 0, g = -a; f <= t; f++, g += o) { l.push(-a, 0, g, a, 0, g), l.push(g, 0, -a, g, 0, a); let m = f === r ? n : i; m.toArray(c, d), d += 3, m.toArray(c, d), d += 3, m.toArray(c, d), d += 3, m.toArray(c, d), d += 3 } let u = new We; u.setAttribute("position", new et(l, 3)), u.setAttribute("color", new et(c, 3)); let h = new gr({ vertexColors: !0, toneMapped: !1 }); super(u, h); this.type = "GridHelper" } }; var Ky = new Float32Array(1), rb = new Int32Array(Ky.buffer); Bt.create = function (s, e) { return console.log("THREE.Curve.create() has been deprecated"), s.prototype = Object.create(Bt.prototype), s.prototype.constructor = s, s.prototype.getPoint = e, s }; hs.prototype.fromPoints = function (s) { return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."), this.setFromPoints(s) }; Uf.prototype.setColors = function () { console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.") }; zf.prototype.update = function () { console.error("THREE.SkeletonHelper: update() no longer needs to be called.") }; En.prototype.extractUrlBase = function (s) { return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."), mf.extractUrlBase(s) }; En.Handlers = { add: function () { console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.") }, get: function () { console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.") } }; vr.prototype.center = function (s) { return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."), this.getCenter(s) }; vr.prototype.empty = function () { return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."), this.isEmpty() }; vr.prototype.isIntersectionBox = function (s) { return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(s) }; vr.prototype.size = function (s) { return console.warn("THREE.Box2: .size() has been renamed to .getSize()."), this.getSize(s) }; kt.prototype.center = function (s) { return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."), this.getCenter(s) }; kt.prototype.empty = function () { return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."), this.isEmpty() }; kt.prototype.isIntersectionBox = function (s) { return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(s) }; kt.prototype.isIntersectionSphere = function (s) { return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(s) }; kt.prototype.size = function (s) { return console.warn("THREE.Box3: .size() has been renamed to .getSize()."), this.getSize(s) }; wi.prototype.empty = function () { return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."), this.isEmpty() }; Yr.prototype.setFromMatrix = function (s) { return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."), this.setFromProjectionMatrix(s) }; Bf.prototype.center = function (s) { return console.warn("THREE.Line3: .center() has been renamed to .getCenter()."), this.getCenter(s) }; st.prototype.flattenToArrayOffset = function (s, e) { return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(s, e) }; st.prototype.multiplyVector3 = function (s) { return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."), s.applyMatrix3(this) }; st.prototype.multiplyVector3Array = function () { console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.") }; st.prototype.applyToBufferAttribute = function (s) { return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."), s.applyMatrix3(this) }; st.prototype.applyToVector3Array = function () { console.error("THREE.Matrix3: .applyToVector3Array() has been removed.") }; st.prototype.getInverse = function (s) { return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."), this.copy(s).invert() }; xe.prototype.extractPosition = function (s) { return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."), this.copyPosition(s) }; xe.prototype.flattenToArrayOffset = function (s, e) { return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."), this.toArray(s, e) }; xe.prototype.getPosition = function () { return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."), new A().setFromMatrixColumn(this, 3) }; xe.prototype.setRotationFromQuaternion = function (s) { return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."), this.makeRotationFromQuaternion(s) }; xe.prototype.multiplyToArray = function () { console.warn("THREE.Matrix4: .multiplyToArray() has been removed.") }; xe.prototype.multiplyVector3 = function (s) { return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."), s.applyMatrix4(this) }; xe.prototype.multiplyVector4 = function (s) { return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."), s.applyMatrix4(this) }; xe.prototype.multiplyVector3Array = function () { console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.") }; xe.prototype.rotateAxis = function (s) { console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."), s.transformDirection(this) }; xe.prototype.crossVector = function (s) { return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."), s.applyMatrix4(this) }; xe.prototype.translate = function () { console.error("THREE.Matrix4: .translate() has been removed.") }; xe.prototype.rotateX = function () { console.error("THREE.Matrix4: .rotateX() has been removed.") }; xe.prototype.rotateY = function () { console.error("THREE.Matrix4: .rotateY() has been removed.") }; xe.prototype.rotateZ = function () { console.error("THREE.Matrix4: .rotateZ() has been removed.") }; xe.prototype.rotateByAxis = function () { console.error("THREE.Matrix4: .rotateByAxis() has been removed.") }; xe.prototype.applyToBufferAttribute = function (s) { return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."), s.applyMatrix4(this) }; xe.prototype.applyToVector3Array = function () { console.error("THREE.Matrix4: .applyToVector3Array() has been removed.") }; xe.prototype.makeFrustum = function (s, e, t, n, i, r) { return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."), this.makePerspective(s, e, n, t, i, r) }; xe.prototype.getInverse = function (s) { return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."), this.copy(s).invert() }; an.prototype.isIntersectionLine = function (s) { return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."), this.intersectsLine(s) }; vt.prototype.multiplyVector3 = function (s) { return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."), s.applyQuaternion(this) }; vt.prototype.inverse = function () { return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."), this.invert() }; Wn.prototype.isIntersectionBox = function (s) { return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."), this.intersectsBox(s) }; Wn.prototype.isIntersectionPlane = function (s) { return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."), this.intersectsPlane(s) }; Wn.prototype.isIntersectionSphere = function (s) { return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."), this.intersectsSphere(s) }; Je.prototype.area = function () { return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."), this.getArea() }; Je.prototype.barycoordFromPoint = function (s, e) { return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), this.getBarycoord(s, e) }; Je.prototype.midpoint = function (s) { return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."), this.getMidpoint(s) }; Je.prototypenormal = function (s) { return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), this.getNormal(s) }; Je.prototype.plane = function (s) { return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."), this.getPlane(s) }; Je.barycoordFromPoint = function (s, e, t, n, i) { return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."), Je.getBarycoord(s, e, t, n, i) }; Je.normal = function (s, e, t, n) { return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."), Je.getNormal(s, e, t, n) }; Ei.prototype.extractAllPoints = function (s) { return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."), this.extractPoints(s) }; Ei.prototype.extrude = function (s) { return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."), new Mi(this, s) }; Ei.prototype.makeGeometry = function (s) { return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."), new Po(this, s) }; Y.prototype.fromAttribute = function (s, e, t) { return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(s, e, t) }; Y.prototype.distanceToManhattan = function (s) { return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(s) }; Y.prototype.lengthManhattan = function () { return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength() }; A.prototype.setEulerFromRotationMatrix = function () { console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.") }; A.prototype.setEulerFromQuaternion = function () { console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.") }; A.prototype.getPositionFromMatrix = function (s) { return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."), this.setFromMatrixPosition(s) }; A.prototype.getScaleFromMatrix = function (s) { return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."), this.setFromMatrixScale(s) }; A.prototype.getColumnFromMatrix = function (s, e) { return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."), this.setFromMatrixColumn(e, s) }; A.prototype.applyProjection = function (s) { return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."), this.applyMatrix4(s) }; A.prototype.fromAttribute = function (s, e, t) { return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(s, e, t) }; A.prototype.distanceToManhattan = function (s) { return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."), this.manhattanDistanceTo(s) }; A.prototype.lengthManhattan = function () { return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength() }; Oe.prototype.fromAttribute = function (s, e, t) { return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."), this.fromBufferAttribute(s, e, t) }; Oe.prototype.lengthManhattan = function () { return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."), this.manhattanLength() }; Ne.prototype.getChildByName = function (s) { return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."), this.getObjectByName(s) }; Ne.prototype.renderDepth = function () { console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.") }; Ne.prototype.translate = function (s, e) { return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."), this.translateOnAxis(e, s) }; Ne.prototype.getWorldRotation = function () { console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.") }; Ne.prototype.applyMatrix = function (s) { return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."), this.applyMatrix4(s) }; Object.defineProperties(Ne.prototype, { eulerOrder: { get: function () { return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), this.rotation.order }, set: function (s) { console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."), this.rotation.order = s } }, useQuaternion: { get: function () { console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.") }, set: function () { console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.") } } }); tt.prototype.setDrawMode = function () { console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.") }; Object.defineProperties(tt.prototype, { drawMode: { get: function () { return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."), Am }, set: function () { console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.") } } }); al.prototype.initBones = function () { console.error("THREE.SkinnedMesh: initBones() has been removed.") }; ft.prototype.setLens = function (s, e) { console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."), e !== void 0 && (this.filmGauge = e), this.setFocalLength(s) }; Object.defineProperties(rn.prototype, { onlyShadow: { set: function () { console.warn("THREE.Light: .onlyShadow has been removed.") } }, shadowCameraFov: { set: function (s) { console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."), this.shadow.camera.fov = s } }, shadowCameraLeft: { set: function (s) { console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."), this.shadow.camera.left = s } }, shadowCameraRight: { set: function (s) { console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."), this.shadow.camera.right = s } }, shadowCameraTop: { set: function (s) { console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."), this.shadow.camera.top = s } }, shadowCameraBottom: { set: function (s) { console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."), this.shadow.camera.bottom = s } }, shadowCameraNear: { set: function (s) { console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."), this.shadow.camera.near = s } }, shadowCameraFar: { set: function (s) { console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."), this.shadow.camera.far = s } }, shadowCameraVisible: { set: function () { console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.") } }, shadowBias: { set: function (s) { console.warn("THREE.Light: .shadowBias is now .shadow.bias."), this.shadow.bias = s } }, shadowDarkness: { set: function () { console.warn("THREE.Light: .shadowDarkness has been removed.") } }, shadowMapWidth: { set: function (s) { console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."), this.shadow.mapSize.width = s } }, shadowMapHeight: { set: function (s) { console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."), this.shadow.mapSize.height = s } } }); Object.defineProperties(Qe.prototype, { length: { get: function () { return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."), this.array.length } }, dynamic: { get: function () { return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."), this.usage === Us }, set: function () { console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."), this.setUsage(Us) } } }); Qe.prototype.setDynamic = function (s) { return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."), this.setUsage(s === !0 ? Us : Hr), this }; Qe.prototype.copyIndicesArray = function () { console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.") }, Qe.prototype.setArray = function () { console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers") }; We.prototype.addIndex = function (s) { console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."), this.setIndex(s) }; We.prototype.addAttribute = function (s, e) { return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."), !(e && e.isBufferAttribute) && !(e && e.isInterleavedBufferAttribute) ? (console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."), this.setAttribute(s, new Qe(arguments[1], arguments[2]))) : s === "index" ? (console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."), this.setIndex(e), this) : this.setAttribute(s, e) }; We.prototype.addDrawCall = function (s, e, t) { t !== void 0 && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."), console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."), this.addGroup(s, e) }; We.prototype.clearDrawCalls = function () { console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."), this.clearGroups() }; We.prototype.computeOffsets = function () { console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.") }; We.prototype.removeAttribute = function (s) { return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."), this.deleteAttribute(s) }; We.prototype.applyMatrix = function (s) { return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."), this.applyMatrix4(s) }; Object.defineProperties(We.prototype, { drawcalls: { get: function () { return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."), this.groups } }, offsets: { get: function () { return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."), this.groups } } }); ur.prototype.setDynamic = function (s) { return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."), this.setUsage(s === !0 ? Us : Hr), this }; ur.prototype.setArray = function () { console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers") }; Mi.prototype.getArrays = function () { console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.") }; Mi.prototype.addShapeList = function () { console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.") }; Mi.prototype.addShape = function () { console.error("THREE.ExtrudeGeometry: .addShape() has been removed.") }; $r.prototype.dispose = function () { console.error("THREE.Scene: .dispose() has been removed.") }; Bo.prototype.onUpdate = function () { return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."), this }; Object.defineProperties(ht.prototype, { wrapAround: { get: function () { console.warn("THREE.Material: .wrapAround has been removed.") }, set: function () { console.warn("THREE.Material: .wrapAround has been removed.") } }, overdraw: { get: function () { console.warn("THREE.Material: .overdraw has been removed.") }, set: function () { console.warn("THREE.Material: .overdraw has been removed.") } }, wrapRGB: { get: function () { return console.warn("THREE.Material: .wrapRGB has been removed."), new se } }, shading: { get: function () { console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.") }, set: function (s) { console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."), this.flatShading = s === Uc } }, stencilMask: { get: function () { return console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead."), this.stencilFuncMask }, set: function (s) { console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead."), this.stencilFuncMask = s } }, vertexTangents: { get: function () { console.warn("THREE." + this.type + ": .vertexTangents has been removed.") }, set: function () { console.warn("THREE." + this.type + ": .vertexTangents has been removed.") } } }); Object.defineProperties(Gt.prototype, { derivatives: { get: function () { return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), this.extensions.derivatives }, set: function (s) { console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."), this.extensions.derivatives = s } } }); ke.prototype.clearTarget = function (s, e, t, n) { console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."), this.setRenderTarget(s), this.clear(e, t, n) }; ke.prototype.animate = function (s) { console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."), this.setAnimationLoop(s) }; ke.prototype.getCurrentRenderTarget = function () { return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."), this.getRenderTarget() }; ke.prototype.getMaxAnisotropy = function () { return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."), this.capabilities.getMaxAnisotropy() }; ke.prototype.getPrecision = function () { return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."), this.capabilities.precision }; ke.prototype.resetGLState = function () { return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."), this.state.reset() }; ke.prototype.supportsFloatTextures = function () { return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."), this.extensions.get("OES_texture_float") }; ke.prototype.supportsHalfFloatTextures = function () { return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."), this.extensions.get("OES_texture_half_float") }; ke.prototype.supportsStandardDerivatives = function () { return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."), this.extensions.get("OES_standard_derivatives") }; ke.prototype.supportsCompressedTextureS3TC = function () { return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."), this.extensions.get("WEBGL_compressed_texture_s3tc") }; ke.prototype.supportsCompressedTexturePVRTC = function () { return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."), this.extensions.get("WEBGL_compressed_texture_pvrtc") }; ke.prototype.supportsBlendMinMax = function () { return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."), this.extensions.get("EXT_blend_minmax") }; ke.prototype.supportsVertexTextures = function () { return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."), this.capabilities.vertexTextures }; ke.prototype.supportsInstancedArrays = function () { return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."), this.extensions.get("ANGLE_instanced_arrays") }; ke.prototype.enableScissorTest = function (s) { console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."), this.setScissorTest(s) }; ke.prototype.initMaterial = function () { console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.") }; ke.prototype.addPrePlugin = function () { console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.") }; ke.prototype.addPostPlugin = function () { console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.") }; ke.prototype.updateShadowMap = function () { console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.") }; ke.prototype.setFaceCulling = function () { console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.") }; ke.prototype.allocTextureUnit = function () { console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.") }; ke.prototype.setTexture = function () { console.warn("THREE.WebGLRenderer: .setTexture() has been removed.") }; ke.prototype.setTexture2D = function () { console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.") }; ke.prototype.setTextureCube = function () { console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.") }; ke.prototype.getActiveMipMapLevel = function () { return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."), this.getActiveMipmapLevel() }; Object.defineProperties(ke.prototype, { shadowMapEnabled: { get: function () { return this.shadowMap.enabled }, set: function (s) { console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."), this.shadowMap.enabled = s } }, shadowMapType: { get: function () { return this.shadowMap.type }, set: function (s) { console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."), this.shadowMap.type = s } }, shadowMapCullFace: { get: function () { console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.") }, set: function () { console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.") } }, context: { get: function () { return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."), this.getContext() } }, vr: { get: function () { return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"), this.xr } }, gammaInput: { get: function () { return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."), !1 }, set: function () { console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.") } }, gammaOutput: { get: function () { return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."), !1 }, set: function (s) { console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."), this.outputEncoding = s === !0 ? Gi : St } }, toneMappingWhitePoint: { get: function () { return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."), 1 }, set: function () { console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.") } } }); Object.defineProperties(sh.prototype, { cullFace: { get: function () { console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.") }, set: function () { console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.") } }, renderReverseSided: { get: function () { console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.") }, set: function () { console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.") } }, renderSingleSided: { get: function () { console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.") }, set: function () { console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.") } } }); Object.defineProperties($t.prototype, { wrapS: { get: function () { return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), this.texture.wrapS }, set: function (s) { console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."), this.texture.wrapS = s } }, wrapT: { get: function () { return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), this.texture.wrapT }, set: function (s) { console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."), this.texture.wrapT = s } }, magFilter: { get: function () { return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), this.texture.magFilter }, set: function (s) { console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."), this.texture.magFilter = s } }, minFilter: { get: function () { return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), this.texture.minFilter }, set: function (s) { console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."), this.texture.minFilter = s } }, anisotropy: { get: function () { return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), this.texture.anisotropy }, set: function (s) { console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."), this.texture.anisotropy = s } }, offset: { get: function () { return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), this.texture.offset }, set: function (s) { console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."), this.texture.offset = s } }, repeat: { get: function () { return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), this.texture.repeat }, set: function (s) { console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."), this.texture.repeat = s } }, format: { get: function () { return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), this.texture.format }, set: function (s) { console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."), this.texture.format = s } }, type: { get: function () { return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), this.texture.type }, set: function (s) { console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."), this.texture.type = s } }, generateMipmaps: { get: function () { return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), this.texture.generateMipmaps }, set: function (s) { console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."), this.texture.generateMipmaps = s } } }); Mf.prototype.load = function (s) { console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead."); let e = this; return new vf().load(s, function (n) { e.setBuffer(n) }), this }; Sf.prototype.getData = function () { return console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData()."), this.getFrequencyData() }; ro.prototype.updateCubeMap = function (s, e) { return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."), this.update(s, e) }; ro.prototype.clear = function (s, e, t, n) { return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."), this.renderTarget.clear(s, e, t, n) }; xi.crossOrigin = void 0; xi.loadTexture = function (s, e, t, n) { console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead."); let i = new Ro; i.setCrossOrigin(this.crossOrigin); let r = i.load(s, t, void 0, n); return e && (r.mapping = e), r }; xi.loadTextureCube = function (s, e, t, n) { console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead."); let i = new nf; i.setCrossOrigin(this.crossOrigin); let r = i.load(s, t, void 0, n); return e && (r.mapping = e), r }; xi.loadCompressedTexture = function () { console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.") }; xi.loadCompressedTextureCube = function () { console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.") }; typeof __THREE_DEVTOOLS__ != "undefined" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: { revision: Nc } })); typeof window != "undefined" && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = Nc); var ev = []; for (let s = 0; s < 256; s++)ev[s] = (s < 16 ? "0" : "") + s.toString(16); var ob = Math.PI / 180, ab = 180 / Math.PI; function Oo(s, e, t) { return Math.max(e, Math.min(t, s)) } function An(s) { if (s === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return s } function kf(s, e) { s.prototype = Object.create(e.prototype), s.prototype.constructor = s, s.__proto__ = e } var bt = { autoSleep: 120, force3D: "auto", nullTargetWarn: 1, units: { lineHeight: "" } }, wr = { duration: .5, overwrite: !1, delay: 0 }, Nl, fn = 1e8, He = 1 / fn, zl = Math.PI * 2, tv = zl / 4, nv = 0, Hf = Math.sqrt, iv = Math.cos, rv = Math.sin, dt = function (e) { return typeof e == "string" }, lt = function (e) { return typeof e == "function" }, Ln = function (e) { return typeof e == "number" }, Uo = function (e) { return typeof e == "undefined" }, Cn = function (e) { return typeof e == "object" }, Et = function (e) { return e !== !1 }, Gf = function () { return typeof window != "undefined" }, Vf = function (e) { return lt(e) || dt(e) }, Wf = typeof ArrayBuffer == "function" && ArrayBuffer.isView || function () { }, Nt = Array.isArray, Ol = /(?:-?\.?\d|\.)+/gi, Ul = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g, Ai = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g, kl = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi, Hl = /[+-]=-?[.\d]+/, qf = /[^,'"\[\]\s]+/gi, sv = /[\d.+\-=]+(?:e[-+]\d*)*/i, Ye, dn, Gl, Vl, zt = {}, ko = {}, Xf, Yf = function (e) { return (ko = Mr(e, zt)) && Yt }, Ho = function (e, t) { return console.warn("Invalid property", e, "set to", t, "Missing plugin? gsap.registerPlugin()") }, Go = function (e, t) { return !t && console.warn(e) }, Zf = function (e, t) { return e && (zt[e] = t) && ko && (ko[e] = t) || zt }, br = function () { return 0 }, Wl = {}, ti = [], ql = {}, Jf, At = {}, Xl = {}, jf = 30, Vo = [], Yl = "", Zl = function (e) { var t = e[0], n, i; if (Cn(t) || lt(t) || (e = [e]), !(n = (t._gsap || {}).harness)) { for (i = Vo.length; i-- && !Vo[i].targetTest(t);); n = Vo[i] } for (i = e.length; i--;)e[i] && (e[i]._gsap || (e[i]._gsap = new sc(e[i], n))) || e.splice(i, 1); return e }, ni = function (e) { return e._gsap || Zl(qt(e))[0]._gsap }, Jl = function (e, t, n) { return (n = e[t]) && lt(n) ? e[t]() : Uo(n) && e.getAttribute && e.getAttribute(t) || n }, Lt = function (e, t) { return (e = e.split(",")).forEach(t) || e }, Pe = function (e) { return Math.round(e * 1e5) / 1e5 || 0 }, ov = function (e, t) { for (var n = t.length, i = 0; e.indexOf(t[i]) < 0 && ++i < n;); return i < n }, Wo = function () { var e = ti.length, t = ti.slice(0), n, i; for (ql = {}, ti.length = 0, n = 0; n < e; n++)i = t[n], i && i._lazy && (i.render(i._lazy[0], i._lazy[1], !0)._lazy = 0) }, $f = function (e, t, n, i) { ti.length && Wo(), e.render(t, n, i), ti.length && Wo() }, Qf = function (e) { var t = parseFloat(e); return (t || t === 0) && (e + "").match(qf).length < 2 ? t : dt(e) ? e.trim() : e }, Kf = function (e) { return e }, Vt = function (e, t) { for (var n in t) n in e || (e[n] = t[n]); return e }, av = function (e, t) { for (var n in t) n in e || n === "duration" || n === "ease" || (e[n] = t[n]) }, Mr = function (e, t) { for (var n in t) e[n] = t[n]; return e }, ed = function s(e, t) { for (var n in t) n !== "__proto__" && n !== "constructor" && n !== "prototype" && (e[n] = Cn(t[n]) ? s(e[n] || (e[n] = {}), t[n]) : t[n]); return e }, jl = function (e, t) { var n = {}, i; for (i in e) i in t || (n[i] = e[i]); return n }, qo = function (e) { var t = e.parent || Ye, n = e.keyframes ? av : Vt; if (Et(e.inherit)) for (; t;)n(e, t.vars.defaults), t = t.parent || t._dp; return e }, lv = function (e, t) { for (var n = e.length, i = n === t.length; i && n-- && e[n] === t[n];); return n < 0 }, cv = function (e, t, n, i, r) { n === void 0 && (n = "_first"), i === void 0 && (i = "_last"); var o = e[i], a; if (r) for (a = t[r]; o && o[r] > a;)o = o._prev; return o ? (t._next = o._next, o._next = t) : (t._next = e[n], e[n] = t), t._next ? t._next._prev = t : e[i] = t, t._prev = o, t.parent = t._dp = e, t }, Xo = function (e, t, n, i) { n === void 0 && (n = "_first"), i === void 0 && (i = "_last"); var r = t._prev, o = t._next; r ? r._next = o : e[n] === t && (e[n] = o), o ? o._prev = r : e[i] === t && (e[i] = r), t._next = t._prev = t.parent = null }, ii = function (e, t) { e.parent && (!t || e.parent.autoRemoveChildren) && e.parent.remove(e), e._act = 0 }, Li = function (e, t) { if (e && (!t || t._end > e._dur || t._start < 0)) for (var n = e; n;)n._dirty = 1, n = n.parent; return e }, uv = function (e) { for (var t = e.parent; t && t.parent;)t._dirty = 1, t.totalDuration(), t = t.parent; return e }, hv = function s(e) { return !e || e._ts && s(e.parent) }, td = function (e) { return e._repeat ? Sr(e._tTime, e = e.duration() + e._rDelay) * e : 0 }, Sr = function (e, t) { var n = Math.floor(e /= t); return e && n === e ? n - 1 : n }, Yo = function (e, t) { return (e - t._start) * t._ts + (t._ts >= 0 ? 0 : t._dirty ? t.totalDuration() : t._tDur) }, $l = function (e) { return e._end = Pe(e._start + (e._tDur / Math.abs(e._ts || e._rts || He) || 0)) }, nd = function (e, t) { var n = e._dp; return n && n.smoothChildTiming && e._ts && (e._start = Pe(n._time - (e._ts > 0 ? t / e._ts : ((e._dirty ? e.totalDuration() : e._tDur) - t) / -e._ts)), $l(e), n._dirty || Li(n, e)), e }, id = function (e, t) { var n; if ((t._time || t._initted && !t._dur) && (n = Yo(e.rawTime(), t), (!t._dur || ps(0, t.totalDuration(), n) - t._tTime > He) && t.render(n, !0)), Li(e, t)._dp && e._initted && e._time >= e._dur && e._ts) { if (e._dur < e.duration()) for (n = e; n._dp;)n.rawTime() >= 0 && n.totalTime(n._tTime), n = n._dp; e._zTime = -He } }, pn = function (e, t, n, i) { return t.parent && ii(t), t._start = Pe((Ln(n) ? n : n || e !== Ye ? Wt(e, n, t) : e._time) + t._delay), t._end = Pe(t._start + (t.totalDuration() / Math.abs(t.timeScale()) || 0)), cv(e, t, "_first", "_last", e._sort ? "_start" : 0), Ql(t) || (e._recent = t), i || id(e, t), e }, rd = function (e, t) { return (zt.ScrollTrigger || Ho("scrollTrigger", t)) && zt.ScrollTrigger.create(t, e) }, sd = function (e, t, n, i) { if (Fv(e, t), !e._initted) return 1; if (!n && e._pt && (e._dur && e.vars.lazy !== !1 || !e._dur && e.vars.lazy) && Jf !== Ot.frame) return ti.push(e), e._lazy = [t, i], 1 }, fv = function s(e) { var t = e.parent; return t && t._ts && t._initted && !t._lock && (t.rawTime() < 0 || s(t)) }, Ql = function (e) { var t = e.data; return t === "isFromStart" || t === "isStart" }, dv = function (e, t, n, i) { var r = e.ratio, o = t < 0 || !t && (!e._start && fv(e) && !(!e._initted && Ql(e)) || (e._ts < 0 || e._dp._ts < 0) && !Ql(e)) ? 0 : 1, a = e._rDelay, l = 0, c, u, h; if (a && e._repeat && (l = ps(0, e._tDur, t), u = Sr(l, a), h = Sr(e._tTime, a), e._yoyo && u & 1 && (o = 1 - o), u !== h && (r = 1 - o, e.vars.repeatRefresh && e._initted && e.invalidate())), o !== r || i || e._zTime === He || !t && e._zTime) { if (!e._initted && sd(e, t, i, n)) return; for (h = e._zTime, e._zTime = t || (n ? He : 0), n || (n = t && !h), e.ratio = o, e._from && (o = 1 - o), e._time = 0, e._tTime = l, c = e._pt; c;)c.r(o, c.d), c = c._next; e._startAt && t < 0 && e._startAt.render(t, !0, !0), e._onUpdate && !n && Xt(e, "onUpdate"), l && e._repeat && !n && e.parent && Xt(e, "onRepeat"), (t >= e._tDur || t < 0) && e.ratio === o && (o && ii(e, 1), n || (Xt(e, o ? "onComplete" : "onReverseComplete", !0), e._prom && e._prom())) } else e._zTime || (e._zTime = t) }, pv = function (e, t, n) { var i; if (n > t) for (i = e._first; i && i._start <= n;) { if (!i._dur && i.data === "isPause" && i._start > t) return i; i = i._next } else for (i = e._last; i && i._start >= n;) { if (!i._dur && i.data === "isPause" && i._start < t) return i; i = i._prev } }, Tr = function (e, t, n, i) { var r = e._repeat, o = Pe(t) || 0, a = e._tTime / e._tDur; return a && !i && (e._time *= o / e._dur), e._dur = o, e._tDur = r ? r < 0 ? 1e10 : Pe(o * (r + 1) + e._rDelay * r) : o, a && !i ? nd(e, e._tTime = e._tDur * a) : e.parent && $l(e), n || Li(e.parent, e), e }, od = function (e) { return e instanceof yt ? Li(e) : Tr(e, e._dur) }, mv = { _start: 0, endTime: br, totalDuration: br }, Wt = function s(e, t, n) { var i = e.labels, r = e._recent || mv, o = e.duration() >= fn ? r.endTime(!1) : e._dur, a, l, c; return dt(t) && (isNaN(t) || t in i) ? (l = t.charAt(0), c = t.substr(-1) === "%", a = t.indexOf("="), l === "<" || l === ">" ? (a >= 0 && (t = t.replace(/=/, "")), (l === "<" ? r._start : r.endTime(r._repeat >= 0)) + (parseFloat(t.substr(1)) || 0) * (c ? (a < 0 ? r : n).totalDuration() / 100 : 1)) : a < 0 ? (t in i || (i[t] = o), i[t]) : (l = parseFloat(t.charAt(a - 1) + t.substr(a + 1)), c && n && (l = l / 100 * (Nt(n) ? n[0] : n).totalDuration()), a > 1 ? s(e, t.substr(0, a - 1), n) + l : o + l)) : t == null ? o : +t }, ds = function (e, t, n) { var i = Ln(t[1]), r = (i ? 2 : 1) + (e < 2 ? 0 : 1), o = t[r], a, l; if (i && (o.duration = t[1]), o.parent = n, e) { for (a = o, l = n; l && !("immediateRender" in a);)a = l.vars.defaults || {}, l = Et(l.vars.inherit) && l.parent; o.immediateRender = Et(a.immediateRender), e < 2 ? o.runBackwards = 1 : o.startAt = t[r - 1] } return new nt(t[0], o, t[r + 1]) }, ri = function (e, t) { return e || e === 0 ? t(e) : t }, ps = function (e, t, n) { return n < e ? e : n > t ? t : n }, Ct = function (e) { if (typeof e != "string") return ""; var t = sv.exec(e); return t ? e.substr(t.index + t[0].length) : "" }, gv = function (e, t, n) { return ri(n, function (i) { return ps(e, t, i) }) }, Kl = [].slice, ad = function (e, t) { return e && Cn(e) && "length" in e && (!t && !e.length || e.length - 1 in e && Cn(e[0])) && !e.nodeType && e !== dn }, _v = function (e, t, n) { return n === void 0 && (n = []), e.forEach(function (i) { var r; return dt(i) && !t || ad(i, 1) ? (r = n).push.apply(r, qt(i)) : n.push(i) }) || n }, qt = function (e, t, n) { return dt(e) && !n && (Gl || !Ar()) ? Kl.call((t || Vl).querySelectorAll(e), 0) : Nt(e) ? _v(e, n) : ad(e) ? Kl.call(e, 0) : e ? [e] : [] }, xv = function (e) { return e = qt(e)[0] || Go("Invalid scope") || {}, function (t) { var n = e.current || e.nativeElement || e; return qt(t, n.querySelectorAll ? n : n === e ? Go("Invalid scope") || Vl.createElement("div") : e) } }, ld = function (e) { return e.sort(function () { return .5 - Math.random() }) }, cd = function (e) { if (lt(e)) return e; var t = Cn(e) ? e : { each: e }, n = Lr(t.ease), i = t.from || 0, r = parseFloat(t.base) || 0, o = {}, a = i > 0 && i < 1, l = isNaN(i) || a, c = t.axis, u = i, h = i; return dt(i) ? u = h = { center: .5, edges: .5, end: 1 }[i] || 0 : !a && l && (u = i[0], h = i[1]), function (f, d, g) { var m = (g || t).length, x = o[m], p, _, w, v, b, T, y, C, R; if (!x) { if (R = t.grid === "auto" ? 0 : (t.grid || [1, fn])[1], !R) { for (y = -fn; y < (y = g[R++].getBoundingClientRect().left) && R < m;); R-- } for (x = o[m] = [], p = l ? Math.min(R, m) * u - .5 : i % R, _ = l ? m * h / R - .5 : i / R | 0, y = 0, C = fn, T = 0; T < m; T++)w = T % R - p, v = _ - (T / R | 0), x[T] = b = c ? Math.abs(c === "y" ? v : w) : Hf(w * w + v * v), b > y && (y = b), b < C && (C = b); i === "random" && ld(x), x.max = y - C, x.min = C, x.v = m = (parseFloat(t.amount) || parseFloat(t.each) * (R > m ? m - 1 : c ? c === "y" ? m / R : R : Math.max(R, m / R)) || 0) * (i === "edges" ? -1 : 1), x.b = m < 0 ? r - m : r, x.u = Ct(t.amount || t.each) || 0, n = n && m < 0 ? xd(n) : n } return m = (x[f] - x.min) / x.max || 0, Pe(x.b + (n ? n(m) : m) * x.v) + x.u } }, ec = function (e) { var t = e < 1 ? Math.pow(10, (e + "").length - 2) : 1; return function (n) { var i = Math.round(parseFloat(n) / e) * e * t; return (i - i % 1) / t + (Ln(n) ? 0 : Ct(n)) } }, ud = function (e, t) { var n = Nt(e), i, r; return !n && Cn(e) && (i = n = e.radius || fn, e.values ? (e = qt(e.values), (r = !Ln(e[0])) && (i *= i)) : e = ec(e.increment)), ri(t, n ? lt(e) ? function (o) { return r = e(o), Math.abs(r - o) <= i ? r : o } : function (o) { for (var a = parseFloat(r ? o.x : o), l = parseFloat(r ? o.y : 0), c = fn, u = 0, h = e.length, f, d; h--;)r ? (f = e[h].x - a, d = e[h].y - l, f = f * f + d * d) : f = Math.abs(e[h] - a), f < c && (c = f, u = h); return u = !i || c <= i ? e[u] : o, r || u === o || Ln(o) ? u : u + Ct(o) } : ec(e)) }, hd = function (e, t, n, i) { return ri(Nt(e) ? !t : n === !0 ? !!(n = 0) : !i, function () { return Nt(e) ? e[~~(Math.random() * e.length)] : (n = n || 1e-5) && (i = n < 1 ? Math.pow(10, (n + "").length - 2) : 1) && Math.floor(Math.round((e - n / 2 + Math.random() * (t - e + n * .99)) / n) * n * i) / i }) }, yv = function () { for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)t[n] = arguments[n]; return function (i) { return t.reduce(function (r, o) { return o(r) }, i) } }, vv = function (e, t) { return function (n) { return e(parseFloat(n)) + (t || Ct(n)) } }, wv = function (e, t, n) { return dd(e, t, 0, 1, n) }, fd = function (e, t, n) { return ri(n, function (i) { return e[~~t(i)] }) }, bv = function s(e, t, n) { var i = t - e; return Nt(e) ? fd(e, s(0, e.length), t) : ri(n, function (r) { return (i + (r - e) % i) % i + e }) }, Mv = function s(e, t, n) { var i = t - e, r = i * 2; return Nt(e) ? fd(e, s(0, e.length - 1), t) : ri(n, function (o) { return o = (r + (o - e) % r) % r || 0, e + (o > i ? r - o : o) }) }, ms = function (e) { for (var t = 0, n = "", i, r, o, a; ~(i = e.indexOf("random(", t));)o = e.indexOf(")", i), a = e.charAt(i + 7) === "[", r = e.substr(i + 7, o - i - 7).match(a ? qf : Ol), n += e.substr(t, i - t) + hd(a ? r : +r[0], a ? 0 : +r[1], +r[2] || 1e-5), t = o + 1; return n + e.substr(t, e.length - t) }, dd = function (e, t, n, i, r) { var o = t - e, a = i - n; return ri(r, function (l) { return n + ((l - e) / o * a || 0) }) }, Sv = function s(e, t, n, i) { var r = isNaN(e + t) ? 0 : function (d) { return (1 - d) * e + d * t }; if (!r) { var o = dt(e), a = {}, l, c, u, h, f; if (n === !0 && (i = 1) && (n = null), o) e = { p: e }, t = { p: t }; else if (Nt(e) && !Nt(t)) { for (u = [], h = e.length, f = h - 2, c = 1; c < h; c++)u.push(s(e[c - 1], e[c])); h--, r = function (g) { g *= h; var m = Math.min(f, ~~g); return u[m](g - m) }, n = t } else i || (e = Mr(Nt(e) ? [] : {}, e)); if (!u) { for (l in t) oc.call(a, e, l, "get", t[l]); r = function (g) { return uc(g, a) || (o ? e.p : e) } } } return ri(n, r) }, pd = function (e, t, n) { var i = e.labels, r = fn, o, a, l; for (o in i) a = i[o] - t, a < 0 == !!n && a && r > (a = Math.abs(a)) && (l = o, r = a); return l }, Xt = function (e, t, n) { var i = e.vars, r = i[t], o, a; if (!!r) return o = i[t + "Params"], a = i.callbackScope || e, n && ti.length && Wo(), o ? r.apply(a, o) : r.call(a) }, gs = function (e) { return ii(e), e.scrollTrigger && e.scrollTrigger.kill(!1), e.progress() < 1 && Xt(e, "onInterrupt"), e }, Er, Tv = function (e) { e = !e.name && e.default || e; var t = e.name, n = lt(e), i = t && !n && e.init ? function () { this._props = [] } : e, r = { init: br, render: uc, add: oc, kill: Hv, modifier: kv, rawVars: 0 }, o = { targetTest: 0, get: 0, getSetter: Jo, aliases: {}, register: 0 }; if (Ar(), e !== i) { if (At[t]) return; Vt(i, Vt(jl(e, r), o)), Mr(i.prototype, Mr(r, jl(e, o))), At[i.prop = t] = i, e.targetTest && (Vo.push(i), Wl[t] = 1), t = (t === "css" ? "CSS" : t.charAt(0).toUpperCase() + t.substr(1)) + "Plugin" } Zf(t, i), e.register && e.register(Yt, i, Mt) }, Ge = 255, _s = { aqua: [0, Ge, Ge], lime: [0, Ge, 0], silver: [192, 192, 192], black: [0, 0, 0], maroon: [128, 0, 0], teal: [0, 128, 128], blue: [0, 0, Ge], navy: [0, 0, 128], white: [Ge, Ge, Ge], olive: [128, 128, 0], yellow: [Ge, Ge, 0], orange: [Ge, 165, 0], gray: [128, 128, 128], purple: [128, 0, 128], green: [0, 128, 0], red: [Ge, 0, 0], pink: [Ge, 192, 203], cyan: [0, Ge, Ge], transparent: [Ge, Ge, Ge, 0] }, tc = function (e, t, n) { return e = e < 0 ? e + 1 : e > 1 ? e - 1 : e, (e * 6 < 1 ? t + (n - t) * e * 6 : e < .5 ? n : e * 3 < 2 ? t + (n - t) * (2 / 3 - e) * 6 : t) * Ge + .5 | 0 }, md = function (e, t, n) { var i = e ? Ln(e) ? [e >> 16, e >> 8 & Ge, e & Ge] : 0 : _s.black, r, o, a, l, c, u, h, f, d, g; if (!i) { if (e.substr(-1) === "," && (e = e.substr(0, e.length - 1)), _s[e]) i = _s[e]; else if (e.charAt(0) === "#") { if (e.length < 6 && (r = e.charAt(1), o = e.charAt(2), a = e.charAt(3), e = "#" + r + r + o + o + a + a + (e.length === 5 ? e.charAt(4) + e.charAt(4) : "")), e.length === 9) return i = parseInt(e.substr(1, 6), 16), [i >> 16, i >> 8 & Ge, i & Ge, parseInt(e.substr(7), 16) / 255]; e = parseInt(e.substr(1), 16), i = [e >> 16, e >> 8 & Ge, e & Ge] } else if (e.substr(0, 3) === "hsl") { if (i = g = e.match(Ol), !t) l = +i[0] % 360 / 360, c = +i[1] / 100, u = +i[2] / 100, o = u <= .5 ? u * (c + 1) : u + c - u * c, r = u * 2 - o, i.length > 3 && (i[3] *= 1), i[0] = tc(l + 1 / 3, r, o), i[1] = tc(l, r, o), i[2] = tc(l - 1 / 3, r, o); else if (~e.indexOf("=")) return i = e.match(Ul), n && i.length < 4 && (i[3] = 1), i } else i = e.match(Ol) || _s.transparent; i = i.map(Number) } return t && !g && (r = i[0] / Ge, o = i[1] / Ge, a = i[2] / Ge, h = Math.max(r, o, a), f = Math.min(r, o, a), u = (h + f) / 2, h === f ? l = c = 0 : (d = h - f, c = u > .5 ? d / (2 - h - f) : d / (h + f), l = h === r ? (o - a) / d + (o < a ? 6 : 0) : h === o ? (a - r) / d + 2 : (r - o) / d + 4, l *= 60), i[0] = ~~(l + .5), i[1] = ~~(c * 100 + .5), i[2] = ~~(u * 100 + .5)), n && i.length < 4 && (i[3] = 1), i }, gd = function (e) { var t = [], n = [], i = -1; return e.split(Pn).forEach(function (r) { var o = r.match(Ai) || []; t.push.apply(t, o), n.push(i += o.length + 1) }), t.c = n, t }, _d = function (e, t, n) { var i = "", r = (e + i).match(Pn), o = t ? "hsla(" : "rgba(", a = 0, l, c, u, h; if (!r) return e; if (r = r.map(function (f) { return (f = md(f, t, 1)) && o + (t ? f[0] + "," + f[1] + "%," + f[2] + "%," + f[3] : f.join(",")) + ")" }), n && (u = gd(e), l = n.c, l.join(i) !== u.c.join(i))) for (c = e.replace(Pn, "1").split(Ai), h = c.length - 1; a < h; a++)i += c[a] + (~l.indexOf(a) ? r.shift() || o + "0,0,0,0)" : (u.length ? u : r.length ? r : n).shift()); if (!c) for (c = e.split(Pn), h = c.length - 1; a < h; a++)i += c[a] + r[a]; return i + c[h] }, Pn = function () { var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b", e; for (e in _s) s += "|" + e + "\\b"; return new RegExp(s + ")", "gi") }(), Ev = /hsl[a]?\(/, nc = function (e) { var t = e.join(" "), n; if (Pn.lastIndex = 0, Pn.test(t)) return n = Ev.test(t), e[1] = _d(e[1], n), e[0] = _d(e[0], n, gd(e[1])), !0 }, Zo, Ot = function () { var s = Date.now, e = 500, t = 33, n = s(), i = n, r = 1e3 / 240, o = r, a = [], l, c, u, h, f, d, g = function m(x) { var p = s() - i, _ = x === !0, w, v, b, T; if (p > e && (n += p - t), i += p, b = i - n, w = b - o, (w > 0 || _) && (T = ++h.frame, f = b - h.time * 1e3, h.time = b = b / 1e3, o += w + (w >= r ? 4 : r - w), v = 1), _ || (l = c(m)), v) for (d = 0; d < a.length; d++)a[d](b, f, T, x) }; return h = { time: 0, frame: 0, tick: function () { g(!0) }, deltaRatio: function (x) { return f / (1e3 / (x || 60)) }, wake: function () { Xf && (!Gl && Gf() && (dn = Gl = window, Vl = dn.document || {}, zt.gsap = Yt, (dn.gsapVersions || (dn.gsapVersions = [])).push(Yt.version), Yf(ko || dn.GreenSockGlobals || !dn.gsap && dn || {}), u = dn.requestAnimationFrame), l && h.sleep(), c = u || function (x) { return setTimeout(x, o - h.time * 1e3 + 1 | 0) }, Zo = 1, g(2)) }, sleep: function () { (u ? dn.cancelAnimationFrame : clearTimeout)(l), Zo = 0, c = br }, lagSmoothing: function (x, p) { e = x || 1 / He, t = Math.min(p, e, 0) }, fps: function (x) { r = 1e3 / (x || 240), o = h.time * 1e3 + r }, add: function (x) { a.indexOf(x) < 0 && a.push(x), Ar() }, remove: function (x) { var p; ~(p = a.indexOf(x)) && a.splice(p, 1) && d >= p && d-- }, _listeners: a }, h }(), Ar = function () { return !Zo && Ot.wake() }, De = {}, Av = /^[\d.\-M][\d.\-,\s]/, Lv = /["']/g, Cv = function (e) { for (var t = {}, n = e.substr(1, e.length - 3).split(":"), i = n[0], r = 1, o = n.length, a, l, c; r < o; r++)l = n[r], a = r !== o - 1 ? l.lastIndexOf(",") : l.length, c = l.substr(0, a), t[i] = isNaN(c) ? c.replace(Lv, "").trim() : +c, i = l.substr(a + 1).trim(); return t }, Pv = function (e) { var t = e.indexOf("(") + 1, n = e.indexOf(")"), i = e.indexOf("(", t); return e.substring(t, ~i && i < n ? e.indexOf(")", n + 1) : n) }, Rv = function (e) { var t = (e + "").split("("), n = De[t[0]]; return n && t.length > 1 && n.config ? n.config.apply(null, ~e.indexOf("{") ? [Cv(t[1])] : Pv(e).split(",").map(Qf)) : De._CE && Av.test(e) ? De._CE("", e) : n }, xd = function (e) { return function (t) { return 1 - e(1 - t) } }, yd = function s(e, t) { for (var n = e._first, i; n;)n instanceof yt ? s(n, t) : n.vars.yoyoEase && (!n._yoyo || !n._repeat) && n._yoyo !== t && (n.timeline ? s(n.timeline, t) : (i = n._ease, n._ease = n._yEase, n._yEase = i, n._yoyo = t)), n = n._next }, Lr = function (e, t) { return e && (lt(e) ? e : De[e] || Rv(e)) || t }, Ci = function (e, t, n, i) { n === void 0 && (n = function (l) { return 1 - t(1 - l) }), i === void 0 && (i = function (l) { return l < .5 ? t(l * 2) / 2 : 1 - t((1 - l) * 2) / 2 }); var r = { easeIn: t, easeOut: n, easeInOut: i }, o; return Lt(e, function (a) { De[a] = zt[a] = r, De[o = a.toLowerCase()] = n; for (var l in r) De[o + (l === "easeIn" ? ".in" : l === "easeOut" ? ".out" : ".inOut")] = De[a + "." + l] = r[l] }), r }, vd = function (e) { return function (t) { return t < .5 ? (1 - e(1 - t * 2)) / 2 : .5 + e((t - .5) * 2) / 2 } }, ic = function s(e, t, n) { var i = t >= 1 ? t : 1, r = (n || (e ? .3 : .45)) / (t < 1 ? t : 1), o = r / zl * (Math.asin(1 / i) || 0), a = function (u) { return u === 1 ? 1 : i * Math.pow(2, -10 * u) * rv((u - o) * r) + 1 }, l = e === "out" ? a : e === "in" ? function (c) { return 1 - a(1 - c) } : vd(a); return r = zl / r, l.config = function (c, u) { return s(e, c, u) }, l }, rc = function s(e, t) { t === void 0 && (t = 1.70158); var n = function (o) { return o ? --o * o * ((t + 1) * o + t) + 1 : 0 }, i = e === "out" ? n : e === "in" ? function (r) { return 1 - n(1 - r) } : vd(n); return i.config = function (r) { return s(e, r) }, i }; Lt("Linear,Quad,Cubic,Quart,Quint,Strong", function (s, e) { var t = e < 5 ? e + 1 : e; Ci(s + ",Power" + (t - 1), e ? function (n) { return Math.pow(n, t) } : function (n) { return n }, function (n) { return 1 - Math.pow(1 - n, t) }, function (n) { return n < .5 ? Math.pow(n * 2, t) / 2 : 1 - Math.pow((1 - n) * 2, t) / 2 }) }); De.Linear.easeNone = De.none = De.Linear.easeIn; Ci("Elastic", ic("in"), ic("out"), ic()); (function (s, e) { var t = 1 / e, n = 2 * t, i = 2.5 * t, r = function (a) { return a < t ? s * a * a : a < n ? s * Math.pow(a - 1.5 / e, 2) + .75 : a < i ? s * (a -= 2.25 / e) * a + .9375 : s * Math.pow(a - 2.625 / e, 2) + .984375 }; Ci("Bounce", function (o) { return 1 - r(1 - o) }, r) })(7.5625, 2.75); Ci("Expo", function (s) { return s ? Math.pow(2, 10 * (s - 1)) : 0 }); Ci("Circ", function (s) { return -(Hf(1 - s * s) - 1) }); Ci("Sine", function (s) { return s === 1 ? 1 : -iv(s * tv) + 1 }); Ci("Back", rc("in"), rc("out"), rc()); De.SteppedEase = De.steps = zt.SteppedEase = { config: function (e, t) { e === void 0 && (e = 1); var n = 1 / e, i = e + (t ? 0 : 1), r = t ? 1 : 0, o = 1 - He; return function (a) { return ((i * ps(0, o, a) | 0) + r) * n } } }; wr.ease = De["quad.out"]; Lt("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (s) { return Yl += s + "," + s + "Params," }); var sc = function (e, t) { this.id = nv++, e._gsap = this, this.target = e, this.harness = t, this.get = t ? t.get : Jl, this.set = t ? t.getSetter : Jo }, xs = function () { function s(t) { this.vars = t, this._delay = +t.delay || 0, (this._repeat = t.repeat === 1 / 0 ? -2 : t.repeat || 0) && (this._rDelay = t.repeatDelay || 0, this._yoyo = !!t.yoyo || !!t.yoyoEase), this._ts = 1, Tr(this, +t.duration, 1, 1), this.data = t.data, Zo || Ot.wake() } var e = s.prototype; return e.delay = function (n) { return n || n === 0 ? (this.parent && this.parent.smoothChildTiming && this.startTime(this._start + n - this._delay), this._delay = n, this) : this._delay }, e.duration = function (n) { return arguments.length ? this.totalDuration(this._repeat > 0 ? n + (n + this._rDelay) * this._repeat : n) : this.totalDuration() && this._dur }, e.totalDuration = function (n) { return arguments.length ? (this._dirty = 0, Tr(this, this._repeat < 0 ? n : (n - this._repeat * this._rDelay) / (this._repeat + 1))) : this._tDur }, e.totalTime = function (n, i) { if (Ar(), !arguments.length) return this._tTime; var r = this._dp; if (r && r.smoothChildTiming && this._ts) { for (nd(this, n), !r._dp || r.parent || id(r, this); r.parent;)r.parent._time !== r._start + (r._ts >= 0 ? r._tTime / r._ts : (r.totalDuration() - r._tTime) / -r._ts) && r.totalTime(r._tTime, !0), r = r.parent; !this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && n < this._tDur || this._ts < 0 && n > 0 || !this._tDur && !n) && pn(this._dp, this, this._start - this._delay) } return (this._tTime !== n || !this._dur && !i || this._initted && Math.abs(this._zTime) === He || !n && !this._initted && (this.add || this._ptLookup)) && (this._ts || (this._pTime = n), $f(this, n, i)), this }, e.time = function (n, i) { return arguments.length ? this.totalTime(Math.min(this.totalDuration(), n + td(this)) % (this._dur + this._rDelay) || (n ? this._dur : 0), i) : this._time }, e.totalProgress = function (n, i) { return arguments.length ? this.totalTime(this.totalDuration() * n, i) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio }, e.progress = function (n, i) { return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - n : n) + td(this), i) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio }, e.iteration = function (n, i) { var r = this.duration() + this._rDelay; return arguments.length ? this.totalTime(this._time + (n - 1) * r, i) : this._repeat ? Sr(this._tTime, r) + 1 : 1 }, e.timeScale = function (n) { if (!arguments.length) return this._rts === -He ? 0 : this._rts; if (this._rts === n) return this; var i = this.parent && this._ts ? Yo(this.parent._time, this) : this._tTime; return this._rts = +n || 0, this._ts = this._ps || n === -He ? 0 : this._rts, uv(this.totalTime(ps(-this._delay, this._tDur, i), !0)) }, e.paused = function (n) { return arguments.length ? (this._ps !== n && (this._ps = n, n ? (this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()), this._ts = this._act = 0) : (Ar(), this._ts = this._rts, this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== He && (this._tTime -= He)))), this) : this._ps }, e.startTime = function (n) { if (arguments.length) { this._start = n; var i = this.parent || this._dp; return i && (i._sort || !this.parent) && pn(i, this, n - this._delay), this } return this._start }, e.endTime = function (n) { return this._start + (Et(n) ? this.totalDuration() : this.duration()) / Math.abs(this._ts) }, e.rawTime = function (n) { var i = this.parent || this._dp; return i ? n && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : this._ts ? Yo(i.rawTime(n), this) : this._tTime : this._tTime }, e.globalTime = function (n) { for (var i = this, r = arguments.length ? n : i.rawTime(); i;)r = i._start + r / (i._ts || 1), i = i._dp; return r }, e.repeat = function (n) { return arguments.length ? (this._repeat = n === 1 / 0 ? -2 : n, od(this)) : this._repeat === -2 ? 1 / 0 : this._repeat }, e.repeatDelay = function (n) { if (arguments.length) { var i = this._time; return this._rDelay = n, od(this), i ? this.time(i) : this } return this._rDelay }, e.yoyo = function (n) { return arguments.length ? (this._yoyo = n, this) : this._yoyo }, e.seek = function (n, i) { return this.totalTime(Wt(this, n), Et(i)) }, e.restart = function (n, i) { return this.play().totalTime(n ? -this._delay : 0, Et(i)) }, e.play = function (n, i) { return n != null && this.seek(n, i), this.reversed(!1).paused(!1) }, e.reverse = function (n, i) { return n != null && this.seek(n || this.totalDuration(), i), this.reversed(!0).paused(!1) }, e.pause = function (n, i) { return n != null && this.seek(n, i), this.paused(!0) }, e.resume = function () { return this.paused(!1) }, e.reversed = function (n) { return arguments.length ? (!!n !== this.reversed() && this.timeScale(-this._rts || (n ? -He : 0)), this) : this._rts < 0 }, e.invalidate = function () { return this._initted = this._act = 0, this._zTime = -He, this }, e.isActive = function () { var n = this.parent || this._dp, i = this._start, r; return !!(!n || this._ts && this._initted && n.isActive() && (r = n.rawTime(!0)) >= i && r < this.endTime(!0) - He) }, e.eventCallback = function (n, i, r) { var o = this.vars; return arguments.length > 1 ? (i ? (o[n] = i, r && (o[n + "Params"] = r), n === "onUpdate" && (this._onUpdate = i)) : delete o[n], this) : o[n] }, e.then = function (n) { var i = this; return new Promise(function (r) { var o = lt(n) ? n : Kf, a = function () { var c = i.then; i.then = null, lt(o) && (o = o(i)) && (o.then || o === i) && (i.then = c), r(o), i.then = c }; i._initted && i.totalProgress() === 1 && i._ts >= 0 || !i._tTime && i._ts < 0 ? a() : i._prom = a }) }, e.kill = function () { gs(this) }, s }(); Vt(xs.prototype, { _time: 0, _start: 0, _end: 0, _tTime: 0, _tDur: 0, _dirty: 0, _repeat: 0, _yoyo: !1, parent: null, _initted: !1, _rDelay: 0, _ts: 1, _dp: 0, ratio: 0, _zTime: -He, _prom: 0, _ps: !1, _rts: 1 }); var yt = function (s) { kf(e, s); function e(n, i) { var r; return n === void 0 && (n = {}), r = s.call(this, n) || this, r.labels = {}, r.smoothChildTiming = !!n.smoothChildTiming, r.autoRemoveChildren = !!n.autoRemoveChildren, r._sort = Et(n.sortChildren), Ye && pn(n.parent || Ye, An(r), i), n.reversed && r.reverse(), n.paused && r.paused(!0), n.scrollTrigger && rd(An(r), n.scrollTrigger), r } var t = e.prototype; return t.to = function (i, r, o) { return ds(0, arguments, this), this }, t.from = function (i, r, o) { return ds(1, arguments, this), this }, t.fromTo = function (i, r, o, a) { return ds(2, arguments, this), this }, t.set = function (i, r, o) { return r.duration = 0, r.parent = this, qo(r).repeatDelay || (r.repeat = 0), r.immediateRender = !!r.immediateRender, new nt(i, r, Wt(this, o), 1), this }, t.call = function (i, r, o) { return pn(this, nt.delayedCall(0, i, r), o) }, t.staggerTo = function (i, r, o, a, l, c, u) { return o.duration = r, o.stagger = o.stagger || a, o.onComplete = c, o.onCompleteParams = u, o.parent = this, new nt(i, o, Wt(this, l)), this }, t.staggerFrom = function (i, r, o, a, l, c, u) { return o.runBackwards = 1, qo(o).immediateRender = Et(o.immediateRender), this.staggerTo(i, r, o, a, l, c, u) }, t.staggerFromTo = function (i, r, o, a, l, c, u, h) { return a.startAt = o, qo(a).immediateRender = Et(a.immediateRender), this.staggerTo(i, r, a, l, c, u, h) }, t.render = function (i, r, o) { var a = this._time, l = this._dirty ? this.totalDuration() : this._tDur, c = this._dur, u = this !== Ye && i > l - He && i >= 0 ? l : i < He ? 0 : i, h = this._zTime < 0 != i < 0 && (this._initted || !c), f, d, g, m, x, p, _, w, v, b, T, y; if (u !== this._tTime || o || h) { if (a !== this._time && c && (u += this._time - a, i += this._time - a), f = u, v = this._start, w = this._ts, p = !w, h && (c || (a = this._zTime), (i || !r) && (this._zTime = i)), this._repeat) { if (T = this._yoyo, x = c + this._rDelay, this._repeat < -1 && i < 0) return this.totalTime(x * 100 + i, r, o); if (f = Pe(u % x), u === l ? (m = this._repeat, f = c) : (m = ~~(u / x), m && m === u / x && (f = c, m--), f > c && (f = c)), b = Sr(this._tTime, x), !a && this._tTime && b !== m && (b = m), T && m & 1 && (f = c - f, y = 1), m !== b && !this._lock) { var C = T && b & 1, R = C === (T && m & 1); if (m < b && (C = !C), a = C ? 0 : c, this._lock = 1, this.render(a || (y ? 0 : Pe(m * x)), r, !c)._lock = 0, this._tTime = u, !r && this.parent && Xt(this, "onRepeat"), this.vars.repeatRefresh && !y && (this.invalidate()._lock = 1), a && a !== this._time || p !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) return this; if (c = this._dur, l = this._tDur, R && (this._lock = 2, a = C ? c : -1e-4, this.render(a, !0), this.vars.repeatRefresh && !y && this.invalidate()), this._lock = 0, !this._ts && !p) return this; yd(this, y) } } if (this._hasPause && !this._forcing && this._lock < 2 && (_ = pv(this, Pe(a), Pe(f)), _ && (u -= f - (f = _._start))), this._tTime = u, this._time = f, this._act = !w, this._initted || (this._onUpdate = this.vars.onUpdate, this._initted = 1, this._zTime = i, a = 0), !a && f && !r && (Xt(this, "onStart"), this._tTime !== u)) return this; if (f >= a && i >= 0) for (d = this._first; d;) { if (g = d._next, (d._act || f >= d._start) && d._ts && _ !== d) { if (d.parent !== this) return this.render(i, r, o); if (d.render(d._ts > 0 ? (f - d._start) * d._ts : (d._dirty ? d.totalDuration() : d._tDur) + (f - d._start) * d._ts, r, o), f !== this._time || !this._ts && !p) { _ = 0, g && (u += this._zTime = -He); break } } d = g } else { d = this._last; for (var D = i < 0 ? i : f; d;) { if (g = d._prev, (d._act || D <= d._end) && d._ts && _ !== d) { if (d.parent !== this) return this.render(i, r, o); if (d.render(d._ts > 0 ? (D - d._start) * d._ts : (d._dirty ? d.totalDuration() : d._tDur) + (D - d._start) * d._ts, r, o), f !== this._time || !this._ts && !p) { _ = 0, g && (u += this._zTime = D ? -He : He); break } } d = g } } if (_ && !r && (this.pause(), _.render(f >= a ? 0 : -He)._zTime = f >= a ? 1 : -1, this._ts)) return this._start = v, $l(this), this.render(i, r, o); this._onUpdate && !r && Xt(this, "onUpdate", !0), (u === l && l >= this.totalDuration() || !u && a) && (v === this._start || Math.abs(w) !== Math.abs(this._ts)) && (this._lock || ((i || !c) && (u === l && this._ts > 0 || !u && this._ts < 0) && ii(this, 1), !r && !(i < 0 && !a) && (u || a || !l) && (Xt(this, u === l && i >= 0 ? "onComplete" : "onReverseComplete", !0), this._prom && !(u < l && this.timeScale() > 0) && this._prom()))) } return this }, t.add = function (i, r) { var o = this; if (Ln(r) || (r = Wt(this, r, i)), !(i instanceof xs)) { if (Nt(i)) return i.forEach(function (a) { return o.add(a, r) }), this; if (dt(i)) return this.addLabel(i, r); if (lt(i)) i = nt.delayedCall(0, i); else return this } return this !== i ? pn(this, i, r) : this }, t.getChildren = function (i, r, o, a) { i === void 0 && (i = !0), r === void 0 && (r = !0), o === void 0 && (o = !0), a === void 0 && (a = -fn); for (var l = [], c = this._first; c;)c._start >= a && (c instanceof nt ? r && l.push(c) : (o && l.push(c), i && l.push.apply(l, c.getChildren(!0, r, o)))), c = c._next; return l }, t.getById = function (i) { for (var r = this.getChildren(1, 1, 1), o = r.length; o--;)if (r[o].vars.id === i) return r[o] }, t.remove = function (i) { return dt(i) ? this.removeLabel(i) : lt(i) ? this.killTweensOf(i) : (Xo(this, i), i === this._recent && (this._recent = this._last), Li(this)) }, t.totalTime = function (i, r) { return arguments.length ? (this._forcing = 1, !this._dp && this._ts && (this._start = Pe(Ot.time - (this._ts > 0 ? i / this._ts : (this.totalDuration() - i) / -this._ts))), s.prototype.totalTime.call(this, i, r), this._forcing = 0, this) : this._tTime }, t.addLabel = function (i, r) { return this.labels[i] = Wt(this, r), this }, t.removeLabel = function (i) { return delete this.labels[i], this }, t.addPause = function (i, r, o) { var a = nt.delayedCall(0, r || br, o); return a.data = "isPause", this._hasPause = 1, pn(this, a, Wt(this, i)) }, t.removePause = function (i) { var r = this._first; for (i = Wt(this, i); r;)r._start === i && r.data === "isPause" && ii(r), r = r._next }, t.killTweensOf = function (i, r, o) { for (var a = this.getTweensOf(i, o), l = a.length; l--;)si !== a[l] && a[l].kill(i, r); return this }, t.getTweensOf = function (i, r) { for (var o = [], a = qt(i), l = this._first, c = Ln(r), u; l;)l instanceof nt ? ov(l._targets, a) && (c ? (!si || l._initted && l._ts) && l.globalTime(0) <= r && l.globalTime(l.totalDuration()) > r : !r || l.isActive()) && o.push(l) : (u = l.getTweensOf(a, r)).length && o.push.apply(o, u), l = l._next; return o }, t.tweenTo = function (i, r) { r = r || {}; var o = this, a = Wt(o, i), l = r, c = l.startAt, u = l.onStart, h = l.onStartParams, f = l.immediateRender, d, g = nt.to(o, Vt({ ease: r.ease || "none", lazy: !1, immediateRender: !1, time: a, overwrite: "auto", duration: r.duration || Math.abs((a - (c && "time" in c ? c.time : o._time)) / o.timeScale()) || He, onStart: function () { if (o.pause(), !d) { var x = r.duration || Math.abs((a - (c && "time" in c ? c.time : o._time)) / o.timeScale()); g._dur !== x && Tr(g, x, 0, 1).render(g._time, !0, !0), d = 1 } u && u.apply(g, h || []) } }, r)); return f ? g.render(0) : g }, t.tweenFromTo = function (i, r, o) { return this.tweenTo(r, Vt({ startAt: { time: Wt(this, i) } }, o)) }, t.recent = function () { return this._recent }, t.nextLabel = function (i) { return i === void 0 && (i = this._time), pd(this, Wt(this, i)) }, t.previousLabel = function (i) { return i === void 0 && (i = this._time), pd(this, Wt(this, i), 1) }, t.currentLabel = function (i) { return arguments.length ? this.seek(i, !0) : this.previousLabel(this._time + He) }, t.shiftChildren = function (i, r, o) { o === void 0 && (o = 0); for (var a = this._first, l = this.labels, c; a;)a._start >= o && (a._start += i, a._end += i), a = a._next; if (r) for (c in l) l[c] >= o && (l[c] += i); return Li(this) }, t.invalidate = function () { var i = this._first; for (this._lock = 0; i;)i.invalidate(), i = i._next; return s.prototype.invalidate.call(this) }, t.clear = function (i) { i === void 0 && (i = !0); for (var r = this._first, o; r;)o = r._next, this.remove(r), r = o; return this._dp && (this._time = this._tTime = this._pTime = 0), i && (this.labels = {}), Li(this) }, t.totalDuration = function (i) { var r = 0, o = this, a = o._last, l = fn, c, u, h; if (arguments.length) return o.timeScale((o._repeat < 0 ? o.duration() : o.totalDuration()) / (o.reversed() ? -i : i)); if (o._dirty) { for (h = o.parent; a;)c = a._prev, a._dirty && a.totalDuration(), u = a._start, u > l && o._sort && a._ts && !o._lock ? (o._lock = 1, pn(o, a, u - a._delay, 1)._lock = 0) : l = u, u < 0 && a._ts && (r -= u, (!h && !o._dp || h && h.smoothChildTiming) && (o._start += u / o._ts, o._time -= u, o._tTime -= u), o.shiftChildren(-u, !1, -1 / 0), l = 0), a._end > r && a._ts && (r = a._end), a = c; Tr(o, o === Ye && o._time > r ? o._time : r, 1, 1), o._dirty = 0 } return o._tDur }, e.updateRoot = function (i) { if (Ye._ts && ($f(Ye, Yo(i, Ye)), Jf = Ot.frame), Ot.frame >= jf) { jf += bt.autoSleep || 120; var r = Ye._first; if ((!r || !r._ts) && bt.autoSleep && Ot._listeners.length < 2) { for (; r && !r._ts;)r = r._next; r || Ot.sleep() } } }, e }(xs); Vt(yt.prototype, { _lock: 0, _hasPause: 0, _forcing: 0 }); var Iv = function (e, t, n, i, r, o, a) { var l = new Mt(this._pt, e, t, 0, 1, cc, null, r), c = 0, u = 0, h, f, d, g, m, x, p, _; for (l.b = n, l.e = i, n += "", i += "", (p = ~i.indexOf("random(")) && (i = ms(i)), o && (_ = [n, i], o(_, e, t), n = _[0], i = _[1]), f = n.match(kl) || []; h = kl.exec(i);)g = h[0], m = i.substring(c, h.index), d ? d = (d + 1) % 5 : m.substr(-5) === "rgba(" && (d = 1), g !== f[u++] && (x = parseFloat(f[u - 1]) || 0, l._pt = { _next: l._pt, p: m || u === 1 ? m : ",", s: x, c: g.charAt(1) === "=" ? parseFloat(g.substr(2)) * (g.charAt(0) === "-" ? -1 : 1) : parseFloat(g) - x, m: d && d < 4 ? Math.round : 0 }, c = kl.lastIndex); return l.c = c < i.length ? i.substring(c, i.length) : "", l.fp = a, (Hl.test(i) || p) && (l.e = 0), this._pt = l, l }, oc = function (e, t, n, i, r, o, a, l, c) { lt(i) && (i = i(r || 0, e, o)); var u = e[t], h = n !== "get" ? n : lt(u) ? c ? e[t.indexOf("set") || !lt(e["get" + t.substr(3)]) ? t : "get" + t.substr(3)](c) : e[t]() : u, f = lt(u) ? c ? zv : bd : lc, d; if (dt(i) && (~i.indexOf("random(") && (i = ms(i)), i.charAt(1) === "=" && (d = parseFloat(h) + parseFloat(i.substr(2)) * (i.charAt(0) === "-" ? -1 : 1) + (Ct(h) || 0), (d || d === 0) && (i = d))), h !== i) return !isNaN(h * i) && i !== "" ? (d = new Mt(this._pt, e, t, +h || 0, i - (h || 0), typeof u == "boolean" ? Uv : Md, 0, f), c && (d.fp = c), a && d.modifier(a, this, e), this._pt = d) : (!u && !(t in e) && Ho(t, i), Iv.call(this, e, t, h, i, f, l || bt.stringFilter, c)) }, Dv = function (e, t, n, i, r) { if (lt(e) && (e = ys(e, r, t, n, i)), !Cn(e) || e.style && e.nodeType || Nt(e) || Wf(e)) return dt(e) ? ys(e, r, t, n, i) : e; var o = {}, a; for (a in e) o[a] = ys(e[a], r, t, n, i); return o }, ac = function (e, t, n, i, r, o) { var a, l, c, u; if (At[e] && (a = new At[e]).init(r, a.rawVars ? t[e] : Dv(t[e], i, r, o, n), n, i, o) !== !1 && (n._pt = l = new Mt(n._pt, r, e, 0, 1, a.render, a, 0, a.priority), n !== Er)) for (c = n._ptLookup[n._targets.indexOf(r)], u = a._props.length; u--;)c[a._props[u]] = l; return a }, si, Fv = function s(e, t) { var n = e.vars, i = n.ease, r = n.startAt, o = n.immediateRender, a = n.lazy, l = n.onUpdate, c = n.onUpdateParams, u = n.callbackScope, h = n.runBackwards, f = n.yoyoEase, d = n.keyframes, g = n.autoRevert, m = e._dur, x = e._startAt, p = e._targets, _ = e.parent, w = _ && _.data === "nested" ? _.parent._targets : p, v = e._overwrite === "auto" && !Nl, b = e.timeline, T, y, C, R, D, L, $, z, F, U, N, k, Q; if (b && (!d || !i) && (i = "none"), e._ease = Lr(i, wr.ease), e._yEase = f ? xd(Lr(f === !0 ? i : f, wr.ease)) : 0, f && e._yoyo && !e._repeat && (f = e._yEase, e._yEase = e._ease, e._ease = f), e._from = !b && !!n.runBackwards, !b) { if (z = p[0] ? ni(p[0]).harness : 0, k = z && n[z.prop], T = jl(n, Wl), x && x.render(-1, !0).kill(), r) if (ii(e._startAt = nt.set(p, Vt({ data: "isStart", overwrite: !1, parent: _, immediateRender: !0, lazy: Et(a), startAt: null, delay: 0, onUpdate: l, onUpdateParams: c, callbackScope: u, stagger: 0 }, r))), t < 0 && !o && !g && e._startAt.render(-1, !0), o) { if (t > 0 && !g && (e._startAt = 0), m && t <= 0) { t && (e._zTime = t); return } } else g === !1 && (e._startAt = 0); else if (h && m) { if (x) !g && (e._startAt = 0); else if (t && (o = !1), C = Vt({ overwrite: !1, data: "isFromStart", lazy: o && Et(a), immediateRender: o, stagger: 0, parent: _ }, T), k && (C[z.prop] = k), ii(e._startAt = nt.set(p, C)), t < 0 && e._startAt.render(-1, !0), !o) s(e._startAt, He); else if (!t) return } for (e._pt = 0, a = m && Et(a) || a && !m, y = 0; y < p.length; y++) { if (D = p[y], $ = D._gsap || Zl(p)[y]._gsap, e._ptLookup[y] = U = {}, ql[$.id] && ti.length && Wo(), N = w === p ? y : w.indexOf(D), z && (F = new z).init(D, k || T, e, N, w) !== !1 && (e._pt = R = new Mt(e._pt, D, F.name, 0, 1, F.render, F, 0, F.priority), F._props.forEach(function (oe) { U[oe] = R }), F.priority && (L = 1)), !z || k) for (C in T) At[C] && (F = ac(C, T, e, N, D, w)) ? F.priority && (L = 1) : U[C] = R = oc.call(e, D, C, "get", T[C], N, w, 0, n.stringFilter); e._op && e._op[y] && e.kill(D, e._op[y]), v && e._pt && (si = e, Ye.killTweensOf(D, U, e.globalTime(0)), Q = !e.parent, si = 0), e._pt && a && (ql[$.id] = 1) } L && hc(e), e._onInit && e._onInit(e) } e._onUpdate = l, e._initted = (!e._op || e._pt) && !Q }, Bv = function (e, t) { var n = e[0] ? ni(e[0]).harness : 0, i = n && n.aliases, r, o, a, l; if (!i) return t; r = Mr({}, t); for (o in i) if (o in r) for (l = i[o].split(","), a = l.length; a--;)r[l[a]] = r[o]; return r }, ys = function (e, t, n, i, r) { return lt(e) ? e.call(t, n, i, r) : dt(e) && ~e.indexOf("random(") ? ms(e) : e }, wd = Yl + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase", Nv = (wd + ",id,stagger,delay,duration,paused,scrollTrigger").split(","), nt = function (s) { kf(e, s); function e(n, i, r, o) { var a; typeof i == "number" && (r.duration = i, i = r, r = null), a = s.call(this, o ? i : qo(i)) || this; var l = a.vars, c = l.duration, u = l.delay, h = l.immediateRender, f = l.stagger, d = l.overwrite, g = l.keyframes, m = l.defaults, x = l.scrollTrigger, p = l.yoyoEase, _ = i.parent || Ye, w = (Nt(n) || Wf(n) ? Ln(n[0]) : "length" in i) ? [n] : qt(n), v, b, T, y, C, R, D, L; if (a._targets = w.length ? Zl(w) : Go("GSAP target " + n + " not found. https://greensock.com", !bt.nullTargetWarn) || [], a._ptLookup = [], a._overwrite = d, g || f || Vf(c) || Vf(u)) { if (i = a.vars, v = a.timeline = new yt({ data: "nested", defaults: m || {} }), v.kill(), v.parent = v._dp = An(a), v._start = 0, g) Vt(v.vars.defaults, { ease: "none" }), f ? w.forEach(function ($, z) { return g.forEach(function (F, U) { return v.to($, F, U ? ">" : z * f) }) }) : g.forEach(function ($) { return v.to(w, $, ">") }); else { if (y = w.length, D = f ? cd(f) : br, Cn(f)) for (C in f) ~wd.indexOf(C) && (L || (L = {}), L[C] = f[C]); for (b = 0; b < y; b++) { T = {}; for (C in i) Nv.indexOf(C) < 0 && (T[C] = i[C]); T.stagger = 0, p && (T.yoyoEase = p), L && Mr(T, L), R = w[b], T.duration = +ys(c, An(a), b, R, w), T.delay = (+ys(u, An(a), b, R, w) || 0) - a._delay, !f && y === 1 && T.delay && (a._delay = u = T.delay, a._start += u, T.delay = 0), v.to(R, T, D(b, R, w)) } v.duration() ? c = u = 0 : a.timeline = 0 } c || a.duration(c = v.duration()) } else a.timeline = 0; return d === !0 && !Nl && (si = An(a), Ye.killTweensOf(w), si = 0), pn(_, An(a), r), i.reversed && a.reverse(), i.paused && a.paused(!0), (h || !c && !g && a._start === Pe(_._time) && Et(h) && hv(An(a)) && _.data !== "nested") && (a._tTime = -He, a.render(Math.max(0, -u))), x && rd(An(a), x), a } var t = e.prototype; return t.render = function (i, r, o) { var a = this._time, l = this._tDur, c = this._dur, u = i > l - He && i >= 0 ? l : i < He ? 0 : i, h, f, d, g, m, x, p, _, w; if (!c) dv(this, i, r, o); else if (u !== this._tTime || !i || o || !this._initted && this._tTime || this._startAt && this._zTime < 0 != i < 0) { if (h = u, _ = this.timeline, this._repeat) { if (g = c + this._rDelay, this._repeat < -1 && i < 0) return this.totalTime(g * 100 + i, r, o); if (h = Pe(u % g), u === l ? (d = this._repeat, h = c) : (d = ~~(u / g), d && d === u / g && (h = c, d--), h > c && (h = c)), x = this._yoyo && d & 1, x && (w = this._yEase, h = c - h), m = Sr(this._tTime, g), h === a && !o && this._initted) return this; d !== m && (_ && this._yEase && yd(_, x), this.vars.repeatRefresh && !x && !this._lock && (this._lock = o = 1, this.render(Pe(g * d), !0).invalidate()._lock = 0)) } if (!this._initted) { if (sd(this, i < 0 ? i : h, o, r)) return this._tTime = 0, this; if (c !== this._dur) return this.render(i, r, o) } if (this._tTime = u, this._time = h, !this._act && this._ts && (this._act = 1, this._lazy = 0), this.ratio = p = (w || this._ease)(h / c), this._from && (this.ratio = p = 1 - p), h && !a && !r && (Xt(this, "onStart"), this._tTime !== u)) return this; for (f = this._pt; f;)f.r(p, f.d), f = f._next; _ && _.render(i < 0 ? i : !h && x ? -He : _._dur * p, r, o) || this._startAt && (this._zTime = i), this._onUpdate && !r && (i < 0 && this._startAt && this._startAt.render(i, !0, o), Xt(this, "onUpdate")), this._repeat && d !== m && this.vars.onRepeat && !r && this.parent && Xt(this, "onRepeat"), (u === this._tDur || !u) && this._tTime === u && (i < 0 && this._startAt && !this._onUpdate && this._startAt.render(i, !0, !0), (i || !c) && (u === this._tDur && this._ts > 0 || !u && this._ts < 0) && ii(this, 1), !r && !(i < 0 && !a) && (u || a) && (Xt(this, u === l ? "onComplete" : "onReverseComplete", !0), this._prom && !(u < l && this.timeScale() > 0) && this._prom())) } return this }, t.targets = function () { return this._targets }, t.invalidate = function () { return this._pt = this._op = this._startAt = this._onUpdate = this._lazy = this.ratio = 0, this._ptLookup = [], this.timeline && this.timeline.invalidate(), s.prototype.invalidate.call(this) }, t.kill = function (i, r) { if (r === void 0 && (r = "all"), !i && (!r || r === "all")) return this._lazy = this._pt = 0, this.parent ? gs(this) : this; if (this.timeline) { var o = this.timeline.totalDuration(); return this.timeline.killTweensOf(i, r, si && si.vars.overwrite !== !0)._first || gs(this), this.parent && o !== this.timeline.totalDuration() && Tr(this, this._dur * this.timeline._tDur / o, 0, 1), this } var a = this._targets, l = i ? qt(i) : a, c = this._ptLookup, u = this._pt, h, f, d, g, m, x, p; if ((!r || r === "all") && lv(a, l)) return r === "all" && (this._pt = 0), gs(this); for (h = this._op = this._op || [], r !== "all" && (dt(r) && (m = {}, Lt(r, function (_) { return m[_] = 1 }), r = m), r = Bv(a, r)), p = a.length; p--;)if (~l.indexOf(a[p])) { f = c[p], r === "all" ? (h[p] = r, g = f, d = {}) : (d = h[p] = h[p] || {}, g = r); for (m in g) x = f && f[m], x && ((!("kill" in x.d) || x.d.kill(m) === !0) && Xo(this, x, "_pt"), delete f[m]), d !== "all" && (d[m] = 1) } return this._initted && !this._pt && u && gs(this), this }, e.to = function (i, r) { return new e(i, r, arguments[2]) }, e.from = function (i, r) { return ds(1, arguments) }, e.delayedCall = function (i, r, o, a) { return new e(r, 0, { immediateRender: !1, lazy: !1, overwrite: !1, delay: i, onComplete: r, onReverseComplete: r, onCompleteParams: o, onReverseCompleteParams: o, callbackScope: a }) }, e.fromTo = function (i, r, o) { return ds(2, arguments) }, e.set = function (i, r) { return r.duration = 0, r.repeatDelay || (r.repeat = 0), new e(i, r) }, e.killTweensOf = function (i, r, o) { return Ye.killTweensOf(i, r, o) }, e }(xs); Vt(nt.prototype, { _targets: [], _lazy: 0, _startAt: 0, _op: 0, _onInit: 0 }); Lt("staggerTo,staggerFrom,staggerFromTo", function (s) { nt[s] = function () { var e = new yt, t = Kl.call(arguments, 0); return t.splice(s === "staggerFromTo" ? 5 : 4, 0, 0), e[s].apply(e, t) } }); var lc = function (e, t, n) { return e[t] = n }, bd = function (e, t, n) { return e[t](n) }, zv = function (e, t, n, i) { return e[t](i.fp, n) }, Ov = function (e, t, n) { return e.setAttribute(t, n) }, Jo = function (e, t) { return lt(e[t]) ? bd : Uo(e[t]) && e.setAttribute ? Ov : lc }, Md = function (e, t) { return t.set(t.t, t.p, Math.round((t.s + t.c * e) * 1e6) / 1e6, t) }, Uv = function (e, t) { return t.set(t.t, t.p, !!(t.s + t.c * e), t) }, cc = function (e, t) { var n = t._pt, i = ""; if (!e && t.b) i = t.b; else if (e === 1 && t.e) i = t.e; else { for (; n;)i = n.p + (n.m ? n.m(n.s + n.c * e) : Math.round((n.s + n.c * e) * 1e4) / 1e4) + i, n = n._next; i += t.c } t.set(t.t, t.p, i, t) }, uc = function (e, t) { for (var n = t._pt; n;)n.r(e, n.d), n = n._next }, kv = function (e, t, n, i) { for (var r = this._pt, o; r;)o = r._next, r.p === i && r.modifier(e, t, n), r = o }, Hv = function (e) { for (var t = this._pt, n, i; t;)i = t._next, t.p === e && !t.op || t.op === e ? Xo(this, t, "_pt") : t.dep || (n = 1), t = i; return !n }, Gv = function (e, t, n, i) { i.mSet(e, t, i.m.call(i.tween, n, i.mt), i) }, hc = function (e) { for (var t = e._pt, n, i, r, o; t;) { for (n = t._next, i = r; i && i.pr > t.pr;)i = i._next; (t._prev = i ? i._prev : o) ? t._prev._next = t : r = t, (t._next = i) ? i._prev = t : o = t, t = n } e._pt = r }, Mt = function () { function s(t, n, i, r, o, a, l, c, u) { this.t = n, this.s = r, this.c = o, this.p = i, this.r = a || Md, this.d = l || this, this.set = c || lc, this.pr = u || 0, this._next = t, t && (t._prev = this) } var e = s.prototype; return e.modifier = function (n, i, r) { this.mSet = this.mSet || this.set, this.set = Gv, this.m = n, this.mt = r, this.tween = i }, s }(); Lt(Yl + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function (s) { return Wl[s] = 1 }); zt.TweenMax = zt.TweenLite = nt; zt.TimelineLite = zt.TimelineMax = yt; Ye = new yt({ sortChildren: !1, defaults: wr, autoRemoveChildren: !0, id: "root", smoothChildTiming: !0 }); bt.stringFilter = nc; var jo = { registerPlugin: function () { for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)t[n] = arguments[n]; t.forEach(function (i) { return Tv(i) }) }, timeline: function (e) { return new yt(e) }, getTweensOf: function (e, t) { return Ye.getTweensOf(e, t) }, getProperty: function (e, t, n, i) { dt(e) && (e = qt(e)[0]); var r = ni(e || {}).get, o = n ? Kf : Qf; return n === "native" && (n = ""), e && (t ? o((At[t] && At[t].get || r)(e, t, n, i)) : function (a, l, c) { return o((At[a] && At[a].get || r)(e, a, l, c)) }) }, quickSetter: function (e, t, n) { if (e = qt(e), e.length > 1) { var i = e.map(function (u) { return Yt.quickSetter(u, t, n) }), r = i.length; return function (u) { for (var h = r; h--;)i[h](u) } } e = e[0] || {}; var o = At[t], a = ni(e), l = a.harness && (a.harness.aliases || {})[t] || t, c = o ? function (u) { var h = new o; Er._pt = 0, h.init(e, n ? u + n : u, Er, 0, [e]), h.render(1, h), Er._pt && uc(1, Er) } : a.set(e, l); return o ? c : function (u) { return c(e, l, n ? u + n : u, a, 1) } }, isTweening: function (e) { return Ye.getTweensOf(e, !0).length > 0 }, defaults: function (e) { return e && e.ease && (e.ease = Lr(e.ease, wr.ease)), ed(wr, e || {}) }, config: function (e) { return ed(bt, e || {}) }, registerEffect: function (e) { var t = e.name, n = e.effect, i = e.plugins, r = e.defaults, o = e.extendTimeline; (i || "").split(",").forEach(function (a) { return a && !At[a] && !zt[a] && Go(t + " effect requires " + a + " plugin.") }), Xl[t] = function (a, l, c) { return n(qt(a), Vt(l || {}, r), c) }, o && (yt.prototype[t] = function (a, l, c) { return this.add(Xl[t](a, Cn(l) ? l : (c = l) && {}, this), c) }) }, registerEase: function (e, t) { De[e] = Lr(t) }, parseEase: function (e, t) { return arguments.length ? Lr(e, t) : De }, getById: function (e) { return Ye.getById(e) }, exportRoot: function (e, t) { e === void 0 && (e = {}); var n = new yt(e), i, r; for (n.smoothChildTiming = Et(e.smoothChildTiming), Ye.remove(n), n._dp = 0, n._time = n._tTime = Ye._time, i = Ye._first; i;)r = i._next, (t || !(!i._dur && i instanceof nt && i.vars.onComplete === i._targets[0])) && pn(n, i, i._start - i._delay), i = r; return pn(Ye, n, 0), n }, utils: { wrap: bv, wrapYoyo: Mv, distribute: cd, random: hd, snap: ud, normalize: wv, getUnit: Ct, clamp: gv, splitColor: md, toArray: qt, selector: xv, mapRange: dd, pipe: yv, unitize: vv, interpolate: Sv, shuffle: ld }, install: Yf, effects: Xl, ticker: Ot, updateRoot: yt.updateRoot, plugins: At, globalTimeline: Ye, core: { PropTween: Mt, globals: Zf, Tween: nt, Timeline: yt, Animation: xs, getCache: ni, _removeLinkedListItem: Xo, suppressOverwrites: function (e) { return Nl = e } } }; Lt("to,from,fromTo,delayedCall,set,killTweensOf", function (s) { return jo[s] = nt[s] }); Ot.add(yt.updateRoot); Er = jo.to({}, { duration: 0 }); var Vv = function (e, t) { for (var n = e._pt; n && n.p !== t && n.op !== t && n.fp !== t;)n = n._next; return n }, Wv = function (e, t) { var n = e._targets, i, r, o; for (i in t) for (r = n.length; r--;)o = e._ptLookup[r][i], o && (o = o.d) && (o._pt && (o = Vv(o, i)), o && o.modifier && o.modifier(t[i], e, n[r], i)) }, fc = function (e, t) { return { name: e, rawVars: 1, init: function (i, r, o) { o._onInit = function (a) { var l, c; if (dt(r) && (l = {}, Lt(r, function (u) { return l[u] = 1 }), r = l), t) { l = {}; for (c in r) l[c] = t(r[c]); r = l } Wv(a, r) } } } }, Yt = jo.registerPlugin({ name: "attr", init: function (e, t, n, i, r) { var o, a; for (o in t) a = this.add(e, "setAttribute", (e.getAttribute(o) || 0) + "", t[o], i, r, 0, 0, o), a && (a.op = o), this._props.push(o) } }, { name: "endArray", init: function (e, t) { for (var n = t.length; n--;)this.add(e, n, e[n] || 0, t[n]) } }, fc("roundProps", ec), fc("modifiers"), fc("snap", ud)) || jo; nt.version = yt.version = Yt.version = "3.7.1"; Xf = 1; Gf() && Ar(); var qv = De.Power0, Xv = De.Power1, Yv = De.Power2, Zv = De.Power3, Jv = De.Power4, jv = De.Linear, $v = De.Quad, Qv = De.Cubic, Kv = De.Quart, ew = De.Quint, tw = De.Strong, nw = De.Elastic, iw = De.Back, rw = De.SteppedEase, sw = De.Bounce, ow = De.Sine, Cr = De.Expo, aw = De.Circ; var Sd, oi, Pr, dc, Pi, lw, Td, cw = function () { return typeof window != "undefined" }, ai = {}, Ri = 180 / Math.PI, Rr = Math.PI / 180, Ir = Math.atan2, Ed = 1e8, Ad = /([A-Z])/g, uw = /(?:left|right|width|margin|padding|x)/i, hw = /[\s,\(]\S/, li = { autoAlpha: "opacity,visibility", scale: "scaleX,scaleY", alpha: "opacity" }, Ld = function (e, t) { return t.set(t.t, t.p, Math.round((t.s + t.c * e) * 1e4) / 1e4 + t.u, t) }, fw = function (e, t) { return t.set(t.t, t.p, e === 1 ? t.e : Math.round((t.s + t.c * e) * 1e4) / 1e4 + t.u, t) }, dw = function (e, t) { return t.set(t.t, t.p, e ? Math.round((t.s + t.c * e) * 1e4) / 1e4 + t.u : t.b, t) }, pw = function (e, t) { var n = t.s + t.c * e; t.set(t.t, t.p, ~~(n + (n < 0 ? -.5 : .5)) + t.u, t) }, Cd = function (e, t) { return t.set(t.t, t.p, e ? t.e : t.b, t) }, Pd = function (e, t) { return t.set(t.t, t.p, e !== 1 ? t.b : t.e, t) }, mw = function (e, t, n) { return e.style[t] = n }, gw = function (e, t, n) { return e.style.setProperty(t, n) }, _w = function (e, t, n) { return e._gsap[t] = n }, xw = function (e, t, n) { return e._gsap.scaleX = e._gsap.scaleY = n }, yw = function (e, t, n, i, r) { var o = e._gsap; o.scaleX = o.scaleY = n, o.renderTransform(r, o) }, vw = function (e, t, n, i, r) { var o = e._gsap; o[t] = n, o.renderTransform(r, o) }, pt = "transform", ci = pt + "Origin", Rd, pc = function (e, t) { var n = oi.createElementNS ? oi.createElementNS((t || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), e) : oi.createElement(e); return n.style ? n : oi.createElement(e) }, Rn = function s(e, t, n) { var i = getComputedStyle(e); return i[t] || i.getPropertyValue(t.replace(Ad, "-$1").toLowerCase()) || i.getPropertyValue(t) || !n && s(e, Dr(t) || t, 1) || "" }, Id = "O,Moz,ms,Ms,Webkit".split(","), Dr = function (e, t, n) { var i = t || Pi, r = i.style, o = 5; if (e in r && !n) return e; for (e = e.charAt(0).toUpperCase() + e.substr(1); o-- && !(Id[o] + e in r);); return o < 0 ? null : (o === 3 ? "ms" : o >= 0 ? Id[o] : "") + e }, mc = function () { cw() && window.document && (Sd = window, oi = Sd.document, Pr = oi.documentElement, Pi = pc("div") || { style: {} }, lw = pc("div"), pt = Dr(pt), ci = pt + "Origin", Pi.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0", Rd = !!Dr("perspective"), dc = 1) }, gc = function s(e) { var t = pc("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"), n = this.parentNode, i = this.nextSibling, r = this.style.cssText, o; if (Pr.appendChild(t), t.appendChild(this), this.style.display = "block", e) try { o = this.getBBox(), this._gsapBBox = this.getBBox, this.getBBox = s } catch (a) { } else this._gsapBBox && (o = this._gsapBBox()); return n && (i ? n.insertBefore(this, i) : n.appendChild(this)), Pr.removeChild(t), this.style.cssText = r, o }, Dd = function (e, t) { for (var n = t.length; n--;)if (e.hasAttribute(t[n])) return e.getAttribute(t[n]) }, Fd = function (e) { var t; try { t = e.getBBox() } catch (n) { t = gc.call(e, !0) } return t && (t.width || t.height) || e.getBBox === gc || (t = gc.call(e, !0)), t && !t.width && !t.x && !t.y ? { x: +Dd(e, ["x", "cx", "x1"]) || 0, y: +Dd(e, ["y", "cy", "y1"]) || 0, width: 0, height: 0 } : t }, Bd = function (e) { return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && Fd(e)) }, vs = function (e, t) { if (t) { var n = e.style; t in ai && t !== ci && (t = pt), n.removeProperty ? ((t.substr(0, 2) === "ms" || t.substr(0, 6) === "webkit") && (t = "-" + t), n.removeProperty(t.replace(Ad, "-$1").toLowerCase())) : n.removeAttribute(t) } }, ui = function (e, t, n, i, r, o) { var a = new Mt(e._pt, t, n, 0, 1, o ? Pd : Cd); return e._pt = a, a.b = i, a.e = r, e._props.push(n), a }, Nd = { deg: 1, rad: 1, turn: 1 }, hi = function s(e, t, n, i) { var r = parseFloat(n) || 0, o = (n + "").trim().substr((r + "").length) || "px", a = Pi.style, l = uw.test(t), c = e.tagName.toLowerCase() === "svg", u = (c ? "client" : "offset") + (l ? "Width" : "Height"), h = 100, f = i === "px", d = i === "%", g, m, x, p; return i === o || !r || Nd[i] || Nd[o] ? r : (o !== "px" && !f && (r = s(e, t, n, "px")), p = e.getCTM && Bd(e), (d || o === "%") && (ai[t] || ~t.indexOf("adius")) ? (g = p ? e.getBBox()[l ? "width" : "height"] : e[u], Pe(d ? r / g * h : r / 100 * g)) : (a[l ? "width" : "height"] = h + (f ? o : i), m = ~t.indexOf("adius") || i === "em" && e.appendChild && !c ? e : e.parentNode, p && (m = (e.ownerSVGElement || {}).parentNode), (!m || m === oi || !m.appendChild) && (m = oi.body), x = m._gsap, x && d && x.width && l && x.time === Ot.time ? Pe(r / x.width * h) : ((d || o === "%") && (a.position = Rn(e, "position")), m === e && (a.position = "static"), m.appendChild(Pi), g = Pi[u], m.removeChild(Pi), a.position = "absolute", l && d && (x = ni(m), x.time = Ot.time, x.width = m[u]), Pe(f ? g * r / h : g && r ? h / g * r : 0)))) }, Fr = function (e, t, n, i) { var r; return dc || mc(), t in li && t !== "transform" && (t = li[t], ~t.indexOf(",") && (t = t.split(",")[0])), ai[t] && t !== "transform" ? (r = bs(e, i), r = t !== "transformOrigin" ? r[t] : r.svg ? r.origin : Qo(Rn(e, ci)) + " " + r.zOrigin + "px") : (r = e.style[t], (!r || r === "auto" || i || ~(r + "").indexOf("calc(")) && (r = $o[t] && $o[t](e, t, n) || Rn(e, t) || Jl(e, t) || (t === "opacity" ? 1 : 0))), n && !~(r + "").trim().indexOf(" ") ? hi(e, t, r, n) + n : r }, ww = function (e, t, n, i) { if (!n || n === "none") { var r = Dr(t, e, 1), o = r && Rn(e, r, 1); o && o !== n ? (t = r, n = o) : t === "borderColor" && (n = Rn(e, "borderTopColor")) } var a = new Mt(this._pt, e.style, t, 0, 1, cc), l = 0, c = 0, u, h, f, d, g, m, x, p, _, w, v, b, T; if (a.b = n, a.e = i, n += "", i += "", i === "auto" && (e.style[t] = i, i = Rn(e, t) || i, e.style[t] = n), u = [n, i], nc(u), n = u[0], i = u[1], f = n.match(Ai) || [], T = i.match(Ai) || [], T.length) { for (; h = Ai.exec(i);)x = h[0], _ = i.substring(l, h.index), g ? g = (g + 1) % 5 : (_.substr(-5) === "rgba(" || _.substr(-5) === "hsla(") && (g = 1), x !== (m = f[c++] || "") && (d = parseFloat(m) || 0, v = m.substr((d + "").length), b = x.charAt(1) === "=" ? +(x.charAt(0) + "1") : 0, b && (x = x.substr(2)), p = parseFloat(x), w = x.substr((p + "").length), l = Ai.lastIndex - w.length, w || (w = w || bt.units[t] || v, l === i.length && (i += w, a.e += w)), v !== w && (d = hi(e, t, m, w) || 0), a._pt = { _next: a._pt, p: _ || c === 1 ? _ : ",", s: d, c: b ? b * p : p - d, m: g && g < 4 || t === "zIndex" ? Math.round : 0 }); a.c = l < i.length ? i.substring(l, i.length) : "" } else a.r = t === "display" && i === "none" ? Pd : Cd; return Hl.test(i) && (a.e = 0), this._pt = a, a }, zd = { top: "0%", bottom: "100%", left: "0%", right: "100%", center: "50%" }, bw = function (e) { var t = e.split(" "), n = t[0], i = t[1] || "50%"; return (n === "top" || n === "bottom" || i === "left" || i === "right") && (e = n, n = i, i = e), t[0] = zd[n] || n, t[1] = zd[i] || i, t.join(" ") }, Mw = function (e, t) { if (t.tween && t.tween._time === t.tween._dur) { var n = t.t, i = n.style, r = t.u, o = n._gsap, a, l, c; if (r === "all" || r === !0) i.cssText = "", l = 1; else for (r = r.split(","), c = r.length; --c > -1;)a = r[c], ai[a] && (l = 1, a = a === "transformOrigin" ? ci : pt), vs(n, a); l && (vs(n, pt), o && (o.svg && n.removeAttribute("transform"), bs(n, 1), o.uncache = 1)) } }, $o = { clearProps: function (e, t, n, i, r) { if (r.data !== "isFromStart") { var o = e._pt = new Mt(e._pt, t, n, 0, 0, Mw); return o.u = i, o.pr = -10, o.tween = r, e._props.push(n), 1 } } }, ws = [1, 0, 0, 1, 0, 0], Od = {}, Ud = function (e) { return e === "matrix(1, 0, 0, 1, 0, 0)" || e === "none" || !e }, kd = function (e) { var t = Rn(e, pt); return Ud(t) ? ws : t.substr(7).match(Ul).map(Pe) }, _c = function (e, t) { var n = e._gsap || ni(e), i = e.style, r = kd(e), o, a, l, c; return n.svg && e.getAttribute("transform") ? (l = e.transform.baseVal.consolidate().matrix, r = [l.a, l.b, l.c, l.d, l.e, l.f], r.join(",") === "1,0,0,1,0,0" ? ws : r) : (r === ws && !e.offsetParent && e !== Pr && !n.svg && (l = i.display, i.display = "block", o = e.parentNode, (!o || !e.offsetParent) && (c = 1, a = e.nextSibling, Pr.appendChild(e)), r = kd(e), l ? i.display = l : vs(e, "display"), c && (a ? o.insertBefore(e, a) : o ? o.appendChild(e) : Pr.removeChild(e))), t && r.length > 6 ? [r[0], r[1], r[4], r[5], r[12], r[13]] : r) }, xc = function (e, t, n, i, r, o) { var a = e._gsap, l = r || _c(e, !0), c = a.xOrigin || 0, u = a.yOrigin || 0, h = a.xOffset || 0, f = a.yOffset || 0, d = l[0], g = l[1], m = l[2], x = l[3], p = l[4], _ = l[5], w = t.split(" "), v = parseFloat(w[0]) || 0, b = parseFloat(w[1]) || 0, T, y, C, R; n ? l !== ws && (y = d * x - g * m) && (C = v * (x / y) + b * (-m / y) + (m * _ - x * p) / y, R = v * (-g / y) + b * (d / y) - (d * _ - g * p) / y, v = C, b = R) : (T = Fd(e), v = T.x + (~w[0].indexOf("%") ? v / 100 * T.width : v), b = T.y + (~(w[1] || w[0]).indexOf("%") ? b / 100 * T.height : b)), i || i !== !1 && a.smooth ? (p = v - c, _ = b - u, a.xOffset = h + (p * d + _ * m) - p, a.yOffset = f + (p * g + _ * x) - _) : a.xOffset = a.yOffset = 0, a.xOrigin = v, a.yOrigin = b, a.smooth = !!i, a.origin = t, a.originIsAbsolute = !!n, e.style[ci] = "0px 0px", o && (ui(o, a, "xOrigin", c, v), ui(o, a, "yOrigin", u, b), ui(o, a, "xOffset", h, a.xOffset), ui(o, a, "yOffset", f, a.yOffset)), e.setAttribute("data-svg-origin", v + " " + b) }, bs = function (e, t) { var n = e._gsap || new sc(e); if ("x" in n && !t && !n.uncache) return n; var i = e.style, r = n.scaleX < 0, o = "px", a = "deg", l = Rn(e, ci) || "0", c, u, h, f, d, g, m, x, p, _, w, v, b, T, y, C, R, D, L, $, z, F, U, N, k, Q, oe, ue, ee, we, W, j; return c = u = h = g = m = x = p = _ = w = 0, f = d = 1, n.svg = !!(e.getCTM && Bd(e)), T = _c(e, n.svg), n.svg && (N = (!n.uncache || l === "0px 0px") && !t && e.getAttribute("data-svg-origin"), xc(e, N || l, !!N || n.originIsAbsolute, n.smooth !== !1, T)), v = n.xOrigin || 0, b = n.yOrigin || 0, T !== ws && (D = T[0], L = T[1], $ = T[2], z = T[3], c = F = T[4], u = U = T[5], T.length === 6 ? (f = Math.sqrt(D * D + L * L), d = Math.sqrt(z * z + $ * $), g = D || L ? Ir(L, D) * Ri : 0, p = $ || z ? Ir($, z) * Ri + g : 0, p && (d *= Math.abs(Math.cos(p * Rr))), n.svg && (c -= v - (v * D + b * $), u -= b - (v * L + b * z))) : (j = T[6], we = T[7], oe = T[8], ue = T[9], ee = T[10], W = T[11], c = T[12], u = T[13], h = T[14], y = Ir(j, ee), m = y * Ri, y && (C = Math.cos(-y), R = Math.sin(-y), N = F * C + oe * R, k = U * C + ue * R, Q = j * C + ee * R, oe = F * -R + oe * C, ue = U * -R + ue * C, ee = j * -R + ee * C, W = we * -R + W * C, F = N, U = k, j = Q), y = Ir(-$, ee), x = y * Ri, y && (C = Math.cos(-y), R = Math.sin(-y), N = D * C - oe * R, k = L * C - ue * R, Q = $ * C - ee * R, W = z * R + W * C, D = N, L = k, $ = Q), y = Ir(L, D), g = y * Ri, y && (C = Math.cos(y), R = Math.sin(y), N = D * C + L * R, k = F * C + U * R, L = L * C - D * R, U = U * C - F * R, D = N, F = k), m && Math.abs(m) + Math.abs(g) > 359.9 && (m = g = 0, x = 180 - x), f = Pe(Math.sqrt(D * D + L * L + $ * $)), d = Pe(Math.sqrt(U * U + j * j)), y = Ir(F, U), p = Math.abs(y) > 2e-4 ? y * Ri : 0, w = W ? 1 / (W < 0 ? -W : W) : 0), n.svg && (N = e.getAttribute("transform"), n.forceCSS = e.setAttribute("transform", "") || !Ud(Rn(e, pt)), N && e.setAttribute("transform", N))), Math.abs(p) > 90 && Math.abs(p) < 270 && (r ? (f *= -1, p += g <= 0 ? 180 : -180, g += g <= 0 ? 180 : -180) : (d *= -1, p += p <= 0 ? 180 : -180)), n.x = c - ((n.xPercent = c && (n.xPercent || (Math.round(e.offsetWidth / 2) === Math.round(-c) ? -50 : 0))) ? e.offsetWidth * n.xPercent / 100 : 0) + o, n.y = u - ((n.yPercent = u && (n.yPercent || (Math.round(e.offsetHeight / 2) === Math.round(-u) ? -50 : 0))) ? e.offsetHeight * n.yPercent / 100 : 0) + o, n.z = h + o, n.scaleX = Pe(f), n.scaleY = Pe(d), n.rotation = Pe(g) + a, n.rotationX = Pe(m) + a, n.rotationY = Pe(x) + a, n.skewX = p + a, n.skewY = _ + a, n.transformPerspective = w + o, (n.zOrigin = parseFloat(l.split(" ")[2]) || 0) && (i[ci] = Qo(l)), n.xOffset = n.yOffset = 0, n.force3D = bt.force3D, n.renderTransform = n.svg ? Tw : Rd ? Hd : Sw, n.uncache = 0, n }, Qo = function (e) { return (e = e.split(" "))[0] + " " + e[1] }, yc = function (e, t, n) { var i = Ct(t); return Pe(parseFloat(t) + parseFloat(hi(e, "x", n + "px", i))) + i }, Sw = function (e, t) { t.z = "0px", t.rotationY = t.rotationX = "0deg", t.force3D = 0, Hd(e, t) }, Ii = "0deg", Ms = "0px", Di = ") ", Hd = function (e, t) { var n = t || this, i = n.xPercent, r = n.yPercent, o = n.x, a = n.y, l = n.z, c = n.rotation, u = n.rotationY, h = n.rotationX, f = n.skewX, d = n.skewY, g = n.scaleX, m = n.scaleY, x = n.transformPerspective, p = n.force3D, _ = n.target, w = n.zOrigin, v = "", b = p === "auto" && e && e !== 1 || p === !0; if (w && (h !== Ii || u !== Ii)) { var T = parseFloat(u) * Rr, y = Math.sin(T), C = Math.cos(T), R; T = parseFloat(h) * Rr, R = Math.cos(T), o = yc(_, o, y * R * -w), a = yc(_, a, -Math.sin(T) * -w), l = yc(_, l, C * R * -w + w) } x !== Ms && (v += "perspective(" + x + Di), (i || r) && (v += "translate(" + i + "%, " + r + "%) "), (b || o !== Ms || a !== Ms || l !== Ms) && (v += l !== Ms || b ? "translate3d(" + o + ", " + a + ", " + l + ") " : "translate(" + o + ", " + a + Di), c !== Ii && (v += "rotate(" + c + Di), u !== Ii && (v += "rotateY(" + u + Di), h !== Ii && (v += "rotateX(" + h + Di), (f !== Ii || d !== Ii) && (v += "skew(" + f + ", " + d + Di), (g !== 1 || m !== 1) && (v += "scale(" + g + ", " + m + Di), _.style[pt] = v || "translate(0, 0)" }, Tw = function (e, t) { var n = t || this, i = n.xPercent, r = n.yPercent, o = n.x, a = n.y, l = n.rotation, c = n.skewX, u = n.skewY, h = n.scaleX, f = n.scaleY, d = n.target, g = n.xOrigin, m = n.yOrigin, x = n.xOffset, p = n.yOffset, _ = n.forceCSS, w = parseFloat(o), v = parseFloat(a), b, T, y, C, R; l = parseFloat(l), c = parseFloat(c), u = parseFloat(u), u && (u = parseFloat(u), c += u, l += u), l || c ? (l *= Rr, c *= Rr, b = Math.cos(l) * h, T = Math.sin(l) * h, y = Math.sin(l - c) * -f, C = Math.cos(l - c) * f, c && (u *= Rr, R = Math.tan(c - u), R = Math.sqrt(1 + R * R), y *= R, C *= R, u && (R = Math.tan(u), R = Math.sqrt(1 + R * R), b *= R, T *= R)), b = Pe(b), T = Pe(T), y = Pe(y), C = Pe(C)) : (b = h, C = f, T = y = 0), (w && !~(o + "").indexOf("px") || v && !~(a + "").indexOf("px")) && (w = hi(d, "x", o, "px"), v = hi(d, "y", a, "px")), (g || m || x || p) && (w = Pe(w + g - (g * b + m * y) + x), v = Pe(v + m - (g * T + m * C) + p)), (i || r) && (R = d.getBBox(), w = Pe(w + i / 100 * R.width), v = Pe(v + r / 100 * R.height)), R = "matrix(" + b + "," + T + "," + y + "," + C + "," + w + "," + v + ")", d.setAttribute("transform", R), _ && (d.style[pt] = R) }, Ew = function (e, t, n, i, r, o) { var a = 360, l = dt(r), c = parseFloat(r) * (l && ~r.indexOf("rad") ? Ri : 1), u = o ? c * o : c - i, h = i + u + "deg", f, d; return l && (f = r.split("_")[1], f === "short" && (u %= a, u !== u % (a / 2) && (u += u < 0 ? a : -a)), f === "cw" && u < 0 ? u = (u + a * Ed) % a - ~~(u / a) * a : f === "ccw" && u > 0 && (u = (u - a * Ed) % a - ~~(u / a) * a)), e._pt = d = new Mt(e._pt, t, n, i, u, fw), d.e = h, d.u = "deg", e._props.push(n), d }, Gd = function (e, t) { for (var n in t) e[n] = t[n]; return e }, Aw = function (e, t, n) { var i = Gd({}, n._gsap), r = "perspective,force3D,transformOrigin,svgOrigin", o = n.style, a, l, c, u, h, f, d, g; i.svg ? (c = n.getAttribute("transform"), n.setAttribute("transform", ""), o[pt] = t, a = bs(n, 1), vs(n, pt), n.setAttribute("transform", c)) : (c = getComputedStyle(n)[pt], o[pt] = t, a = bs(n, 1), o[pt] = c); for (l in ai) c = i[l], u = a[l], c !== u && r.indexOf(l) < 0 && (d = Ct(c), g = Ct(u), h = d !== g ? hi(n, l, c, g) : parseFloat(c), f = parseFloat(u), e._pt = new Mt(e._pt, a, l, h, f - h, Ld), e._pt.u = g || 0, e._props.push(l)); Gd(a, i) }; Lt("padding,margin,Width,Radius", function (s, e) { var t = "Top", n = "Right", i = "Bottom", r = "Left", o = (e < 3 ? [t, n, i, r] : [t + r, t + n, i + n, i + r]).map(function (a) { return e < 2 ? s + a : "border" + a + s }); $o[e > 1 ? "border" + s : s] = function (a, l, c, u, h) { var f, d; if (arguments.length < 4) return f = o.map(function (g) { return Fr(a, g, c) }), d = f.join(" "), d.split(f[0]).length === 5 ? f[0] : d; f = (u + "").split(" "), d = {}, o.forEach(function (g, m) { return d[g] = f[m] = f[m] || f[(m - 1) / 2 | 0] }), a.init(l, d, h) } }); var vc = { name: "css", register: mc, targetTest: function (e) { return e.style && e.nodeType }, init: function (e, t, n, i, r) { var o = this._props, a = e.style, l = n.vars.startAt, c, u, h, f, d, g, m, x, p, _, w, v, b, T, y; dc || mc(); for (m in t) if (m !== "autoRound" && (u = t[m], !(At[m] && ac(m, t, n, i, e, r)))) { if (d = typeof u, g = $o[m], d === "function" && (u = u.call(n, i, e, r), d = typeof u), d === "string" && ~u.indexOf("random(") && (u = ms(u)), g) g(this, e, m, u, n) && (y = 1); else if (m.substr(0, 2) === "--") c = (getComputedStyle(e).getPropertyValue(m) + "").trim(), u += "", Pn.lastIndex = 0, Pn.test(c) || (x = Ct(c), p = Ct(u)), p ? x !== p && (c = hi(e, m, c, p) + p) : x && (u += x), this.add(a, "setProperty", c, u, i, r, 0, 0, m), o.push(m); else if (d !== "undefined") { if (l && m in l ? (c = typeof l[m] == "function" ? l[m].call(n, i, e, r) : l[m], m in bt.units && !Ct(c) && (c += bt.units[m]), (c + "").charAt(1) === "=" && (c = Fr(e, m))) : c = Fr(e, m), f = parseFloat(c), _ = d === "string" && u.charAt(1) === "=" ? +(u.charAt(0) + "1") : 0, _ && (u = u.substr(2)), h = parseFloat(u), m in li && (m === "autoAlpha" && (f === 1 && Fr(e, "visibility") === "hidden" && h && (f = 0), ui(this, a, "visibility", f ? "inherit" : "hidden", h ? "inherit" : "hidden", !h)), m !== "scale" && m !== "transform" && (m = li[m], ~m.indexOf(",") && (m = m.split(",")[0]))), w = m in ai, w) { if (v || (b = e._gsap, b.renderTransform && !t.parseTransform || bs(e, t.parseTransform), T = t.smoothOrigin !== !1 && b.smooth, v = this._pt = new Mt(this._pt, a, pt, 0, 1, b.renderTransform, b, 0, -1), v.dep = 1), m === "scale") this._pt = new Mt(this._pt, b, "scaleY", b.scaleY, (_ ? _ * h : h - b.scaleY) || 0), o.push("scaleY", m), m += "X"; else if (m === "transformOrigin") { u = bw(u), b.svg ? xc(e, u, 0, T, 0, this) : (p = parseFloat(u.split(" ")[2]) || 0, p !== b.zOrigin && ui(this, b, "zOrigin", b.zOrigin, p), ui(this, a, m, Qo(c), Qo(u))); continue } else if (m === "svgOrigin") { xc(e, u, 1, T, 0, this); continue } else if (m in Od) { Ew(this, b, m, f, u, _); continue } else if (m === "smoothOrigin") { ui(this, b, "smooth", b.smooth, u); continue } else if (m === "force3D") { b[m] = u; continue } else if (m === "transform") { Aw(this, u, e); continue } } else m in a || (m = Dr(m) || m); if (w || (h || h === 0) && (f || f === 0) && !hw.test(u) && m in a) x = (c + "").substr((f + "").length), h || (h = 0), p = Ct(u) || (m in bt.units ? bt.units[m] : x), x !== p && (f = hi(e, m, c, p)), this._pt = new Mt(this._pt, w ? b : a, m, f, _ ? _ * h : h - f, !w && (p === "px" || m === "zIndex") && t.autoRound !== !1 ? pw : Ld), this._pt.u = p || 0, x !== p && (this._pt.b = c, this._pt.r = dw); else if (m in a) ww.call(this, e, m, c, u); else if (m in e) this.add(e, m, c || e[m], u, i, r); else { Ho(m, u); continue } o.push(m) } } y && hc(this) }, get: Fr, aliases: li, getSetter: function (e, t, n) { var i = li[t]; return i && i.indexOf(",") < 0 && (t = i), t in ai && t !== ci && (e._gsap.x || Fr(e, "x")) ? n && Td === n ? t === "scale" ? xw : _w : (Td = n || {}) && (t === "scale" ? yw : vw) : e.style && !Uo(e.style[t]) ? mw : ~t.indexOf("-") ? gw : Jo(e, t) }, core: { _removeProperty: vs, _getMatrix: _c } }; Yt.utils.checkPrefix = Dr; (function (s, e, t, n) { var i = Lt(s + "," + e + "," + t, function (r) { ai[r] = 1 }); Lt(e, function (r) { bt.units[r] = "deg", Od[r] = 1 }), li[i[13]] = s + "," + e, Lt(n, function (r) { var o = r.split(":"); li[o[1]] = i[o[0]] }) })("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY"); Lt("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (s) { bt.units[s] = "px" }); Yt.registerPlugin(vc); var mn = Yt.registerPlugin(vc) || Yt, gb = mn.core.Tween; var Vd = class extends tt { constructor(e, t, n, i) { super(t, n); this.camera = e, this.params = i, this.transform = { position: new A, scale: new A, introScale: new A }, this.state = Ls({ active: !1 }), this.setEvents() } introTransition(e, t, n) { this.material.uniforms.uSaturation.value = 0; let { width: i } = n; this.position.set(0, 0, 0); let r = e.scale.x * i * 1.9, o = e.scale.y * i * 1.9; this.transform.scale.set(r, o, 1); let a = this.transform.scale, l = this.transform.introScale; this.scale.lerpVectors(a, l, t) } setEvents() { this.state.onChange("active", (e, t) => { e ? (mn.to(this.material.uniforms.uSaturation, { value: 0 }), mn.to(this.scale, { x: this.params.scale.x * 1.22, y: this.params.scale.y * 1.22, ease: Cr.easeOut, duration: 1.2 })) : (mn.to(this.material.uniforms.uSaturation, { value: -.5 }), mn.to(this.scale, { x: this.params.scale.x * .78, y: this.params.scale.y * .78, ease: Cr.easeOut, duration: 1.2 })) }) } getActive() { return this.state.active } setActive(e) { this.state.active = e } }, Wd = Vd; var Lw = `
    varying vec2 vUv;

    void main(){
        vUv = uv;
        gl_Position = vec4(position.xy, 0.0, 1.0);
    }
`, Cw = `
    uniform float uMixFactor;
    uniform vec3 uColorInitial;
    uniform vec3 uColorFinal;
    uniform float uAlpha;
    uniform float uTime;
    uniform float uNoiseFactor;
    uniform float uNoiseAmplitude;
    uniform float uNoiseFrequency;

    varying vec2 vUv;

    float Noise21 (vec2 p, float ta, float tb) {
        return fract(sin(p.x*ta+p.y*tb)*5678.);
    }

    // uniform vec2 uNoiseTextureSize;
    // uniform sampler2D uNoiseTexture;

    void main() {
        vec3 colorMix = mix(uColorInitial, uColorFinal, uMixFactor);
    //  vec2 noiseUv = fract(gl_FragCoord.xy / uNoiseTextureSize);
    //  vec4 noise = texture2D(uNoiseTexture, noiseUv);
        // float noise = rand(uTime * 0.1);
        // vec3 noised = vec3(noise * 0.1);
        // vec3 finalColor = mix(colorMix, vec3(noise), noise.a);
    //  gl_FragColor = vec4(finalColor, uAlpha);

        float t = sin(uTime) +123.; // tweak the start moment
        float ta = t*uNoiseAmplitude;
        float tb = t*(ta*uNoiseFrequency);
        
        float noise = Noise21(vUv, ta, tb);

        vec3 colorNoise = vec3(noise);

        vec3 mixed = mix(colorMix, colorNoise, uNoiseFactor);

        // gl_FragColor = vec4(colorMix, 1.);
        gl_FragColor = vec4(mixed, 1.);
    }
`, qd = class extends tt { constructor(e) { let t = new Jn(2, 2, 1, 1), n = new Gt({ vertexShader: Lw, fragmentShader: Cw, uniforms: { uMixFactor: { value: 0 }, uColorInitial: { value: new se("#A89891") }, uColorFinal: { value: new se("#A6A594") }, uAlpha: { value: 1 }, uTime: { value: 0 }, uNoiseFactor: { value: e.uNoiseFactor }, uNoiseAmplitude: { value: e.uNoiseAmplitude }, uNoiseFrequency: { value: e.uNoiseFrequency } }, depthTest: !1 }); super(t, n) } }, Xd = qd; var In = { progression: 0, initialZ: 15, scaleScalar: 1.38, gap: .5, backgroundProgression: 0 }, wc = [], Pw = { uNoiseFactor: .07, uNoiseAmplitude: .654321, uNoiseFrequency: .123456 }, Rw = { phase: "IDLE", activeProjectIndex: 1, target: 0, prevActiveProjectIndex: 1 }, ze = Ls(Rw), Dn, Ko, Fi, bc, Ss = new Y(-window.innerWidth, -window.innerHeight), Ts = [], fi, Mc = new Ro, Sc = Oo(window.devicePixelRatio, 1, 2), Yd = [], ea = [], sn, gn = [], Br = new Qn, Iw = [], ta = new Y, Tc = new Y, Pt = new Y, Fn = new Y, Es = new Oe(Pt.x, Pt.y, Fn.x, Fn.y), Ec = !1, Ac = 0, Zd = Pt.x, Dw = !1, Hb = new Y, Gb = { vector: new A }, Lc = Array.from(document.querySelectorAll(".hero-img__wrap img")), Zt = [{ texture: Mc.load(Lc[0].src), title: "Rendez-vous", primaryColor: new se("#A89891"), secondaryColor: new se("#E1D6DA") }, { texture: Mc.load(Lc[1].src), title: "How Far Can We Go", primaryColor: new se("#9F9D8D"), secondaryColor: new se("#0C0F0E") }, { texture: Mc.load(Lc[2].src), title: "Max Mara", primaryColor: new se("#CBC2B6"), secondaryColor: new se("#431B27") }]; function Fw() { Fi = new ke({ canvas: document.querySelector("canvas"), antialias: !0, alpha: !0 }), Fi.setSize(window.innerWidth, window.innerHeight), Fi.setAnimationLoop(jw), Fi.outputEncoding = Gi, Ko = new $r, Dn = new ft(4, window.innerWidth / window.innerHeight, .01, 100), Dn.position.z = In.initialZ, bc = new Dl, fi = sa(Dn), Bw(), Nw(), zw() } function Bw() { Yd.push(new Jn(.3, .3, 1, 1)) } function Nw() {
		for (let s of Zt) ea.push(new Gt({
			vertexShader: `
                varying vec2 vUv;
    
                void main(void) {
                    vUv = uv;
    
                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
                }
            `, fragmentShader: `
                uniform vec2 uResolution;
                uniform sampler2D uTexture;
                uniform vec2 uMouseCoordinates;
                uniform float uPixelRatio;
                uniform float uSaturation;

                varying vec2 vUv;

                float roundBox( vec3 position, vec3 box, float radius )
                {
                    return length(max(abs(position)-box,0.0))-radius;
                }

                //---------------------------------------------------------
                // draw rectangle frame with rounded edges
                //---------------------------------------------------------
                float roundedFrame (vec2 pos, vec2 size, float radius, float thickness)
                {
                    float d = length(max(abs(vUv - pos),size) - size) - radius;
                    return smoothstep(0.55, 0.45, abs(d / thickness) * 5.0);
                }

                // from http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm
                float udRoundBox( vec2 p, vec2 b, float r )
                {
                    return length(max(abs(p)-b+r,0.0))-r;
                }

                vec3 adjustExposure(vec3 color, float value) {
                    return (1.0 + value) * color;
                  }

                vec3 adjustSaturation(vec3 color, float value) {
                    // https://www.w3.org/TR/WCAG21/#dfn-relative-luminance
                    const vec3 luminosityFactor = vec3(0.2126, 0.7152, 0.0722);
                    vec3 grayscale = vec3(dot(color, luminosityFactor));
                    
                    return mix(grayscale, color, 1.0 + value);
                }
                
                float circle(in vec2 _st, in float _radius, in float blurriness){
                    vec2 dist = _st;
                    return 1.-smoothstep(_radius-(_radius*blurriness), _radius+(_radius*blurriness), dot(dist,dist)*4.0);
                }
                
                void main() {
                    vec2 res = uResolution * uPixelRatio;
                    vec2 st = gl_FragCoord.xy / res.xy - vec2(0.5);
                    // tip: use the following formula to keep the good ratio of your coordinates
                    st.y *= uResolution.y / uResolution.x;
                
                    // We readjust the mouse coordinates
                    vec2 mouse = uMouseCoordinates * -0.5;
                    mouse.y *= 0.5;

                    vec2 circlePos = st + mouse;
                    float circleColor = circle(circlePos, .005, 3.);
                    circleColor *= 0.5;
            
                    vec4 texel = texture2D(uTexture, vUv);

                    vec3 circleTexel = vec3(adjustExposure(texel.rgb, circleColor));
                    circleTexel = adjustSaturation(circleTexel, uSaturation);

                    // vec2 halfUv = 0.5 * vUv.xy;
                    // compute box
                    // float box = udRoundBox( vUv - halfUv, halfUv, 1000. );
                    // float box = distance(vUv - halfUv, halfUv);
                    // colorize (red / black )
                    // vec3 color = mix( vec3(1.0,0.0,0.0), vec3(0.0,0.0,0.0), smoothstep(0.0,1.0,box) );

                    // float frame = roundedFrame(circleTexel.xy, circleTexel.xy, 100., 10.);

                    gl_FragColor = vec4(circleTexel, texel.a);
                }
            `, uniforms: { uTexture: { value: s.texture }, uMouseCoordinates: { value: new Y }, uResolution: { value: new Y(window.innerWidth, window.innerHeight) }, uPixelRatio: { value: Sc }, uSaturation: { value: -.5 } }, transparent: !0
		}))
	} function zw() { for (let s = 0; s < Zt.length; s++) { let e = { position: new A(-fi.width / 2 + fi.width / 2 * s, 0, -.1), rotation: new wn, scale: new A(1.3 * In.scaleScalar, 1 * In.scaleScalar, 1) }; wc.push(e); let t = new Wd(Dn, Yd[0], ea[s], e); t.position.copy(e.position), t.rotation.copy(e.rotation), t.scale.copy(e.scale), t.name = Zt[s].title, gn.push(t), Br.add(t), Iw.push(t) } Ko.add(Br), sn = new Xd(Pw), sn.renderOrder = -1, sn.frustumCulled = !1, sn.name = "Background", Ko.add(sn), Zt[ze.activeProjectIndex] && (sn.material.uniforms.uColorFinal.value = Zt[ze.activeProjectIndex].primaryColor), Zt[ze.activeProjectIndex] && (sn.material.uniforms.uColorInitial.value = Zt[ze.activeProjectIndex].primaryColor) } var Ow = s => { for (let e = 0; e < gn.length; e++)if (gn[e].name === s.object.name) return e }, Uw = s => { if (ze.phase === "SLIDING") return; let { clientX: e, clientY: t } = s.touches && s.touches.length ? s.touches[0] : s; Zd = Pt.x, Ac = 1, ta.x = e, ta.y = t, Tc.copy(Pt), Ts.length ? (ze.activeProjectIndex = Ow(Ts[0]), Ec = !0) : Ec = !1 }, kw = s => { Ac = 0, Zd - Pt.x == 0 && Ec && Ts.length }; function Jd(s) { let { clientX: e, clientY: t } = s.touches && s.touches.length ? s.touches[0] : s; Ss.x = s.clientX / window.innerWidth * 2 - 1, Ss.y = -(s.clientY / window.innerHeight) * 2 + 1, ea[ze.activeProjectIndex] && mn.to(ea[ze.activeProjectIndex].uniforms.uMouseCoordinates.value, { x: Ss.x, y: Ss.y, ease: Cr.easeOut, duration: 1 }), ze.phase !== "SLIDING" && (Ac === 0 || Dw || (Fn.x = Tc.x + (e - ta.x), Fn.y = Tc.y + (t - ta.y))) } function jd() { let s = window.innerWidth, e = window.innerHeight; Sc = Oo(window.devicePixelRatio, 1, 2), Dn.aspect = s / e, Dn.updateProjectionMatrix(), Fi.setSize(s, e), Fi.setPixelRatio(Sc), fi = sa(Dn); for (let t of gn) t.material.uniforms.uResolution.value.set(s, e) } function Hw() { window.addEventListener("resize", jd), window.addEventListener("mousedown", Uw), window.addEventListener("mouseup", kw), window.addEventListener("mousemove", Jd), window.addEventListener("touchmove", Jd), ze.onChange("phase", (s, e) => { e === "PRELOAD" && s === "INTRO" ? setTimeout(() => { ze.phase = "IDLE" }, 1500) : e === "IDLE" && s === "SLIDING" ? (Es.set(Pt.x, Pt.y, Fn.x, Fn.y), Zt[ze.activeProjectIndex] && (sn.material.uniforms.uColorFinal.value = Zt[ze.activeProjectIndex].primaryColor), mn.to(In, { backgroundProgression: 1 }), setTimeout(() => { ze.phase = "IDLE" }, 1e3)) : e === "SLIDING" && s === "IDLE" && (In.backgroundProgression = 0, Zt[ze.activeProjectIndex] && (sn.material.uniforms.uColorInitial.value = Zt[ze.activeProjectIndex].primaryColor)) }), ze.onChange("activeProjectIndex", (s, e) => { e !== s && (ze.prevActiveProjectIndex = e); for (let t = 0; t < gn.length; t++) { let n = gn[t]; t !== s && n.getActive() ? n.setActive(!1) : t === s && !n.getActive() && n.setActive(!0) } }) } function Gw() { bc.setFromCamera(Ss, Dn), Ts = bc.intersectObjects(Br.children, !0), Ts.length } function Vw() { switch (ze.phase) { case "PRELOAD": gn[1].introTransition(wc[1], 0, fi); break; case "INTRO": In.progression = ra(In.progression, 1, .1), gn[1].introTransition(wc[1], In.progression, fi); break; case "IDLE": Pt.x += Fn.x - Pt.x, Pt.y += Fn.y - Pt.y; break; case "SLIDING": Pt.set(Es.x, Es.y), Fn.set(Es.z, Es.w), Br.position.x = ra(Br.position.x, ze.target, .1); break; default: break } } function Ww() { let s = Pt.x * .01 % Zt.length, e = parseInt(s + ""); if (ze.phase === "IDLE") { let t = 1 - e, n = Oo(t, ze.activeProjectIndex - 1, ze.activeProjectIndex + 1); n !== ze.activeProjectIndex && (ze.activeProjectIndex = n) } } function qw() { } function Xw(s) { let e = fi.width / 2 - fi.width / 2 * s; Math.round(Br.position.x) !== Math.round(e) && ze.phase === "IDLE" && (ze.phase = "SLIDING", ze.target = e) } function Yw(s) { sn.material.uniforms.uMixFactor.value = In.backgroundProgression, sn.material.uniforms.uTime.value = s } function Zw() { } function Jw() { } function jw(s) { Fi.render(Ko, Dn), Gw(), Vw(), Ww(), qw(), Yw(s), Xw(ze.activeProjectIndex), Zw(), Jw() } function $w(s) { ze.phase = "PRELOAD", !!s && s.pause(), gn[1].transform.introScale.copy(gn[1].params.scale).multiplyScalar(1.22); let e = document.querySelector("main"); setTimeout(() => { mn.to(e, { opacity: 0, onComplete: () => { e.style.display = "none", ze.phase = "INTRO" } }) }, 200) } var Qw = () => { let s = document.querySelector("#loader"); !!s && s.play(), Fw(), jd(), Hw(), setTimeout(() => { $w(s) }, 1e3) }; Bc(Qw);
})();
/*!
 * CSSPlugin 3.7.1
 * https://greensock.com
 *
 * Copyright 2008-2021, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/
/*!
 * GSAP 3.7.1
 * https://greensock.com
 *
 * @license Copyright 2008-2021, GreenSock. All rights reserved.
 * Subject to the terms at https://greensock.com/standard-license or for
 * Club GreenSock members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
*/
/**
 * @license
 * Copyright 2010-2021 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
